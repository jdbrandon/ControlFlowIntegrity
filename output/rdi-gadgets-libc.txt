0001f4b0: CLP; push rbp ; lea rdi, [rip + 0x114f8a] ; mov esi, 0x80000001 ; push rbx ; push rdx ; call 0x11c37c
write: esi rdi rsp 
0001f59b: CLP; mov rax, qword ptr [rdi] ; mov r8d, 0x7fffffff ; movzx eax, byte ptr [rax] ; sub eax, 0x30 ; mov rdx, qword ptr [rdi] ; lea rcx, [rdx + 1] ; mov qword ptr [rdi], rcx ; movzx edx, byte ptr [rdx + 1] ; sub edx, 0x30 ; cmp edx, 9 ; ja 0x1f5e4
0001f5e9: CLP; push rbp ; mov r9, rcx ; xor eax, eax ; mov r11, rdi ; or rcx, 0xffffffffffffffff ; mov rdi, r9 ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x18 ; movsx ebx, byte ptr [rdx] ; repne scasb al, byte ptr [rdi]
read: al eax r12 r13 r14 r15 r9 rbp rbx rcx rdi rflags rsp 
write: eax ebx r11 r9 rbp rcx rdi rflags rsp 
0001f6e5: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; lea rdi, [rip + 0x1154c6] ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x68 ; call 0xe6e3c
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r14 r15 rbp rbx rdi rflags rsp 
0001f929: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; lea rdi, [rip + 0x115282] ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x68 ; call 0xe6e3c
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r14 r15 rbp rbx rdi rflags rsp 
0001fb6d: CLP; mov rdx, qword ptr [rdi] ; mov r9d, 0x7fffffff ; mov eax, dword ptr [rdx] ; add rdx, 4 ; sub eax, 0x30 ; mov esi, dword ptr [rdx] ; lea ecx, [rsi - 0x30] ; cmp ecx, 9 ; ja 0x1fbb3
0001fbbb: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14d, ecx ; push r13 ; push r12 ; push rbx ; push rax ; movsx ebx, byte ptr [rdx] ; mov rax, rdi ; lea ecx, [rbx - 1] ; cmp cl, 0x7d ; ja 0x1fc77
read: cl ecx r12 r13 r14 r15 rax rbp rbx rdi rflags rsp 
0001fc8a: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; lea rdi, [rip + 0x114f18] ; sub r13, r12 ; push rbx ; and r13, 0xfffffffffffffffc ; mov ebx, 1 ; sub rsp, 0x18 ; mov qword ptr [rbp - 0x38], rdx
read: r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
write: ebx r12 r13 rbp rdi rflags rsp 
0001feda: CLP; push rbp ; mov r9, rdi ; xor eax, eax ; mov rdi, rdx ; mov rbp, rsp ; push r14 ; mov r14, rcx ; or rcx, 0xffffffffffffffff ; push r13 ; mov r13, rdx ; mov rdx, rsi ; push r12 ; push rbx ; sub rsp, 0x90 ; repne scasb al, byte ptr [rdi]
read: al eax r12 r13 r14 rbp rbx rcx rdi rdx rflags rsi rsp 
write: eax r13 r14 r9 rbp rcx rdi rdx rflags rsp 
0001ff68: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdx ; push r14 ; mov r14, rsi ; push r13 ; lea r13, [r14 + 4] ; push r12 ; push rbx ; mov ebx, edi ; sub rsp, 0x68 ; mov dword ptr [rbp - 0x6c], edi ; mov rdi, rsi ; mov dword ptr [rbp - 0x44], r8d
write: ebx r13 r14 r15 rbp rdi rflags rsp 
00020bf2: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; mov edi, 0x3000 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xb8 ; mov qword ptr [rbp - 0xb0], rsi ; call 0xeff6c
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
00021cc0: CLP; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x90 ; mov rax, qword ptr [rip + 0x34725b] ; mov qword ptr [rsp + 0x18], rdi ; mov dword ptr [rsp + 0x14], esi ; mov qword ptr [rsp + 8], rdx ; test rax, rax ; je 0x21dcc
read: esi r12 r13 r14 rax rbp rbx rcx rdi rdx rflags rsp 
000221c0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
000225e0: CLP; cmp rdi, -1 ; je 0x22602
read: rdi rflags 
00022620: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x68 ; mov qword ptr [rbp - 0x58], rsi ; mov esi, 0x2f ; mov qword ptr [rbp - 0x60], rdi ; mov qword ptr [rbp - 0x88], rdx ; mov dword ptr [rbp - 0x68], ecx ; call 0x83a5c
read: ecx r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
00022e40: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; cmp rdi, -1 ; mov qword ptr [rsp + 0x20], rcx ; je 0x22fac
read: r12 r13 r14 r15 rbp rbx rcx rdi rflags rsp 
000230b0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; lea r12, [rdi + 0x48] ; push rbp ; push rbx ; sub rsp, 8 ; mov r14, qword ptr [rdi + 8] ; mov r15, qword ptr [rdi] ; mov rbx, qword ptr [r12 - 8] ; test rbx, rbx ; jne 0x230df
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00023170: CLP; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; call 0x83c8c
write: rdi rflags rsi rsp 
00023190: CLP; sub rsp, 0x18 ; lea rdx, [rip - 0x2f] ; lea rsi, [rip + 0x34b1ba] ; mov qword ptr [rsp], rdi ; mov rdi, rsp ; call 0xe152c
read: rdi rip rsp 
write: rdi rdx rflags rsi rsp 
000231e0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; call 0x83c8c
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rflags rsi rsp 
00023240: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0x2329c
read: rbp rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
000232d0: CLP; push rbp ; mov rax, rsi ; mov rbp, rsp ; push r15 ; mov r15, r8 ; push r14 ; push r13 ; push r12 ; mov r12, r9 ; push rbx ; mov rbx, rcx ; sub rsp, 0x88 ; test rsi, rsi ; mov qword ptr [rbp - 0x80], rdi ; cmove rax, rdi
read: r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdi rflags rsi rsp 
00023dd0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov edi, dword ptr [rip + 0x34a98a] ; test edi, edi ; jne 0x23e5c
read: edi rbp rbx rdi rflags rsi rsp 
00023eb0: CLP; push r15 ; push r14 ; mov r14d, r8d ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov r9d, dword ptr [rip + 0x34a898] ; test r9d, r9d ; jne 0x24054
read: r12 r13 r14 r15 r8d r9d rbp rbx rcx rdi rdx rflags rsi rsp 
000241b0: CLP; push r13 ; xor eax, eax ; mov r13, rdi ; push r12 ; mov r12, rsi ; mov esi, 1 ; push rbp ; push rbx ; sub rsp, 8 ; cmp dword ptr [rip + 0x34a5a2], 0 ; je 0x241dc
read: eax r12 r13 rbp rbx rdi rflags rsi rsp 
00024290: CLP; push r14 ; mov r14d, esi ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; lea rbp, [rip + 0x34a0c8] ; push rbx ; jmp 0x242d1
read: esi r12 r13 r14 rbp rbx rdi rsp 
00024390: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rip + 0x349fcc] ; test rbx, rbx ; je 0x243c3
read: rbp rbx rdi rflags rsp 
000243f0: CLP; push rbp ; mov r9, rdx ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x48 ; movzx eax, byte ptr [rdi] ; mov rdx, qword ptr [rip + 0x343730] ; movsx rsi, al ; test byte ptr [rdx + rsi*2 + 1], 0x20
read: al r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
00024750: CLP; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rdx ; sub rbp, rdi ; push rbx ; lea rdi, [rbp + 0x10] ; sub rsp, 8 ; call 0x1f3cc
read: r12 r13 rbp rbx rdi rdx rip rsi rsp 
write: r12 r13 rbp rdi rflags rsp 
00025060: CLP; push r14 ; lea r14, [rip + 0x341ad3] ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; xor ebp, ebp ; push rbx ; mov rbx, r14 ; nop ; mov rsi, qword ptr [rbx] ; mov rdi, r12 ; call 0x83c8c
read: ebp r12 r13 r14 rbp rbx rdi rip rsi rsp 
write: ebp r12 r13 r14 rbx rdi rflags rsi rsp 
00025150: CLP; push r15 ; lea rax, [rdi + 0x68] ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x78 ; test byte ptr [rsi + 0x10], 1 ; mov qword ptr [rsp + 0x40], rax ; lea rax, [rsi + 0x38] ; mov qword ptr [rsp + 0x20], rcx ; mov qword ptr [rsp + 0x30], r8
00025590: CLP; push r15 ; lea rax, [rdi + 0x68] ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; push rbx ; sub rsp, 0x78 ; mov qword ptr [rsp + 0x28], r8 ; mov r8d, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x40], rax ; lea rax, [rsi + 0x38] ; mov qword ptr [rsp + 0x18], rcx
00025ac0: CLP; push r15 ; lea rax, [rdi + 0x68] ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x78 ; test byte ptr [rsi + 0x10], 1 ; mov qword ptr [rsp + 0x40], rax ; lea rax, [rsi + 0x38] ; mov qword ptr [rsp + 0x30], rcx ; mov qword ptr [rsp + 0x28], r8
00025ef0: CLP; push r15 ; lea rax, [rdi + 0x68] ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; push rbx ; sub rsp, 0x78 ; mov qword ptr [rsp + 0x10], rcx ; mov ecx, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x40], rax ; lea rax, [rsi + 0x38] ; mov qword ptr [rsp + 0x28], r8
00026440: CLP; push r15 ; mov rax, rsi ; push r14 ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; sub rsp, 0x78 ; mov edx, dword ptr [rax + 0x10] ; mov qword ptr [rsp + 0x10], rsi ; lea rsi, [rdi + 0x68] ; mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x38], r9
00026800: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0xa8 ; mov r11d, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x70], rdi ; add rdi, 0x68 ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x58], rdi ; lea rdi, [rsi + 0x38]
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: r11d r14 rbx rdi rflags rsp 
00027190: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0xb8 ; mov r15d, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x68], rdi ; add rdi, 0x68 ; mov qword ptr [rsp + 0x10], rsi ; mov qword ptr [rsp + 0x48], rdi ; lea rdi, [rsi + 0x38]
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: r14 r15d rbx rdi rflags rsp 
00027ea0: CLP; push r15 ; mov rax, rsi ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x98 ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x38], r8 ; lea rsi, [rdi + 0x68] ; mov r8d, dword ptr [rax + 0x10] ; mov qword ptr [rsp + 0x48], r9
00028c70: CLP; push r15 ; mov rax, rsi ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x88 ; mov qword ptr [rsp + 0x10], rsi ; lea rsi, [rdi + 0x68] ; mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x38], r9 ; mov ebx, dword ptr [rsp + 0xc0]
000292b0: CLP; push r15 ; mov rax, rdi ; mov r15, rsi ; add rax, 0x68 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0xa8 ; mov r11d, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x58], rax ; lea rax, [rsi + 0x38]
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rdx rsi rsp 
00029c80: CLP; push r15 ; mov rax, rsi ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x88 ; mov qword ptr [rsp + 0x10], rsi ; lea rsi, [rdi + 0x68] ; mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x38], r9 ; mov ebx, dword ptr [rsp + 0xc0]
0002a2d0: CLP; push r15 ; mov rax, rdi ; mov r15, rsi ; add rax, 0x68 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0xa8 ; mov r11d, dword ptr [rsi + 0x10] ; mov qword ptr [rsp + 0x58], rax ; lea rax, [rsi + 0x38]
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rdx rsi rsp 
0002aca0: CLP; push r15 ; mov rax, rdi ; push r14 ; push r13 ; push r12 ; mov r12, r9 ; push rbp ; push rbx ; sub rsp, 0xa8 ; cmp qword ptr [rax], 0 ; mov r15, qword ptr [rax + 0x28] ; mov qword ptr [rsp + 0x18], rdi ; mov rdi, qword ptr [r8] ; mov qword ptr [rsp + 0x20], rsi ; mov qword ptr [rsp + 0x60], r8
read: r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi rsp 
write: r12 r15 rax rdi rflags rsp 
0002b150: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov rbp, qword ptr [rip + 0x33f7b7] ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x10], rdi ; movzx r14d, word ptr [rbp + 4] ; movzx ebx, word ptr [rbp + 6] ; lea rax, [rbp + r14] ; add rbx, rbp ; mov qword ptr [rsp + 8], rax
read: r12 r13 r14 r15 rax rbp rbx rdi rsi rsp 
0002b240: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; mov r12, rsi ; push rbx ; mov rbx, rdx ; sub rsp, 8 ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
0002b370: CLP; push r12 ; lea rdi, [rip + 0x109398] ; push rbp ; push rbx ; sub rsp, 0x90 ; call 0x3819c
write: rdi rflags rsp 
0002baf0: CLP; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; call 0x83c8c
write: rdi rflags rsi rsp 
0002bb10: CLP; cmp esi, 3 ; push rbx ; mov rbx, qword ptr [rdi] ; jne 0x2bb5c
0002bba0: CLP; sub rsp, 8 ; mov qword ptr [rip + 0x33ed79], rdi ; mov rdi, qword ptr [rip + 0x33ed7a] ; lea rsi, [rip - 0xad] ; call 0xe1a1c
read: rdi rip rsp 
write: rdi rflags rsi rsp 
0002bbd0: CLP; push r13 ; lea rdx, [rip - 0xed] ; lea rsi, [rip + 0x33ed4c] ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov qword ptr [rsp + 8], rdi ; lea rdi, [rsp + 8] ; call 0xe152c
read: r12 r13 rbp rbx rdi rip rsp 
write: rdi rdx rflags rsi rsp 
0002c7b0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, edx ; push rbx ; mov rbx, rcx ; sub rsp, 0x78 ; mov r14, qword ptr [rcx] ; mov qword ptr [rbp - 0x68], rsi ; cmp byte ptr [r14], 0 ; je 0x2c8cc
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0002d1b0: CLP; push rbp ; xor eax, eax ; mov rbp, rsp ; push r15 ; push r14 ; mov r14d, esi ; mov esi, 0x80000 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0xb8 ; mov dword ptr [rdi + 8], 1 ; mov qword ptr [rdi + 0x10], 0 ; mov rdi, qword ptr [rdi]
read: eax esi r12 r13 r14 r15 rbp rbx rdi rsp 
write: eax esi r14d rbp rbx rdi rflags rsp 
0002d4b0: CLP; push rbx ; mov rax, qword ptr [rdi + 0x20] ; mov rbx, rdi ; test rax, rax ; je 0x2d4c3
read: rax rbx rdi rflags rsp 
0002e420: CLP; push r15 ; lea rax, [rip + 0x3396b3] ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; cmp rdi, rax ; je 0x2e5d9
read: r12 r13 r14 r15 rax rbp rbx rdi rflags rsp 
0002e5f0: CLP; push r12 ; lea rax, [rip + 0x3394e3] ; mov r12, rdi ; push rbp ; cmp rdi, rax ; push rbx ; je 0x2e658
read: r12 rax rbp rbx rdi rflags rsp 
0002e6c0: CLP; mov rax, qword ptr [rip + 0x33a6f5] ; test rdi, rdi ; lea rcx, [rip + 0x33b84b] ; mov rdx, qword ptr fs:[rax] ; je 0x2e710
read: rdi rflags 
0002e730: CLP; mov rax, qword ptr [rip + 0x33b7e5] ; mov rdi, qword ptr [rax + 0x40] ; lea rsi, [rdi + 0x100] ; mov qword ptr [rip + 0x33b83b], rsi ; mov rdi, qword ptr [rax + 0x58] ; lea rdx, [rdi + 0x200] ; lea rdi, [rip + 0x33b7c1] ; mov qword ptr [rip + 0x33b82a], rdx ; mov rcx, qword ptr [rax + 0x48] ; mov rax, qword ptr [rip + 0x33a64f] ; add rcx, 0x200 ; mov rax, qword ptr fs:[rax] ; mov qword ptr [rip + 0x33b815], rcx ; cmp rax, rdi ; je 0x2e7fc
read: rax rcx rdi rdx rflags rsi 
write: rax rcx rdi rdx rflags rsi 
0002e830: CLP; mov rax, qword ptr [rip + 0x33a585] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax + rdi*8 + 0x80] ; ret
write: rax rdi 
0002e850: CLP; mov ecx, dword ptr [rdi] ; mov edx, esi ; xor eax, eax ; shr edx, cl ; cmp edx, dword ptr [rdi + 4] ; jae 0x2e88b
0002e8a0: CLP; mov ecx, dword ptr [rdi] ; mov edx, esi ; mov eax, 0xffffffff ; shr edx, cl ; cmp edx, dword ptr [rdi + 4] ; jb 0x2e8bc
0002e8f0: CLP; push r12 ; mov r9d, ecx ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x50 ; mov eax, dword ptr [rip + 0x33fe65] ; test eax, eax ; jne 0x2ea32
read: eax ecx r12 rbp rbx rdi rflags rsi rsp 
0002eab0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12d, edx ; mov edx, 5 ; push rbp ; mov rbp, rsi ; lea rsi, [rip + 0x10954a] ; push rbx ; mov rbx, rdi ; lea rdi, [rip + 0x105ed8] ; sub rsp, 8 ; call 0x2f4bc
read: edx r12 r13 rbp rbx rcx rdi rip rsi rsp 
write: edx r12d r13 rbp rbx rdi rflags rsi rsp 
0002eb70: CLP; mov rax, qword ptr [rip + 0x33a285] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and eax, 8 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002eb90: CLP; mov rax, qword ptr [rip + 0x33a265] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x400 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ebb0: CLP; mov rax, qword ptr [rip + 0x33a245] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and eax, 2 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002ebd0: CLP; mov rax, qword ptr [rip + 0x33a225] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x800 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ebf0: CLP; mov rax, qword ptr [rip + 0x33a205] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x200 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ec10: CLP; mov rax, qword ptr [rip + 0x33a1e5] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x8000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ec30: CLP; mov rax, qword ptr [rip + 0x33a1c5] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x4000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ec50: CLP; mov rax, qword ptr [rip + 0x33a1a5] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and eax, 4 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002ec70: CLP; mov rax, qword ptr [rip + 0x33a185] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x2000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ec90: CLP; mov rax, qword ptr [rip + 0x33a165] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x100 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ecb0: CLP; mov rax, qword ptr [rip + 0x33a145] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x1000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ecd0: CLP; lea edx, [rdi + 0x80] ; movsxd rax, edi ; cmp edx, 0x17f ; ja 0x2ecfa
0002ed00: CLP; lea edx, [rdi + 0x80] ; movsxd rax, edi ; cmp edx, 0x17f ; ja 0x2ed2a
0002ed30: CLP; mov rax, qword ptr [rip + 0x33a0c5] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; movzx eax, word ptr [rax + rdi*2] ; and eax, 1 ; ret
write: eax rax rdi rflags 
0002ed50: CLP; mov rax, qword ptr [rip + 0x33a065] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax] ; mov rax, qword ptr [rax + 0x58] ; mov eax, dword ptr [rax + rdi*4 + 0x200] ; ret
write: eax rax rdi 
0002ed80: CLP; mov rax, qword ptr [rip + 0x33a035] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax] ; mov rax, qword ptr [rax + 0x48] ; mov eax, dword ptr [rax + rdi*4 + 0x200] ; ret
write: eax rax rdi 
0002edd0: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and eax, 1 ; ret
write: eax rax rdi rflags 
0002edf0: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and eax, 8 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002ee10: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x400 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ee30: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and eax, 2 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002ee50: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x800 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ee70: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x200 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ee90: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x8000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002eeb0: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x4000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002eed0: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and eax, 4 ; movzx eax, ax ; ret
write: eax rax rdi rflags 
0002eef0: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x2000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ef10: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x100 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ef30: CLP; mov rax, qword ptr [rsi + 0x68] ; movsxd rdi, edi ; movzx eax, word ptr [rax + rdi*2] ; and ax, 0x1000 ; movzx eax, ax ; ret
write: ax eax rax rdi rflags 
0002ef50: CLP; mov rax, qword ptr [rsi + 0x70] ; movsxd rdi, edi ; mov eax, dword ptr [rax + rdi*4] ; ret
write: eax rax rdi 
0002ef60: CLP; mov rax, qword ptr [rsi + 0x78] ; movsxd rdi, edi ; mov eax, dword ptr [rax + rdi*4] ; ret
write: eax rax rdi 
0002ef70: CLP; mov rax, qword ptr [rip + 0x339e45] ; movsxd rdi, edi ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax] ; mov rax, qword ptr [rax + 0x40] ; movzx eax, word ptr [rax + rdi*2 + 0x100] ; and eax, esi ; ret
write: eax rax rdi rflags 
0002f000: CLP; mov rax, qword ptr [rip + 0x339db5] ; mov rdx, qword ptr [rip + 0x339dee] ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax] ; mov rsi, qword ptr [rax + 0x40] ; mov rdi, qword ptr [rax + 0x48] ; lea rcx, [rsi + 0x100] ; mov qword ptr fs:[rdx], rcx ; mov rdx, qword ptr [rip + 0x339ea5] ; lea rcx, [rdi + 0x200] ; mov qword ptr fs:[rdx], rcx ; mov rdx, qword ptr [rax + 0x58] ; mov rax, qword ptr [rip + 0x339ed7] ; add rdx, 0x200 ; mov qword ptr fs:[rax], rdx
write: rax rcx rdi rdx rflags rsi 
0002f060: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov edx, dword ptr [rip + 0x33f6ef] ; test edx, edx ; jne 0x2f2fc
read: edx r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
0002f440: CLP; sub rsp, 0x18 ; xor eax, eax ; test rdi, rdi ; mov qword ptr [rsp + 8], rsi ; je 0x2f455
read: eax rdi rflags rsi rsp 
0002f480: CLP; sub rsp, 0x18 ; xor eax, eax ; test rdi, rdi ; mov qword ptr [rsp + 8], rsi ; je 0x2f495
read: eax rdi rflags rsi rsp 
0002f500: CLP; sub rsp, 8 ; mov rsi, rdi ; mov edx, 5 ; xor edi, edi ; call 0x2f4bc
read: edi rdi rip rsp 
0002f520: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x2f61c
read: eax r12 r13 rbp rbx rdi rflags rsi rsp 
0002f750: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; cmp qword ptr [rsi + 0x20], 0 ; je 0x2f7cc
read: rbp rbx rdi rflags rsi rsp 
0002f7e0: CLP; push r13 ; mov r13, rdi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rcx ; push rbx ; xor ebx, ebx ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xb8] ; call 0x2f51c
read: ebx r12 r13 rbp rbx rcx rdi rdx rip rsp 
write: ebx r12 r13 rbp rdi rflags rsp 
0002f870: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x78 ; mov r10d, dword ptr [rdi + 8] ; mov qword ptr [rbp - 0x90], rdi ; mov qword ptr [rbp - 0xa0], rsi ; mov qword ptr [rbp - 0x60], rdx ; mov dword ptr [rbp - 0x88], ecx ; mov qword ptr [rbp - 0x98], r8 ; test r10d, r10d
read: ecx r10d r12 r13 r14 r15 r8 rbp rbx rdi rdx rsi rsp 
00030520: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xc8 ; test rsi, rsi ; mov qword ptr [rbp - 0xa8], rdi ; mov qword ptr [rbp - 0x88], rsi ; mov qword ptr [rbp - 0xc0], rdx ; mov dword ptr [rbp - 0xb0], ecx ; mov qword ptr [rbp - 0xb8], r8 ; mov dword ptr [rbp - 0xac], r9d
read: ecx r12 r13 r14 r15 r8 r9d rbp rbx rdi rdx rsi rsp 
00030f60: CLP; sub rsp, 8 ; mov rcx, rdx ; mov r8d, 5 ; mov rdx, rsi ; mov rsi, rdi ; xor edi, edi ; call 0x30f0c
read: edi rdi rdx rip rsi rsp 
00030f90: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdx ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbx ; sub rsp, 0x68 ; mov r11d, dword ptr [rip + 0x33d7b8] ; test r11d, r11d ; jne 0x31054
read: r11d r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000312f0: CLP; push rbp ; mov rdx, qword ptr fs:[0x10] ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x138 ; cmp rdx, qword ptr [rip + 0x3398ad] ; mov qword ptr [rbp - 0xd8], rsi ; je 0x3136a
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000329a0: CLP; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; lea rdx, [rip + 0x33512b] ; call 0x89afc
write: rdi rdx rflags rsi rsp 
000329d0: CLP; push rbp ; movsxd rdx, esi ; mov rsi, rdi ; lea rax, [rdx + 0x2c] ; mov rbp, rsp ; push r15 ; and rax, 0xfffffffffffffff0 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x1e8 ; sub rsp, rax ; lea rbx, [rsp + 0xf] ; and rbx, 0xfffffffffffffff0
read: esi r12 r13 r14 r15 rax rbp rbx rdi rsp 
00032ea0: CLP; push r15 ; mov esi, 1 ; xor eax, eax ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov qword ptr [rsp + 8], rdi ; cmp dword ptr [rip + 0x33b8af], 0 ; je 0x32ecf
read: eax r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00033070: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test rdi, rdi ; je 0x331b4
read: rbp rbx rdi rflags rsp 
000331d0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, ecx ; push rbp ; push rbx ; xor ebx, ebx ; sub rsp, 0x78 ; mov qword ptr [rsp + 0x30], rdi ; mov rdi, r8 ; mov qword ptr [rsp + 0x50], rsi ; mov qword ptr [rsp + 0x48], rdx ; mov qword ptr [rsp + 0x38], r8 ; mov qword ptr [rsp + 0x40], r9
read: ebx ecx r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp 
write: ebx r12d rdi rflags rsp 
00033690: CLP; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x10 ; test rsi, rsi ; je 0x337aa
read: r12 rbp rbx rdi rflags rsi rsp 
000337c0: CLP; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x20 ; mov qword ptr [rdx], 0 ; mov qword ptr [rcx], 0 ; mov qword ptr [r8], 0 ; mov qword ptr [r9], 0 ; mov qword ptr [rsi], rdi ; movzx eax, byte ptr [rdi] ; test al, 0xbf ; je 0x339e4
read: al r12 r13 r14 rbp rbx rdi rflags rsp 
00033a80: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0x33aa6
read: rbx rdi rflags rsp 
00033c10: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; xor ebp, ebp ; push rbx ; mov ebx, 0xc8 ; mov r15, rbx ; sub rsp, 0x838 ; lea rax, [rsp + 0x60] ; lea r12, [rsp + 0x1f0] ; mov qword ptr [rsp + 0x30], rdi ; mov dword ptr [rsp + 0x1c], 0 ; mov dword ptr [rsp + 0x18], 0xfffffffe
read: ebp r12 r13 r14 r15 rbp rbx rdi rsp 
00034400: CLP; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; test rdi, rdi ; je 0x34484
read: r12 r13 rbp rbx rdi rdx rflags rsi rsp 
00034500: CLP; xor eax, eax ; nop word ptr cs:[rax + rax] ; movzx edx, byte ptr [rdi] ; test dl, dl ; je 0x3453a
00034540: CLP; push rbp ; mov rbp, rsp ; push r14 ; xor r14d, r14d ; push r13 ; xor r13d, r13d ; push r12 ; mov r12, rdi ; push rbx ; mov ebx, esi ; mov esi, 0x2f ; call 0x83a5c
read: esi r12 r13 r13d r14 r14d rbp rbx rdi rip rsp 
000347b0: CLP; cmp rdi, -1 ; je 0x3482c
read: rdi rflags 
00034840: CLP; cmp rdi, -1 ; push rbx ; mov rbx, rdi ; je 0x34894
read: rbx rdi rflags rsp 
000348b0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rsi ; mov esi, 0x2f ; push r12 ; push rbx ; sub rsp, 0xc8 ; mov qword ptr [rbp - 0xd0], rdi ; mov qword ptr [rbp - 0xc8], rdx ; mov qword ptr [rbp - 0xe8], rcx ; call 0x83a5c
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
000357c0: CLP; movd eax, xmm0 ; mov edx, eax ; mov dword ptr [rdi], 0 ; and edx, 0x7fffffff ; je 0x35816
00035ac0: CLP; fld xword ptr [rsp + 8] ; mov dword ptr [rdi], 0 ; fld st(0) ; fstp xword ptr [rsp - 0x18] ; movsx edx, word ptr [rsp - 0x10] ; mov ecx, dword ptr [rsp - 0x14] ; mov esi, dword ptr [rsp - 0x18] ; mov eax, edx ; and eax, 0x7fff ; cmp eax, 0x7fff ; je 0x35b3e
00035c40: CLP; mov qword ptr [rdi], rbx ; mov rax, rbp ; xor rax, qword ptr fs:[0x30] ; rol rax, 0x11 ; mov qword ptr [rdi + 8], rax ; mov qword ptr [rdi + 0x10], r12 ; mov qword ptr [rdi + 0x18], r13 ; mov qword ptr [rdi + 0x20], r14 ; mov qword ptr [rdi + 0x28], r15 ; lea rdx, [rsp + 8] ; xor rdx, qword ptr fs:[0x30] ; rol rdx, 0x11 ; mov qword ptr [rdi + 0x30], rdx ; mov rax, qword ptr [rsp] ; xor rax, qword ptr fs:[0x30]
00035ca0: CLP; xor eax, eax ; test esi, esi ; push rbx ; mov rbx, rdi ; je 0x35cc3
read: eax esi rbx rdi rflags rsp 
00035cf0: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x35d9c
read: esi rbp rbx rdi rip rsp 
00035d40: CLP; mov r8, qword ptr [rdi + 0x30] ; mov r9, qword ptr [rdi + 8] ; mov rdx, qword ptr [rdi + 0x38] ; ror r8, 0x11 ; xor r8, qword ptr fs:[0x30] ; ror r9, 0x11 ; xor r9, qword ptr fs:[0x30] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; mov rbx, qword ptr [rdi] ; mov r12, qword ptr [rdi + 0x10] ; mov r13, qword ptr [rdi + 0x18] ; mov r14, qword ptr [rdi + 0x20] ; mov r15, qword ptr [rdi + 0x28] ; mov eax, esi
00035de0: CLP; lea edx, [rdi - 1] ; mov r8d, edi ; cmp edx, 0x3f ; ja 0x35e6c
00036180: CLP; lea eax, [rdi - 0x20] ; cmp eax, 1 ; jbe 0x3619a
000361b0: CLP; mov r10d, 8 ; movsxd rdi, edi ; mov eax, 0xe ; syscall ; cmp rax, -0x1000 ; ja 0x361ca
write: eax r10d rdi rflags 
00036300: CLP; push rbx ; mov rbx, rsi ; sub rsp, 8 ; test rdi, rdi ; je 0x3636c
read: rbx rdi rflags rsi rsp 
00036710: CLP; push rbx ; mov rbx, rsi ; xor esi, esi ; sub rsp, 0x40 ; test rbx, rbx ; lea rdx, [rsp + 0x20] ; cmovne rsi, rdx ; test rdi, rdi ; je 0x3677c
read: esi rbx rdi rdx rflags rsi rsp 
00036880: CLP; lea ecx, [rsi - 1] ; mov edx, 1 ; movsxd rax, ecx ; shl rdx, cl ; shr rax, 6 ; test qword ptr [rdi + rax*8], rdx ; setne al ; movzx eax, al ; ret
000368b0: CLP; lea ecx, [rsi - 1] ; mov edx, 1 ; movsxd rax, ecx ; shl rdx, cl ; shr rax, 6 ; or qword ptr [rdi + rax*8], rdx ; xor eax, eax ; ret
000368d0: CLP; lea ecx, [rsi - 1] ; mov eax, 1 ; movsxd rdx, ecx ; shl rax, cl ; shr rdx, 6 ; not rax ; and qword ptr [rdi + rdx*8], rax ; xor eax, eax ; ret
000368f0: CLP; test rdi, rdi ; je 0x369a4
read: rdi rflags 
000369c0: CLP; test rdi, rdi ; je 0x36a54
read: rdi rflags 
00036b70: CLP; lea eax, [rdi - 1] ; mov r8d, edi ; cmp eax, 0x3f ; ja 0x36bdc
00036c00: CLP; test rdi, rdi ; je 0x36c2f
read: rdi rflags 
00036c50: CLP; test rdi, rdi ; je 0x36c80
read: rdi rflags 
00036ca0: CLP; test rdi, rdi ; je 0x36cd0
read: rdi rflags 
00036d60: CLP; sub rsp, 0x10 ; test rdi, rdi ; mov r8, rsi ; je 0x36dc4
read: rdi rflags rsi rsp 
00036e70: CLP; sub rsp, 0x10 ; test rdi, rdi ; mov r8, rsi ; je 0x36ed4
read: rdi rflags rsi rsp 
00036f70: CLP; push r13 ; xor eax, eax ; mov ecx, 0x10 ; mov r13, rdx ; push r12 ; mov r12d, edi ; push rbp ; mov ebp, esi ; push rbx ; sub rsp, 0x88 ; mov rdi, rsp ; rep stosq qword ptr [rdi], rax ; mov dword ptr [rsp], esi ; mov dword ptr [rsp + 8], 0xffffffff ; call 0xb3d6c
read: eax edi esi r12 r13 rax rbp rbx rcx rdi rdx rflags rip rsp 
write: eax ebp ecx r12d r13 rcx rdi rflags rsp 
000370c0: CLP; sub rsp, 0xa8 ; mov r8d, edi ; xor eax, eax ; lea rdx, [rsp + 8] ; mov ecx, 0x10 ; mov rsi, rsp ; mov qword ptr [rsp], 1 ; mov dword ptr [rsp + 0x88], 0 ; mov rdi, rdx ; xor edx, edx ; rep stosq qword ptr [rdi], rax ; mov edi, r8d ; call 0x3617c
read: eax edi edx r8d rax rcx rdi rdx rflags rip rsp 
write: eax ecx edi edx r8d rcx rdi rdx rflags rsi rsp 
000375a0: CLP; push r15 ; xor r15d, r15d ; push r14 ; mov r14, rdx ; push r13 ; mov r13, rcx ; push r12 ; mov r12, r8 ; push rbp ; push rbx ; sub rsp, 0x18 ; test rdx, rdx ; mov qword ptr [rsp], rdi ; mov qword ptr [rsp + 8], rsi ; jne 0x375d7
read: r12 r13 r14 r15 r15d r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00037640: CLP; push r15 ; mov rax, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x448 ; test rsi, rsi ; mov qword ptr [rsp + 0x30], rdi ; mov qword ptr [rsp], rdx ; je 0x37814
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00037ad0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdx ; shr rbp, 1 ; push rbx ; mov r8, rbp ; mov rbx, rdx ; sub rbx, rbp ; sub rsp, 0x38 ; imul r8, qword ptr [rdi] ; cmp rbp, 1 ; mov qword ptr [rsp + 0x18], rdi
read: r12 r13 r14 r15 r8 rbp rbx rdi rdx rsp 
00037e20: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rcx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbx ; mov rbx, rdx ; sub rsp, 0x68 ; cmp rdx, 0x20 ; mov qword ptr [rbp - 0x80], rsi ; ja 0x38014
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000381a0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
00038290: CLP; push rbp ; mov esi, 0x3d ; mov rbp, rsp ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; call 0x83a5c
read: r12 rbp rbx rdi rip rsp 
00038390: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; mov qword ptr [rbp - 0x50], rsi ; mov qword ptr [rbp - 0x38], rdx ; mov dword ptr [rbp - 0x3c], ecx ; call 0x856dc
read: ecx r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
00038700: CLP; push r12 ; test rdi, rdi ; push rbp ; push rbx ; mov rbx, rdi ; je 0x3874c
read: r12 rbp rbx rdi rflags rsp 
00038770: CLP; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 8 ; test rdi, rdi ; je 0x388ac
read: r12 r13 rbp rbx rdi rflags rsp 
00038b10: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; lea rdi, [rip + 0x330a85] ; sub rsp, 8 ; call 0x38b6c
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rflags rsp 
00038b70: CLP; push rbp ; mov esi, 1 ; xor eax, eax ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp dword ptr [rip + 0x335be9], 0 ; je 0x38b95
read: eax rbp rbx rdi rflags rsp 
00038d10: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; mov rdi, rcx ; call 0x38b6c
read: r12 rbp rbx rcx rdi rdx rip rsi rsp 
write: r12 rbp rbx rdi rsp 
00038d70: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; lea rdi, [rip + 0x330820] ; call 0x38b6c
read: r12 rbp rbx rdi rdx rip rsi rsp 
write: r12 rbp rbx rdi rsp 
00038dd0: CLP; push r15 ; push r14 ; push r13 ; xor r13d, r13d ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov r14, qword ptr [rip + 0x3307b9] ; test r14, r14 ; je 0x38e98
read: r12 r13 r13d r14 r15 rbp rbx rdi rflags rsp 
00038f70: CLP; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; mov edi, 1 ; push rbp ; mov rbp, rsi ; mov esi, 0x20 ; push rbx ; sub rsp, 8 ; call 0x1f44c
read: r12 r13 rbp rbx rdi rdx rip rsi rsp 
000390a0: CLP; push r12 ; push rbp ; push rbx ; lea rdi, [rip + 0x32fce1] ; call 0x1f3ec
write: rdi rsp 
000391a0: CLP; mov rdx, rdi ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
read: rax rdi rdx 
000391c0: CLP; mov rdx, rdi ; mov rax, rdi ; sar rdx, 0x3f ; xor rax, rdx ; sub rax, rdx ; ret
read: rax rdi rdx 
00039200: CLP; mov rax, rdi ; cqo ; idiv rsi ; ret
read: rax rdi rdx rsi 
00039210: CLP; mov rax, rdi ; cqo ; idiv rsi ; ret
read: rax rdi rdx rsi 
00039220: CLP; test rdi, rdi ; push rbx ; je 0x3926c
read: rbx rdi rflags rsp 
000393d0: CLP; test rdi, rdi ; push rbx ; je 0x393ec
read: rbx rdi rflags rsp 
000395b0: CLP; push rbx ; mov rdx, rdi ; mov esi, 1 ; xor eax, eax ; cmp dword ptr [rip + 0x3351ae], 0 ; je 0x395d0
read: eax rbx rdi rflags rsp 
00039720: CLP; test rdi, rdi ; lea rcx, [rdi + 4] ; je 0x397f4
read: rdi rflags 
00039810: CLP; test rdi, rdi ; je 0x39894
read: rdi rflags 
00039b20: CLP; mov eax, dword ptr [rdi] ; imul ecx, eax, 0x41c64e6d ; add ecx, 0x3039 ; mov eax, ecx ; imul ecx, ecx, 0x41c64e6d ; shr eax, 6 ; and eax, 0x1ffc00 ; add ecx, 0x3039 ; mov edx, ecx ; imul ecx, ecx, 0x41c64e6d ; shr edx, 0x10 ; and edx, 0x3ff ; xor eax, edx ; add ecx, 0x3039 ; shl eax, 0xa
00039b80: CLP; sub rsp, 0x18 ; lea rsi, [rip + 0x334921] ; lea rdx, [rsp + 8] ; mov rdi, rsi ; call 0x39d2c
write: rdi rdx rflags rsi rsp 
00039be0: CLP; sub rsp, 0x18 ; lea rsi, [rip + 0x3348c1] ; lea rdx, [rsp + 8] ; mov rdi, rsi ; call 0x39dec
write: rdi rdx rflags rsi rsp 
00039c40: CLP; sub rsp, 0x18 ; lea rsi, [rip + 0x334861] ; lea rdx, [rsp + 8] ; mov rdi, rsi ; call 0x39e6c
write: rdi rdx rflags rsi rsp 
00039d10: CLP; sub rsp, 8 ; mov rdx, rsi ; mov rsi, rdi ; call 0x39d2c
read: rdi rip rsi rsp 
00039d30: CLP; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; call 0x39f9c
read: rbp rbx rdi rdx rip rsp 
00039dc0: CLP; test rdi, rdi ; je 0x39de4
read: rdi rflags 
00039df0: CLP; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x39f9c
read: rbp rbx rdi rdx rip rsp 
00039e40: CLP; test rdi, rdi ; je 0x39e64
read: rdi rflags 
00039e70: CLP; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x39f9c
read: rbp rbx rdi rdx rip rsp 
00039ec0: CLP; mov edi, edi ; mov edx, 0xb ; mov ecx, 1 ; mov rax, rdi ; mov word ptr [rsi + 2], di ; mov word ptr [rsi + 0xc], dx ; sar rax, 0x10 ; mov word ptr [rsi + 0xe], cx ; mov word ptr [rsi + 4], ax ; mov eax, 0x330e ; mov word ptr [rsi], ax ; movabs rax, 0x5deece66d ; mov qword ptr [rsi + 0x10], rax ; xor eax, eax ; ret
read: ax cx di dx eax edi rax rdi 
00039f00: CLP; mov eax, dword ptr [rsi] ; mov edx, 1 ; mov dword ptr [rsi + 6], eax ; movzx eax, word ptr [rsi + 4] ; mov word ptr [rsi + 0xa], ax ; movzx eax, word ptr [rdi + 4] ; mov word ptr [rsi + 4], ax ; movzx eax, word ptr [rdi + 2] ; mov word ptr [rsi + 2], ax ; movzx eax, word ptr [rdi] ; mov word ptr [rsi + 0xe], dx ; mov word ptr [rsi], ax ; movabs rax, 0x5deece66d ; mov qword ptr [rsi + 0x10], rax ; mov eax, 0xb
00039f50: CLP; mov eax, dword ptr [rdi] ; mov dword ptr [rsi], eax ; movzx eax, word ptr [rdi + 4] ; mov word ptr [rsi + 4], ax ; movzx eax, word ptr [rdi + 0xa] ; movzx edx, word ptr [rdi + 6] ; shl rax, 0x20 ; or rax, rdx ; movzx edx, word ptr [rdi + 8] ; shl edx, 0x10 ; or rax, rdx ; mov qword ptr [rsi + 0x10], rax ; movzx eax, word ptr [rdi + 0xc] ; mov word ptr [rsi + 0xc], ax ; mov eax, 1
0003a0d0: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; test ecx, ecx ; mov rax, qword ptr [r8 + 8] ; jne 0x3a4de
read: ecx r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
0003a5b0: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; test ecx, ecx ; mov rax, qword ptr [r8 + 8] ; jne 0x3a94e
read: ecx r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
0003abb0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x1c] ; movzx eax, word ptr [rsp + 0x1c] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
0003b2b0: CLP; push r15 ; mov r15, rcx ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x118 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 0x10], rsi ; jne 0x3d0ac
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0003d450: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x18] ; movzx eax, word ptr [rsp + 0x18] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
0003db60: CLP; push r15 ; mov r15, rcx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x438 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 8], rsi ; jne 0x3f68f
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0003fcd0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x10] ; movzx eax, word ptr [rsp + 0x10] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
000403c0: CLP; push r15 ; mov r15, rcx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x3638 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 8], rsi ; jne 0x41fd7
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
00042430: CLP; push r12 ; xor eax, eax ; mov ecx, 0x10 ; mov esi, 1 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x170 ; lea rbp, [rsp + 0xd0] ; mov qword ptr [rsp + 0xd0], 1 ; mov dword ptr [rsp + 0x158], 0 ; lea rdx, [rbp + 8] ; mov rdi, rdx ; rep stosq qword ptr [rdi], rax ; cmp dword ptr [rip + 0x32c2f6], 0
read: eax r12 rax rbp rbx rcx rdi rdx rflags rsp 
write: eax ecx esi rbp rbx rcx rdi rdx rflags rsp 
00042920: CLP; push rbx ; mov ebx, dword ptr [rdi] ; mov esi, 9 ; mov eax, 0x3e ; movsxd rdi, ebx ; syscall ; jmp 0x42949
write: eax ebx esi rdi rsp 
00042a20: CLP; sub rsp, 8 ; test rdi, rdi ; je 0x42a3c
read: rdi rflags rsp 
00042a60: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0xc8 ; test rdi, rdi ; mov qword ptr [rbp - 0xd8], rsi ; je 0x42fa2
read: r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
00043040: CLP; lea r8, [rdi + 6] ; xor ecx, ecx ; xor eax, eax ; movsx edx, byte ptr [rdi] ; sub edx, 0x2e ; cmp edx, 0x4c ; ja 0x43074
00043080: CLP; mov edi, edi ; lea rax, [rip + 0xf1889] ; test rdi, rdi ; je 0x430d0
read: edi rdi rflags 
00043190: CLP; push rbx ; lea r8, [rip + 0x328504] ; lea rcx, [rip + 0x32853d] ; xor edx, edx ; mov esi, 1 ; sub rsp, 0x10 ; mov qword ptr [rsp], rdi ; mov r10, rsp ; mov edi, 0x50000 ; call 0x430dc
read: edx rbx rdi rip rsp 
000432b0: CLP; push r15 ; mov rax, rdi ; mov r10, rax ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x1d8 ; mov r11, qword ptr [rdx + 0x20] ; mov qword ptr [rsp + 0x10], r8 ; lea r8, [rax + rsi - 1] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x20], rsi ; movzx eax, byte ptr [rcx]
read: r12 r13 r14 r15 r8 rax rbp rbx rdi rsi rsp 
000443f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov rbp, qword ptr [rdi] ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp + 0x10], rdx ; cmp byte ptr [rbp], 0 ; je 0x4452b
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
00044540: CLP; test rdi, rdi ; push rbx ; lea rax, [rip + 0xf2262] ; mov rbx, rdi ; je 0x445bc
read: rbx rdi rflags rsp 
000446e0: CLP; push r15 ; lea rdi, [rip + 0xf0486] ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; call 0x3819c
write: rdi rflags rsp 
00044950: CLP; push r15 ; mov r15, r9 ; push r14 ; mov r14, rdi ; push r13 ; mov r13d, edx ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x78 ; mov esi, dword ptr [rip + 0x329dfc] ; mov qword ptr [rsp + 0x30], rcx ; mov qword ptr [rsp + 0x38], r8 ; test esi, esi
read: edx esi r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp 
00044fb0: CLP; mov qword ptr [rdi + 0x80], rbx ; mov qword ptr [rdi + 0x78], rbp ; mov qword ptr [rdi + 0x48], r12 ; mov qword ptr [rdi + 0x50], r13 ; mov qword ptr [rdi + 0x58], r14 ; mov qword ptr [rdi + 0x60], r15 ; mov qword ptr [rdi + 0x68], rdi ; mov qword ptr [rdi + 0x70], rsi ; mov qword ptr [rdi + 0x88], rdx ; mov qword ptr [rdi + 0x98], rcx ; mov qword ptr [rdi + 0x28], r8 ; mov qword ptr [rdi + 0x30], r9 ; mov rcx, qword ptr [rsp] ; mov qword ptr [rdi + 0xa8], rcx ; lea rcx, [rsp + 8]
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi 
00045060: CLP; push rdi ; lea rsi, [rdi + 0x128] ; xor edx, edx ; mov edi, 2 ; mov r10d, 8 ; mov eax, 0xe ; syscall ; pop rdi ; cmp rax, -0xfff ; jae 0x450e0
read: edx rax rdi rflags rsp 
write: eax edi edx r10d rdi rflags rsi rsp 
00045100: CLP; mov r11, qword ptr [rdi + 0x10] ; add r11, qword ptr [rdi + 0x20] ; cmp edx, 6 ; mov qword ptr [rsp - 0x18], rcx ; mov qword ptr [rsp - 0x10], r8 ; mov qword ptr [rsp - 8], r9 ; jle 0x4532c
00045350: CLP; mov qword ptr [rdi + 0x80], rbx ; mov qword ptr [rdi + 0x78], rbp ; mov qword ptr [rdi + 0x48], r12 ; mov qword ptr [rdi + 0x50], r13 ; mov qword ptr [rdi + 0x58], r14 ; mov qword ptr [rdi + 0x60], r15 ; mov qword ptr [rdi + 0x68], rdi ; mov qword ptr [rdi + 0x70], rsi ; mov qword ptr [rdi + 0x88], rdx ; mov qword ptr [rdi + 0x98], rcx ; mov qword ptr [rdi + 0x28], r8 ; mov qword ptr [rdi + 0x30], r9 ; mov rcx, qword ptr [rsp] ; mov qword ptr [rdi + 0xa8], rcx ; lea rcx, [rsp + 8]
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi 
00045460: CLP; mov rax, qword ptr [rsi] ; lea r8, [rsi + 8] ; lea rsi, [rdi + 8] ; add rcx, rax ; cmp rax, rcx ; mov qword ptr [rdi], rcx ; ja 0x454bd
000454d0: CLP; push r12 ; xor eax, eax ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; sub rsp, 0x10 ; test r8, r8 ; jne 0x4551c
read: eax r12 r8 rbp rbx rdi rdx rflags rsi rsp 
00045540: CLP; lea r8, [rsi + 8] ; mov rsi, qword ptr [rsi] ; mov rax, rsi ; sub rax, rcx ; lea rcx, [rdi + 8] ; cmp rsi, rax ; mov qword ptr [rdi], rax ; jb 0x4559d
000455b0: CLP; push r12 ; xor eax, eax ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; sub rsp, 0x10 ; test r8, r8 ; jne 0x455fc
read: eax r12 r8 rbp rbx rdi rdx rflags rsi rsp 
00045620: CLP; xor r8, r8 ; mov r10, qword ptr [rsi] ; mov r11, qword ptr [rdx] ; lea rsi, [rsi + rcx*8 - 8] ; lea rdx, [rdx + rcx*8 - 8] ; lea rdi, [rdi + rcx*8 - 0x10] ; mov eax, ecx ; neg rcx ; and eax, 3 ; je 0x45651
write: eax r10 r11 r8 rcx rdi rdx rflags rsi 
000456d0: CLP; push rbx ; push rbp ; lea rbx, [rdx] ; neg rbx ; mov rax, qword ptr [rsi] ; mov r10, qword ptr [rdi] ; lea rdi, [rdi + rdx*8 - 0x10] ; lea rsi, [rsi + rdx*8] ; mul rcx ; bt ebx, 0 ; jb 0x45714
write: r10 rax rbx rdi rdx rflags rsi rsp 
00045860: CLP; push r15 ; mov rax, r9 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x58 ; cmp r9, 1 ; mov qword ptr [rsp + 0x20], rsi ; mov qword ptr [rsp + 0x28], rdi ; mov rsi, rdx ; mov qword ptr [rsp], r8 ; mov qword ptr [rsp + 8], r9
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
00045cb0: CLP; lea rdi, [rdi + rdx*8 - 8] ; lea rsi, [rsi + rdx*8 - 8] ; mov eax, edx ; and eax, 3 ; jne 0x45cdf
write: eax rdi rflags rsi 
00045f30: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdx ; push rbx ; mov rbx, r8 ; sub rsp, 0x58 ; cmp r8, 0x1f ; mov qword ptr [rbp - 0x40], rdi ; mov qword ptr [rbp - 0x38], rsi ; jg 0x46014
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00046420: CLP; push r15 ; mov r15, rcx ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rcx, qword ptr [rdx] ; cmp rcx, 1 ; jbe 0x464dc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
00046540: CLP; push r15 ; push r14 ; push r13 ; mov r13, r8 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rcx ; sub rsp, 0x48 ; test cl, 1 ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x10], rdx ; je 0x465f4
read: cl r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00046990: CLP; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rcx, qword ptr [rsi] ; cmp rcx, 1 ; jbe 0x46a3c
read: r12 r13 r14 rbp rbx rcx rdi rdx rflags rsi rsp 
00046aa0: CLP; push r15 ; mov r15, rcx ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; sub rsp, 0x38 ; test dl, 1 ; je 0x46b3c
read: dl r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
00046f10: CLP; xor r8, r8 ; mov r10, qword ptr [rsi] ; mov r11, qword ptr [rdx] ; lea rsi, [rsi + rcx*8 - 8] ; lea rdx, [rdx + rcx*8 - 8] ; lea rdi, [rdi + rcx*8 - 0x10] ; mov eax, ecx ; neg rcx ; and eax, 3 ; je 0x46f41
write: eax r10 r11 r8 rcx rdi rdx rflags rsi 
00046fc0: CLP; push rbx ; push rbp ; lea rbx, [rdx] ; neg rbx ; mov rax, qword ptr [rsi] ; mov r10, qword ptr [rdi] ; lea rdi, [rdi + rdx*8 - 0x10] ; lea rsi, [rsi + rdx*8] ; mul rcx ; bt ebx, 0 ; jb 0x47004
write: r10 rax rbx rdi rdx rflags rsi rsp 
000470b0: CLP; movsd qword ptr [rsp - 8], xmm0 ; mov rax, qword ptr [rsp - 8] ; mov rsi, rax ; shr rsi, 0x3f ; mov dword ptr [rcx], esi ; mov rcx, rax ; movabs rsi, 0xfffffffffffff ; shr rcx, 0x34 ; and rsi, rax ; shr rax, 0x30 ; and ecx, 0x7ff ; sub ecx, 0x3ff ; test eax, 0x7ff0 ; mov dword ptr [rdx], ecx ; mov qword ptr [rdi], rsi
00047210: CLP; add esi, 0x7f ; mov rax, qword ptr [rdi] ; shl edx, 0x1f ; movzx esi, sil ; shl esi, 0x17 ; and eax, 0x7fffff ; or edx, esi ; or edx, eax ; mov dword ptr [rsp - 4], edx ; movss xmm0, dword ptr [rsp - 4] ; ret
00047240: CLP; mov rax, qword ptr [rdi] ; add si, 0x3ff ; shl rdx, 0x3f ; and esi, 0x7ff ; shl rsi, 0x34 ; mov ecx, eax ; or rdx, rsi ; movabs rsi, 0xfffff00000000 ; and rax, rsi ; or rdx, rcx ; or rdx, rax ; mov qword ptr [rsp - 8], rdx ; movsd xmm0, qword ptr [rsp - 8] ; ret
00047280: CLP; movzx eax, byte ptr [rsp - 0xf] ; shl edx, 7 ; add si, 0x3fff ; and si, 0x7fff ; and eax, 0x7f ; or eax, edx ; mov byte ptr [rsp - 0xf], al ; movzx eax, word ptr [rsp - 0x10] ; and ax, 0x8000 ; or eax, esi ; mov word ptr [rsp - 0x10], ax ; mov rax, qword ptr [rdi] ; mov dword ptr [rsp - 0x18], eax ; shr rax, 0x20 ; mov dword ptr [rsp - 0x14], eax
00047690: CLP; mov rsp, rbx ; pop rdi ; test rdi, rdi ; je 0x476a5
read: rbx rdi rflags rsp 
write: rdi rflags rsp 
000476c0: CLP; lea rdx, [rip + 0x324029] ; mov rax, rdi ; test rdi, rdi ; movabs rcx, 0x7974742f7665642f ; cmove rax, rdx ; mov qword ptr [rax], rcx ; mov byte ptr [rax + 8], 0 ; ret
read: rax rcx rdi rdx rflags 
000476f0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x440 ; call 0xb3dcc
read: rbx rdi rip rsp 
000478d0: CLP; push r13 ; push r12 ; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rcx, qword ptr [rbx + 0x28] ; mov rsi, qword ptr [rbx + 0x20] ; mov rdi, qword ptr [rdi + 0xe0] ; mov rdx, rcx ; sub rdx, rsi ; test edx, edx ; jne 0x4791c
read: edx esi r12 r13 rbp rbx rcx rdi rdx rflags rsi rsp 
write: ebp rbx rcx rdi rdx rflags rsi rsp 
00047980: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdx ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x588 ; mov rax, qword ptr [rip + 0x3214c0] ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rbp - 0x4b0], eax ; mov eax, dword ptr [rdi + 0xc0]
read: eax r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
0004cd30: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x2128 ; mov ecx, dword ptr [rdi + 0xc0] ; test ecx, ecx ; jne 0x4ce9c
read: ecx r12 r13 rbp rbx rdi rflags rsp 
0004cf50: CLP; sub rsp, 8 ; mov rax, qword ptr [rip + 0x31bfe1] ; mov rdx, rsi ; mov rsi, rdi ; mov rdi, qword ptr [rax] ; call 0x4797c
read: rdi rip rsi rsp 
write: rax rdi rdx rflags rsi rsp 
0004d140: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x128 ; movzx ecx, byte ptr [rsi + 0xd] ; mov qword ptr [rbp - 0xa8], rsi ; mov dword ptr [rbp - 0x40], 0 ; mov dword ptr [rbp - 0x94], 0 ; mov r14, qword ptr [rip + 0x31bc42] ; mov eax, ecx
read: ecx r12 r13 r14 r15 rbp rbx rdi rsi rsp 
0004f910: CLP; push r15 ; mov r8, rsi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x168 ; mov eax, dword ptr [rsi] ; mov r14d, dword ptr [rsi + 4] ; mov dword ptr [rsp + 0x18], eax ; movzx eax, byte ptr [rsi + 0xd] ; mov ebp, eax ; shr bpl, 2
read: bpl eax r12 r13 r14 r15 rbp rbx rdi rsi rsp 
000513f0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov eax, dword ptr [rdi] ; sub eax, 1 ; cmp eax, 0xfe ; ja 0x51544
read: eax r12 rbp rbx rdi rflags rsp 
000515b0: CLP; push r14 ; mov rax, qword ptr [rip + 0x31cf13] ; push r13 ; push r12 ; push rbp ; mov rbp, qword ptr [rdi] ; push rbx ; movzx edx, byte ptr [rbp] ; mov r9, qword ptr [rax + rdx*8] ; test r9, r9 ; je 0x51675
00051690: CLP; push r13 ; mov rax, qword ptr [rip + 0x31ce33] ; push r12 ; push rbp ; push rbx ; mov rbx, qword ptr [rdi] ; mov edx, dword ptr [rbx] ; mov r9, qword ptr [rax + rdx*8] ; test r9, r9 ; je 0x5174d
00051760: CLP; push rbx ; mov esi, 1 ; mov rbx, rdi ; xor eax, eax ; cmp dword ptr [rip + 0x31cffe], 0 ; je 0x51780
read: eax rbx rdi rflags rsp 
00051870: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x88 ; mov rax, qword ptr [rip + 0x31756e] ; movsxd rcx, dword ptr [rsi + 8] ; movzx r13d, byte ptr [rbp + 0xd] ; mov rax, qword ptr fs:[rax] ; movzx eax, byte ptr [rax + rcx*2 + 1] ; and eax, 1
read: eax r12 r13 r14 r15 rbp rbx rdi rsi rsp 
00052500: CLP; push r13 ; push r12 ; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rcx, qword ptr [rbx + 0xa0] ; mov rdi, qword ptr [rdi + 0x228] ; mov rsi, qword ptr [rcx + 0x18] ; mov rdx, qword ptr [rcx + 0x20] ; sub rdx, rsi ; sar rdx, 2 ; test edx, edx ; jne 0x52554
read: edx esi r12 r13 rbp rbx rdi rdx rflags rsi rsp 
write: ebp rbx rcx rdi rdx rflags rsi rsp 
000525e0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rsi ; mov esi, 1 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbx ; mov rbx, rdx ; sub rsp, 0x1168 ; mov rax, qword ptr [rip + 0x31685b] ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rbp - 0x1080], eax
read: eax r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
00057c80: CLP; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; mov esi, 1 ; push rbx ; mov rbx, rdi ; sub rsp, 0x8268 ; call 0x73bdc
read: r12 r13 rbp rbx rdi rdx rip rsi rsp 
00057ed0: CLP; push rbp ; mov r9, rsi ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x298 ; mov rax, qword ptr [rip + 0x310ecb] ; mov qword ptr [rbp - 0x248], rdx ; mov qword ptr [rbp - 0x280], rcx ; mov rax, qword ptr fs:[rax] ; mov qword ptr [rbp - 0x210], rax
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rdx rsi rsp 
00060fe0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x1d8 ; mov rax, qword ptr [rdx] ; mov qword ptr [rbp - 0x128], rsi ; mov esi, 1 ; mov qword ptr [rbp - 0x1b8], rdx ; mov qword ptr [rbp - 0x1d8], rcx ; mov qword ptr [rbp - 0x108], rax
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rdx rsi rsp 
00069480: CLP; push r12 ; mov r12, rdi ; mov edi, edx ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x400 ; test rsi, rsi ; je 0x694e4
read: edx r12 rbp rbx rdi rflags rsi rsp 
00069500: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rbx, qword ptr [rip + 0x2ff888] ; mov rax, qword ptr [rip + 0x2ff949] ; mov rdi, qword ptr [rbx] ; mov edx, dword ptr fs:[rax] ; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; je 0x69542
read: eax r12 r13 rbp rbx rdi rflags rsp 
write: eax edx rax rbp rbx rdi rflags rsp 
00069710: CLP; push rbp ; lea rcx, [rip + 0xcb561] ; xor r8d, r8d ; xor edx, edx ; mov esi, 0x1000 ; push rbx ; sub rsp, 0x1008 ; mov rdi, rsp ; call 0x6994c
write: edx esi r8d rcx rdi rflags rsp 
000697b0: CLP; push rbp ; mov esi, 0x14 ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; test rdi, rdi ; mov rbx, rsp ; cmovne rbx, rdi ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; mov rdi, rbx ; call 0x6994c
read: ecx edx r8d rbp rbx rdi rflags rip rsp 
write: ecx edx esi r8d rbp rbx rdi rflags rsp 
00069840: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0x69884
read: rbx rdi rflags rsp 
00069890: CLP; push rbx ; mov rdx, rdi ; mov rcx, rsi ; mov r8d, 1 ; mov esi, 0x1000 ; sub rsp, 0x1000 ; mov rdi, rsp ; call 0x6994c
read: rbx rdi rip rsi rsp 
write: esi r8d rcx rdi rdx rflags rsp 
00069900: CLP; sub rsp, 0x98 ; mov rsi, rdi ; mov edi, 1 ; mov rdx, rsp ; call 0xd639c
read: rdi rip rsp 
00069950: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; sub rsp, 0x18 ; test rcx, rcx ; je 0x69978
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
00069b00: CLP; push r15 ; mov r15, rdi ; push r14 ; mov r14d, edx ; push r13 ; push r12 ; push rbp ; mov ebp, esi ; push rbx ; mov ebx, ecx ; sub rsp, 0xb8 ; mov rax, qword ptr [rip + 0x2ff342] ; mov qword ptr [rsp + 8], rdi ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rsp + 0x1c], eax
read: eax ecx edx esi r12 r13 r14 r15 rbp rbx rdi rsp 
00069e50: CLP; sub rsp, 0x18 ; mov rcx, rdi ; mov edx, 1 ; lea rdi, [rsp + 0xc] ; mov esi, 4 ; call 0x6ceec
read: rdi rip rsp 
write: edx esi rcx rdi rflags rsp 
00069e90: CLP; sub rsp, 0x18 ; mov rcx, rsi ; mov edx, 1 ; mov dword ptr [rsp + 0xc], edi ; lea rdi, [rsp + 0xc] ; mov esi, 4 ; call 0x6d45c
write: edx esi rcx rdi rflags rsp 
00069ed0: CLP; push rbx ; mov rbx, rdi ; call 0xd838c
read: rbx rdi rip rsp 
00069f40: CLP; mov r10, rcx ; movsxd rdx, edx ; movsxd rdi, edi ; mov eax, 0x108 ; syscall ; cmp rax, -0x1000 ; ja 0x69f5a
write: eax r10 rdi rdx rflags 
00069f70: CLP; mov rdx, qword ptr [rdi + 0x88] ; mov r9, rdi ; mov r8, qword ptr fs:[0x10] ; cmp r8, qword ptr [rdx + 8] ; je 0x69fcb
read: r8 rdi rflags 
00069fe0: CLP; mov rdx, qword ptr [rdi + 0x88] ; mov r8, qword ptr fs:[0x10] ; cmp r8, qword ptr [rdx + 8] ; je 0x6a03c
0006a050: CLP; mov rdx, qword ptr [rdi + 0x88] ; sub dword ptr [rdx + 4], 1 ; jne 0x6a093
0006a290: CLP; push r12 ; mov r10, qword ptr [rip + 0x2fed1b] ; mov rdx, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [r10] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x6a314
read: eax r12 rbp rbx rdi rflags rsi rsp 
write: eax r10 rbp rbx rdi rdx rflags rsp 
0006a400: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0xd0 ; test al, al ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x48], r9 ; je 0x6a45a
read: al r8 r9 rbx rcx rdi rdx rflags rsp 
0006a5d0: CLP; push rbp ; mov r10, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x6a642
read: eax rbp rbx rdi rflags rsi rsp 
0006a7c0: CLP; push r13 ; xor r8d, r8d ; mov r13, rdi ; xor ecx, ecx ; push r12 ; mov r12, rdx ; mov edx, 0xffffffff ; push rbp ; mov rbp, rsi ; mov esi, 0x8000 ; push rbx ; sub rsp, 0xf8 ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; call 0x79c0c
read: ecx r12 r13 r8d rbp rbx rdi rdx rip rsi rsp 
write: ecx edx esi r12 r13 r8d rbp rdi rflags rsp 
0006a850: CLP; push r14 ; lea rdx, [rip + 0xccc8a] ; push r13 ; mov r13, rsi ; mov esi, 0x200 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x200 ; mov rdi, rsp ; mov r12, rsp ; call 0x765ac
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
write: esi r12 r13 rbp rdi rdx rflags rsp 
0006ae50: CLP; mov rdx, qword ptr [rdi] ; mov r9d, 0x7fffffff ; movzx eax, byte ptr [rdx] ; add rdx, 1 ; sub eax, 0x30 ; jmp 0x6ae88
0006aec0: CLP; push r14 ; mov r14, rdi ; push r13 ; lea r13, [rdi + 1] ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; sub rsp, 0x10 ; and byte ptr [rdx + 0xc], 7 ; mov dword ptr [rdx + 0x30], 0xffffffff ; mov qword ptr [rsp + 8], r13 ; movzx eax, byte ptr [rdx + 0xd]
read: r12 r13 r14 rbp rbx rcx rdi rdx rsi rsp 
0006b5a0: CLP; mov rdx, qword ptr [rdi] ; mov r9d, 0x7fffffff ; mov eax, dword ptr [rdx] ; add rdx, 4 ; sub eax, 0x30 ; jmp 0x6b5d8
0006b610: CLP; push r14 ; lea r14, [rdi + 4] ; push r13 ; mov r13, rdi ; mov rdi, r14 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; sub rsp, 0x10 ; and byte ptr [rdx + 0xc], 7 ; mov dword ptr [rdx + 0x30], 0xffffffff ; mov qword ptr [rsp + 8], r14
read: r12 r13 r14 rbp rbx rcx rdi rdx rsi rsp 
write: r12 r13 r14 rbp rbx rdi rflags rsp 
0006bcc0: CLP; push rbp ; mov rbp, rsp ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0xd8 ; test al, al ; mov qword ptr [rbp - 0xc0], rdx ; mov qword ptr [rbp - 0xb8], rcx ; mov qword ptr [rbp - 0xb0], r8 ; mov qword ptr [rbp - 0xa8], r9 ; je 0x6bd19
read: al r12 r13 r8 r9 rbp rbx rcx rdi rdx rflags rsp 
0006be30: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x90 ; mov eax, dword ptr [rdi + 0x70] ; test eax, eax ; js 0x6be8c
read: eax r12 rbp rbx rdi rflags rsp 
0006bf60: CLP; push r12 ; push rbp ; push rbx ; mov edx, dword ptr [rdi] ; mov rbx, rdi ; test dh, 0x20 ; mov ecx, edx ; jne 0x6c13c
read: dh edx r12 rbp rbx rdi rflags rsp 
0006c460: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0x6c544
read: rbx rdi rflags rsp 
0006c5c0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x6c62f
read: eax rbp rbx rdi rflags rsi rsp 
0006c970: CLP; test byte ptr [rdi + 0x74], 1 ; mov rax, rdi ; je 0x6c9ad
read: rdi rflags 
0006c9c0: CLP; push r13 ; mov r13d, edx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; mov edi, 0x238 ; push rbx ; sub rsp, 0x18 ; call 0x1f3cc
read: edx r12 r13 rbp rbx rdi rip rsi rsp 
0006cac0: CLP; mov rax, qword ptr [rdi + 0xe8] ; test rax, rax ; je 0x6caec
0006cb00: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0xf0] ; test rax, rax ; je 0x6cb2a
read: rax rbp rbx rdi rflags rsp 
0006cb40: CLP; sub rsp, 0x18 ; mov rax, qword ptr [rdi + 0xf8] ; mov qword ptr [rsp + 8], rsi ; test rax, rax ; je 0x6cb7c
0006cb90: CLP; mov rdx, qword ptr [rdi + 0x100] ; xor eax, eax ; test rdx, rdx ; je 0x6cbb3
0006cbc0: CLP; sub rsp, 8 ; mov qword ptr [rdi + 0x90], -1 ; call 0x76e8c
0006cbf0: CLP; push r12 ; mov r12, rdx ; push rbp ; mov ebp, esi ; xor esi, esi ; push rbx ; mov rbx, rdi ; call 0x79ccc
read: esi r12 rbp rbx rdi rdx rip rsp 
0006cc80: CLP; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x20 ; movzx eax, byte ptr [rsi] ; cmp al, 0x72 ; je 0x6cd5c
read: al r12 rbp rbx rdi rflags rsp 
0006cd70: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; call 0x856dc
read: r12 rbp rbx rdi rip rsi rsp 
0006d070: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x6d0df
read: eax rbp rbx rdi rflags rsi rsp 
0006d210: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x6d277
read: eax rbx rdi rflags rsp 
0006d3b0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdx, qword ptr [rdi + 0x38] ; test rdx, rdx ; je 0x6d43c
read: rbp rbx rdi rdx rflags rsp 
0006d630: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x28 ; test rdi, rdi ; mov qword ptr [rsp + 0x10], rsi ; mov dword ptr [rsp + 0x1c], edx ; je 0x6d8cb
read: edx r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
0006d970: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; mov ebp, ecx ; push rbx ; sub rsp, 0x28 ; test r9, r9 ; mov qword ptr [rsp + 8], rsi ; mov dword ptr [rsp + 0x14], r8d ; mov qword ptr [rsp + 0x18], r9 ; je 0x6d9a1
read: ecx r12 r13 r14 r15 r8d r9 rbp rbx rdi rdx rflags rsi rsp 
0006db50: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [rip + 0x2fcbb6] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x6dbcf
read: eax r12 rbp rbx rdi rflags rsp 
write: eax rbp rbx rdi rflags rsp 
0006dd40: CLP; push r13 ; lea r13, [rip + 0xcf783] ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x18 ; cmp esi, 0x20 ; je 0x6dd88
read: esi r12 r13 rbp rbx rdi rflags rsp 
0006de10: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; mov ebp, dword ptr [rip + 0x30094b] ; test ebp, ebp ; jne 0x6e004
read: ebp r12 rbp rbx rdi rflags rsp 
0006e0c0: CLP; push r15 ; xor r9d, r9d ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; xor ebp, ebp ; push rbx ; xor ebx, ebx ; sub rsp, 0x48 ; movzx r8d, byte ptr [rdx] ; test r8b, r8b ; je 0x6e136
read: ebp ebx r12 r13 r14 r15 r8b r9d rbp rbx rdi rflags rsi rsp 
0006e410: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; mov edi, 0x100 ; push rbx ; sub rsp, 0x10 ; call 0x1f3cc
read: r12 rbp rbx rdi rip rsi rsp 
0006e4c0: CLP; push r12 ; mov r12, rdi ; push rbp ; push rbx ; call 0x856dc
read: r12 rbp rbx rdi rip rsp 
0006e790: CLP; push r12 ; mov r10, rsi ; push rbp ; mov ebp, ecx ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x6e802
read: eax ecx r12 rbp rbx rdi rflags rsi rsp 
0006e8d0: CLP; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rsi ; push rbx ; mov eax, dword ptr [rdi + 0xc0] ; mov rbx, rdi ; test eax, eax ; jle 0x6e91c
read: eax edx r12 rbp rbx rdi rflags rsi rsp 
0006e940: CLP; push rbp ; mov r10, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x6e9b2
read: eax rbp rbx rdi rflags rsi rsp 
0006ea80: CLP; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov ecx, dword ptr [rdi] ; mov rbx, rdi ; mov eax, ecx ; and eax, 0x8000 ; jne 0x6eaf4
read: eax ecx r12 rbp rbx rdi rflags rsi rsp 
0006ec00: CLP; push r12 ; mov r10, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdi ; mov edi, dword ptr [rdi] ; mov eax, edi ; mov r8d, edi ; and eax, 0x8000 ; jne 0x6ec7d
read: eax edi r12 rbp rbx rcx rdi rflags rsi rsp 
0006ef00: CLP; push r13 ; xor r8d, r8d ; xor ecx, ecx ; mov r13, rdx ; mov edx, 0xffffffff ; push r12 ; mov r12, rsi ; mov esi, 0x8000 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0xf8 ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; call 0x79c0c
read: ecx r12 r13 r8d rbp rbx rdi rdx rip rsi rsp 
write: ecx edx esi r12 r13 r8d rbp rdi rflags rsp 
0006efb0: CLP; push r13 ; xor r8d, r8d ; mov r13, rdi ; xor ecx, ecx ; push r12 ; mov r12, rdx ; mov edx, 0xffffffff ; push rbp ; mov rbp, rsi ; mov esi, 0x8000 ; push rbx ; sub rsp, 0xf8 ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; call 0x79c0c
read: ecx r12 r13 r8d rbp rbx rdi rdx rip rsi rsp 
write: ecx edx esi r12 r13 r8d rbp rdi rflags rsp 
0006f1c0: CLP; push rbp ; mov ebp, edi ; push rbx ; mov rbx, rsi ; mov esi, 1 ; mov rdi, rbx ; sub rsp, 8 ; call 0x73bdc
write: ebp esi rbx rdi rflags rsp 
0006f230: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x6f297
read: eax rbx rdi rflags rsp 
0006f380: CLP; sub rsp, 8 ; mov rax, qword ptr [rdi + 0xa0] ; test rax, rax ; je 0x6f3a7
0006f3c0: CLP; push rbx ; mov rbx, qword ptr [rip + 0x2fb34c] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x6f439
write: eax rbx rdi rflags rsp 
0006f530: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x2fb1d9] ; mov rax, qword ptr [rdi + 0xa0] ; test rax, rax ; je 0x6f55e
write: rax rdi rflags rsp 
0006f7c0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; call 0x957cc
read: r12 rbp rbx rdi rip rsi rsp 
0006f940: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; call 0x957cc
read: r12 rbp rbx rdi rip rsi rsp 
0006f9b0: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; mov ebp, ecx ; push rbx ; sub rsp, 0x28 ; test r9, r9 ; mov qword ptr [rsp + 8], rsi ; mov dword ptr [rsp + 0x14], r8d ; mov qword ptr [rsp + 0x18], r9 ; je 0x6f9e1
read: ecx r12 r13 r14 r15 r8d r9 rbp rbx rdi rdx rflags rsi rsp 
0006fbc0: CLP; push r13 ; lea r13, [rip + 0xc0cb3] ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x48 ; cmp esi, 0x20 ; je 0x6fc07
read: esi r12 r13 rbp rbx rdi rflags rsp 
0006ff30: CLP; push rbx ; mov rbx, qword ptr [rip + 0x2fa7d4] ; mov r8d, edi ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x6ffac
write: eax r8d rbx rdi rflags rsp 
00070100: CLP; push rbx ; mov rbx, qword ptr [rip + 0x2fa604] ; mov r8d, edi ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x7017c
write: eax r8d rbx rdi rflags rsp 
000703f0: CLP; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2f8b41] ; mov rdx, rsi ; mov rsi, rdi ; mov rdi, qword ptr [rax] ; call 0x525dc
read: rdi rip rsi rsp 
write: rax rdi rdx rflags rsi rsp 
00070620: CLP; sub rsp, 8 ; mov rdx, rsi ; mov rsi, rdi ; mov rdi, qword ptr [rip + 0x2fa0e3] ; xor ecx, ecx ; call 0x60fdc
read: ecx rdi rip rsi rsp 
write: ecx rdi rdx rflags rsi rsp 
00070650: CLP; push r13 ; mov r13d, esi ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; lea rbx, [rdi + 0xf0] ; sub rsp, 8 ; mov rdx, qword ptr [rdi + 0xa0] ; cmp qword ptr [rdx + 0x30], rbx ; je 0x706a2
read: esi r12 r13 rbp rbx rdi rflags rsp 
000707a0: CLP; push r13 ; lea r8, [rip + 0x2f77f3] ; mov r13, rdi ; push r12 ; mov r12, rdx ; xor edx, edx ; push rbp ; mov rbp, rsi ; mov esi, 0x8000 ; push rbx ; sub rsp, 0x248 ; lea rcx, [rsp + 0xf0] ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; call 0x79c0c
read: edx r12 r13 rbp rbx rdi rdx rip rsi rsp 
write: edx esi r12 r13 r8 rbp rcx rdi rflags rsp 
000708d0: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdx ; push rbx ; sub rsp, 0x28 ; mov r8, qword ptr [rsi] ; mov rax, qword ptr [rdi] ; mov r9, qword ptr [r8 + 0x10] ; sub rbp, r9
read: r12 r13 r14 r15 r9 rbp rbx rdi rdx rsi rsp 
00070b30: CLP; mov rdx, qword ptr [rdi + 0xa0] ; mov rax, rsi ; sub rax, qword ptr [rdx + 0x10] ; mov rdx, qword ptr [rdi + 0x60] ; sar rax, 2 ; test rdx, rdx ; je 0x70b5f
00070b70: CLP; mov rax, qword ptr [rdi + 0xa0] ; and dword ptr [rdi], 0xfffffeff ; mov rdx, qword ptr [rax + 8] ; mov rcx, qword ptr [rax + 0x50] ; mov qword ptr [rax + 0x50], rdx ; mov rdx, qword ptr [rax + 0x40] ; mov qword ptr [rax + 8], rcx ; mov rcx, qword ptr [rax + 0x10] ; mov qword ptr [rax], rdx ; mov qword ptr [rax + 0x10], rdx ; mov qword ptr [rax + 0x40], rcx ; ret
00070bb0: CLP; mov rax, qword ptr [rdi + 0xa0] ; or dword ptr [rdi], 0x100 ; mov rcx, qword ptr [rax + 8] ; mov rdx, qword ptr [rax + 0x50] ; mov rsi, qword ptr [rax + 0x40] ; mov qword ptr [rax + 0x50], rcx ; mov rcx, qword ptr [rax + 0x10] ; mov qword ptr [rax + 8], rdx ; mov qword ptr [rax], rdx ; mov qword ptr [rax + 0x10], rsi ; mov qword ptr [rax + 0x40], rcx ; ret
00070bf0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rax, qword ptr [rdi + 0xa0] ; mov r8d, dword ptr [rbx + 0x74] ; mov rdi, qword ptr [rax + 0x30] ; test rdi, rdi ; je 0x70c16
read: rbp rbx rdi rflags rsi rsp 
write: r8d rax rbp rbx rdi rflags rsp 
00070c90: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rbx, qword ptr [rdi + 0xa0] ; mov rdx, qword ptr [rbx] ; mov r13, qword ptr [rbx + 0x10] ; mov rax, rbx ; cmp rdx, r13 ; ja 0x70d1c
read: esi r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
00070e40: CLP; push rbx ; mov rdx, qword ptr [rdi + 0xa0] ; mov rbx, rdi ; mov rdi, qword ptr [rdx + 0x30] ; test rdi, rdi ; je 0x70e5a
read: rbx rdi rflags rsp 
write: rbx rdi rdx rflags rsp 
00070ef0: CLP; mov rax, qword ptr [rdi + 0xd8] ; push rbx ; mov rbx, rdi ; call qword ptr [rax + 0x20]
read: rbx rdi rsp 
00070f30: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jne 0x70f53
read: eax esi rbp rbx rdi rflags rsp 
000710a0: CLP; push rbx ; mov rsi, qword ptr [rdi + 0xa0] ; mov rbx, rdi ; cmp qword ptr [rsi + 0x30], 0 ; je 0x710bc
read: rbx rdi rflags rsp 
00071100: CLP; push rbx ; xor r9d, r9d ; mov rbx, rdi ; mov r8d, 0xffffffff ; xor edi, edi ; mov ecx, 0x22 ; mov edx, 3 ; mov esi, 0x2000 ; call 0xe004c
read: edi r9d rbx rdi rip rsp 
00071160: CLP; mov rax, qword ptr [rdi + 0xa0] ; push rbx ; mov rbx, rdi ; mov rdx, qword ptr [rax + 0x20] ; cmp rdx, qword ptr [rax + 0x18] ; ja 0x711bc
read: rbx rdi rdx rflags rsp 
000711f0: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; test ah, 1 ; je 0x7125c
read: ah rbx rdi rflags rsp 
00071270: CLP; push rbx ; mov ecx, dword ptr [rdi + 0xc0] ; mov rbx, rdi ; test ecx, ecx ; js 0x712dc
read: ecx rbx rdi rflags rsp 
000713b0: CLP; push rbx ; mov rbx, rdi ; mov edi, dword ptr [rdi + 0xc0] ; test edi, edi ; js 0x7141c
read: edi rbx rdi rflags rsp 
000714f0: CLP; push r14 ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; nop dword ptr [rax + rax] ; mov rdi, qword ptr [rbx + 0xa0] ; mov rsi, qword ptr [rdi] ; mov r8, qword ptr [rdi + 8] ; sub r8, rsi ; sar r8, 2
read: r12 r13 r14 r8 rbp rbx rdi rdx rsi rsp 
write: r12 r13 r8 rbp rbx rdi rflags rsi rsp 
000715d0: CLP; push rbx ; mov rdx, qword ptr [rdi + 0xa0] ; mov rbx, rdi ; mov eax, esi ; mov rcx, qword ptr [rdx] ; cmp rcx, qword ptr [rdx + 0x10] ; jbe 0x715eb
read: esi rbx rcx rdi rflags rsp 
00071620: CLP; mov rax, qword ptr [rdi + 0xa0] ; push rbx ; mov rbx, rdi ; mov rdx, qword ptr [rax] ; cmp rdx, qword ptr [rax + 0x10] ; jbe 0x7164c
read: rbx rdi rdx rflags rsp 
000716c0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov eax, dword ptr [rsi] ; mov qword ptr [rdi + 8], rsi ; test ah, 8 ; jne 0x71714
read: ah rbx rdi rflags rsi rsp 
00071740: CLP; mov rax, qword ptr [rdi + 8] ; test rax, rax ; je 0x7177a
00071790: CLP; mov rdx, qword ptr [rsi + 8] ; mov eax, 0xffffffff ; cmp rdx, rdi ; jne 0x717e5
read: rdi rdx rflags 
00071850: CLP; cmp qword ptr [rdi + 0x60], 0 ; je 0x7185f
00071880: CLP; mov rax, qword ptr [rdi + 0xa0] ; mov rdx, qword ptr [rax + 0x20] ; mov rsi, qword ptr [rax + 8] ; cmp rdx, rsi ; jbe 0x7189b
000718e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov edx, dword ptr [rdi] ; cmp esi, -1 ; sete r13b ; test dl, 8 ; je 0x7191c
read: dl esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00071af0: CLP; sub rsp, 8 ; test byte ptr [rdi], 8 ; je 0x71b0c
00071b20: CLP; push rbx ; mov rax, qword ptr [rdi + 0xa0] ; mov rbx, rdi ; mov rdi, qword ptr [rax + 0x30] ; test rdi, rdi ; je 0x71b4b
read: rbx rdi rflags rsp 
write: rax rbx rdi rflags rsp 
00071b70: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov r14, qword ptr [rdi + 0xa0] ; mov ebx, dword ptr [rdi + 0x74] ; mov dword ptr [rsp + 0xc], edx ; mov rax, qword ptr [r14 + 0x18] ; and ebx, 8 ; mov r15, qword ptr [r14 + 0x28] ; mov qword ptr [rsp], rax
read: ebx edx r12 r13 r14 r15 rax rbp rbx rdi rsp 
00071d60: CLP; push r13 ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; test rdx, rdx ; jne 0x71ddc
read: r12 r13 rbp rbx rcx rdi rdx rflags rsi rsp 
00071e10: CLP; mov rdx, qword ptr [rdi + 0xa0] ; mov rax, qword ptr [rdx + 8] ; cmp qword ptr [rdx + 0x20], rax ; cmovae rax, qword ptr [rdx + 0x20] ; sub rax, qword ptr [rdx + 0x10] ; sar rax, 2 ; ret
00071e40: CLP; push r14 ; test ecx, ecx ; push r13 ; mov r13d, edx ; push r12 ; mov r12d, ecx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; jne 0x71ed4
read: ecx edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
00072060: CLP; push r12 ; mov r12d, esi ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; mov rbp, qword ptr [rdi + 0x98] ; mov rdi, rbp ; call qword ptr [rbp + 0x20]
read: esi r12 rbp rbx rdi rsp 
write: r12d rbp rbx rdi rflags rsp 
00072140: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x48 ; mov eax, dword ptr [rdi] ; test al, 4 ; jne 0x72727
read: al r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000727c0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0xc8 ; test ecx, ecx ; je 0x72ab4
read: ecx r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00072f60: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov eax, dword ptr [rdi] ; test al, 4 ; jne 0x73094
read: al rbp rbx rdi rflags rsp 
000730b0: CLP; push rbx ; mov rbx, rdi ; call 0x7772c
read: rbx rdi rip rsp 
000730f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; test rdx, rdx ; mov r13, qword ptr [rdi + 0x98] ; je 0x731c8
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
00073250: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; test al, 8 ; je 0x73284
read: al rbp rbx rdi rflags rsp 
00073500: CLP; push r12 ; push rbp ; push rbx ; mov rax, qword ptr [rdi + 0xa0] ; mov rbx, rdi ; mov rdx, qword ptr [rax + 0x20] ; mov rsi, qword ptr [rax + 0x18] ; cmp rdx, rsi ; jbe 0x73551
read: r12 rbp rbx rdi rdx rflags rsi rsp 
00073810: CLP; mov rdx, qword ptr [rdi + 0x48] ; mov ecx, dword ptr [rdx + 0x58] ; test ecx, ecx ; jne 0x7382c
00073850: CLP; mov rax, qword ptr [rdi + 0x48] ; mov eax, dword ptr [rax + 0x4c] ; ret
00073860: CLP; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; mov r12, qword ptr [rdi + 0x48] ; mov qword ptr [rdi + 0x50], r9 ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rdi + 0x70], rsi ; mov qword ptr [rsp + 0x18], rdx ; mov qword ptr [rdi + 0x58], rax
read: r12 r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp 
00073950: CLP; push r13 ; mov r13, r8 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov r12, qword ptr [rdi + 0x90] ; mov qword ptr [rdi + 0x98], rdx ; mov qword ptr [rdi + 0xa0], rcx ; mov qword ptr [rdi + 0xb8], rsi ; cmp qword ptr [r12], 0 ; mov rbp, qword ptr [r12 + 0x28] ; je 0x73995
read: r12 r13 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00073a30: CLP; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; mov r12, qword ptr [rdi + 0x90] ; mov qword ptr [rdi + 0x98], r9 ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rdi + 0xb8], rsi ; mov qword ptr [rsp + 0x18], rdx ; mov qword ptr [rdi + 0xa0], rax
read: r12 r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp 
00073b30: CLP; push rbp ; shl r8, 2 ; lea rax, [r8 + 0x12] ; mov rbp, rsp ; push r15 ; mov r15, rcx ; and rax, 0xfffffffffffffff0 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov r13, qword ptr [rdi + 0x48]
read: r12 r13 r14 r15 r8 rax rbp rbx rcx rdi rdx rsp 
00073be0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x20 ; test esi, esi ; mov eax, dword ptr [rdi + 0xc0] ; js 0x73dbc
read: esi r12 rbp rbx rdi rflags rsp 
00073dd0: CLP; test esi, esi ; push rbx ; mov rbx, rdi ; js 0x73ed4
read: esi rbx rdi rflags rsp 
00073f10: CLP; mov rax, qword ptr [rdi + 0xa0] ; push rbx ; mov rbx, rdi ; mov rdx, qword ptr [rax + 0x20] ; cmp rdx, qword ptr [rax + 0x28] ; je 0x73f5c
read: rbx rdi rdx rflags rsp 
00073f80: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0xa0] ; mov rbp, qword ptr [rdi + 0xf0] ; mov rdi, qword ptr [rax + 0x18] ; mov rax, qword ptr [rax + 0x20] ; sub rax, rdi ; sar rax, 2 ; lea rsi, [rax*4 + 4] ; call 0x1f3ac
read: rax rbp rbx rdi rip rsp 
write: rax rbp rbx rdi rflags rsi rsp 
00074010: CLP; push r13 ; mov r13, rdi ; mov edi, 0x258 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 8 ; call 0x1f3cc
read: r12 r13 rbp rbx rdi rip rsi rsp 
00074110: CLP; mov ecx, dword ptr [rdi] ; mov r8, rdi ; mov eax, ecx ; and eax, 0x8000 ; jne 0x741d4
read: eax ecx rdi rflags 
00074200: CLP; mov esi, dword ptr [rdi] ; mov r8, rdi ; mov eax, esi ; and eax, 0x8000 ; jne 0x742cc
read: eax esi rdi rflags 
00074300: CLP; mov esi, dword ptr [rdi] ; mov r8, rdi ; mov eax, esi ; and eax, 0x8000 ; jne 0x743cc
read: eax esi rdi rflags 
00074400: CLP; test dword ptr [rdi], 0x2000 ; je 0x74414
00074880: CLP; push rbp ; mov r10, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x748f2
read: eax rbp rbx rdi rflags rsi rsp 
000749d0: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x74a37
read: eax rbx rdi rflags rsp 
00074b10: CLP; push rbx ; mov rbx, qword ptr [rip + 0x2f5bfc] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x74b89
write: eax rbx rdi rflags rsp 
00074c70: CLP; mov rax, qword ptr [rdi + 0x28] ; cmp rax, qword ptr [rdi + 0x30] ; push rbx ; mov rbx, rdi ; je 0x74cac
read: rax rbx rdi rflags rsp 
00074cd0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 0xf0] ; mov rsi, qword ptr [rbx + 0x28] ; mov rdi, qword ptr [rdi + 0x20] ; sub rsi, rdi ; add rsi, 1 ; call 0x1f3ac
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rflags rsi rsp 
00074d50: CLP; push r13 ; mov r13, rdi ; mov edi, 0x258 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 8 ; call 0x1f3cc
read: r12 r13 rbp rbx rdi rip rsi rsp 
00074fa0: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x75007
read: eax rbx rdi rflags rsp 
00075120: CLP; push r14 ; mov r14, rdx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; mov edi, 0x64 ; push rbp ; push rbx ; sub rsp, 0xf0 ; call 0x1f3cc
read: r12 r13 r14 rbp rbx rdi rdx rip rsi rsp 
000752b0: CLP; push r13 ; lea r8, [rip + 0x2f2f23] ; mov r13, rdx ; xor edx, edx ; push r12 ; mov r12, rsi ; mov esi, 0x8000 ; push rbp ; mov ebp, edi ; push rbx ; sub rsp, 0x238 ; lea rcx, [rsp + 0xe0] ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; mov rbx, rsp
write: ebp edx esi r12 r13 r8 rbx rcx rdi rflags rsp 
000753f0: CLP; sub rsp, 8 ; mov rdx, rsi ; mov rsi, rdi ; mov rdi, qword ptr [rip + 0x2f5313] ; xor ecx, ecx ; call 0x57ecc
read: ecx rdi rip rsi rsp 
write: ecx rdi rdx rflags rsi rsp 
00075420: CLP; push r13 ; mov r13d, esi ; push r12 ; push rbp ; lea rbp, [rdi + 0xf0] ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp qword ptr [rdi + 0x38], rbp ; je 0x7546c
read: esi r12 r13 rbp rbx rdi rflags rsp 
00075560: CLP; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [rdi + 0xe0] ; mov rdi, qword ptr [rdi + 0x28] ; mov rax, qword ptr [rbp + 0x30] ; lea rdx, [rdi + rdx] ; cmp rax, rdx ; jae 0x755fc
read: r12 r13 r14 rax rbp rbx rdi rdx rflags rsi rsp 
write: r12 r14 rax rbp rbx rdi rdx rflags rsp 
00075620: CLP; push r12 ; cmp esi, -1 ; mov r12d, esi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [rdi + 0xe0] ; je 0x75691
read: esi r12 rbp rbx rdi rflags rsp 
000756c0: CLP; push r15 ; xor ecx, ecx ; xor r8d, r8d ; push r14 ; push r13 ; mov r13, rdx ; mov edx, 0xffffffff ; push r12 ; mov r12, rsi ; mov esi, 0x8000 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0xf8 ; mov rdi, rsp
read: ecx r12 r13 r14 r15 r8d rbp rbx rdi rdx rsi rsp 
write: ecx edx esi r12 r13 r8d rbx rdi rflags rsp 
00075920: CLP; push rbp ; mov r10, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0x75992
read: eax rbp rbx rdi rflags rsi rsp 
00075a70: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x75ad7
read: eax rbx rdi rflags rsp 
00075f10: CLP; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jle 0x75f34
00075f50: CLP; mov edx, dword ptr [rdi] ; mov eax, 1 ; test dl, 8 ; jne 0x75f6b
00075f80: CLP; mov eax, dword ptr [rdi] ; and eax, 0x804 ; ret
00075f90: CLP; xor eax, eax ; test byte ptr [rdi], 4 ; sete al ; ret
00075fa0: CLP; xor eax, eax ; test byte ptr [rdi], 8 ; sete al ; ret
00075fb0: CLP; mov eax, dword ptr [rdi] ; and eax, 0x200 ; ret
00075fc0: CLP; mov eax, dword ptr [rdi + 0xc0] ; push rbx ; mov rbx, rdi ; test eax, eax ; jle 0x76004
read: eax rbx rdi rflags rsp 
00076040: CLP; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jle 0x76064
00076080: CLP; mov edx, dword ptr [rdi] ; mov eax, edx ; and eax, 0x8000 ; cmp eax, 1 ; sbb eax, eax ; add eax, 2 ; test esi, esi ; je 0x7609f
000760b0: CLP; push rbp ; mov rbp, rsp ; push r15 ; lea rax, [rbp + 0x10] ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x68 ; mov dword ptr [rbp - 0x84], edi ; mov qword ptr [rbp - 0x70], rax ; lea rdi, [rip + 0xbf8f0] ; lea rax, [rbp - 0x60] ; mov qword ptr [rbp - 0x50], rdx
write: rax rbp rbx rdi rflags rsp 
000763a0: CLP; push rbx ; mov rbx, rdi ; nop dword ptr [rax + rax] ; lea rsi, [rip + 0xc0855] ; mov rdx, rbx ; mov edi, 1 ; xor eax, eax ; call 0x760ac
read: eax rbx rdi rip rsp 
00076440: CLP; push rbx ; mov edx, dword ptr [rdi + 8] ; mov rbx, rdi ; test edx, edx ; je 0x76457
read: edx rbx rdi rflags rsp 
00076470: CLP; push r12 ; push rbp ; mov rbp, rdx ; push rbx ; mov ecx, dword ptr [rdi + 0xc] ; mov rbx, rdi ; test ecx, ecx ; jne 0x764a3
read: ecx r12 rbp rbx rdi rdx rflags rsp 
00076530: CLP; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; mov rdi, rsi ; sub rsp, 8 ; mov rax, qword ptr [rbx + 0x18] ; mov rdx, qword ptr [rbx + 0x10] ; lea rcx, [rbp + rax] ; cmp rcx, rdx ; jbe 0x7655c
read: rbp rbx rcx rdi rdx rflags rsi rsp 
write: rax rbp rbx rcx rdi rdx rflags rsp 
00076740: CLP; and dword ptr [rdi], 0xffffffcf ; ret
00076750: CLP; mov eax, dword ptr [rdi] ; shr eax, 4 ; and eax, 1 ; ret
00076760: CLP; mov eax, dword ptr [rdi] ; shr eax, 5 ; and eax, 1 ; ret
000767b0: CLP; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x10] ; jae 0x767c6
000767e0: CLP; mov rdi, qword ptr [rip + 0x2f3f2d] ; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x10] ; jae 0x767fd
write: rax rdi rflags 
00076810: CLP; sub rsp, 8 ; test rdi, rdi ; je 0x7683c
read: rdi rflags rsp 
00076890: CLP; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0x768f7
read: eax rbx rdi rflags rsp 
00076b50: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; call 0x856dc
read: r12 rbp rbx rdi rip rsi rsp 
00076bc0: CLP; mov rax, qword ptr [rdi + 0xd8] ; push rbx ; mov rbx, rdi ; call qword ptr [rax + 0x80]
read: rbx rdi rsp 
00076c00: CLP; push rbx ; mov rdx, qword ptr [rdi + 0x28] ; mov rbx, rdi ; mov rsi, qword ptr [rdi + 0x20] ; cmp rdx, rsi ; jbe 0x76c43
read: rbx rdi rdx rflags rsi rsp 
00076cc0: CLP; sub rsp, 8 ; mov edi, dword ptr [rdi + 0x70] ; call 0xd7129
00076ce0: CLP; push rbx ; mov rbx, rdi ; call 0x79a1c
read: rbx rdi rip rsp 
00076d20: CLP; lea rax, [rip + 0x2f1975] ; push rbx ; lea rcx, [rip + 0x2f14ad] ; mov rbx, rdi ; mov qword ptr [rdi + 0xd8], rax ; mov rax, qword ptr [rdi + 0xa0] ; mov qword ptr [rax + 0x140], rcx ; call 0x76cdc
read: rax rbx rcx rdi rip rsp 
00076d90: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; test dword ptr [rdi], 0x1000 ; mov rbx, rdi ; je 0x76e0c
read: r12 rbp rbx rdi rdx rflags rsi rsp 
00076e90: CLP; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x90 ; test ecx, ecx ; je 0x771cc
read: ecx r12 r13 r14 rbp rbx rdi rflags rsp 
00077320: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x38] ; mov rsi, qword ptr [rbx + 0x40] ; sub rsi, rdi ; call 0xe007c
read: rbx rdi rip rsi rsp 
write: rbx rdi rflags rsi rsp 
00077360: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x90 ; mov rax, qword ptr [rdi + 0xd8] ; mov rsi, rsp ; call qword ptr [rax + 0x90]
read: r12 rbp rbx rdi rsp 
00077550: CLP; sub rsp, 8 ; mov edi, dword ptr [rdi + 0x70] ; call 0xe35bc
00077570: CLP; push rbx ; mov rsi, qword ptr [rdi + 8] ; mov rbx, rdi ; cmp rsi, qword ptr [rdi + 0x10] ; je 0x775bc
read: rbx rdi rflags rsi rsp 
000775e0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x98 ; mov rax, qword ptr [rdi + 0xd8] ; mov rsi, rsp ; call qword ptr [rax + 0x90]
read: rbp rbx rdi rsp 
00077730: CLP; push rbx ; mov rbx, rdi ; call 0x775dc
read: rbx rdi rip rsp 
00077760: CLP; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; call 0x775dc
read: r12 rbp rbx rdi rdx rip rsi rsp 
000777a0: CLP; sub rsp, 8 ; mov rdx, rsi ; mov esi, dword ptr [rdi + 0x70] ; mov edi, 1 ; call 0xd63ec
000777d0: CLP; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 8 ; test rdx, rdx ; jle 0x7785c
read: r12 r13 rbp rbx rdi rdx rflags rsp 
00077880: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov r13, qword ptr [rdi + 8] ; mov rbx, qword ptr [rdi + 0x10] ; sub rbx, r13 ; cmp rbx, rdx ; jae 0x7790c
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00077990: CLP; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; push rbx ; cmp qword ptr [rdi + 0x38], 0 ; mov rbx, rdi ; je 0x77b64
read: r12 r13 r14 rbp rbx rdi rdx rflags rsi rsp 
00077ba0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test ecx, ecx ; je 0x77c3c
read: ecx rbp rbx rdi rflags rsp 
00077c90: CLP; push rbx ; mov rax, qword ptr [rdi + 8] ; mov rbx, rdi ; cmp rax, qword ptr [rdi + 0x10] ; jae 0x77cac
read: rax rbx rdi rflags rsp 
00077cf0: CLP; sub rsp, 8 ; test byte ptr [rdi + 0x74], 2 ; mov edi, dword ptr [rdi + 0x70] ; jne 0x77d0b
00077ee0: CLP; push rbp ; mov rbp, -1 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; or dword ptr [rdi], 0x240c ; mov qword ptr [rdi + 0x90], rbp ; call 0x78fac
read: rbp rbx rdi rip rsp 
00077f20: CLP; push r12 ; push rbp ; push rbx ; mov eax, dword ptr [rdi + 0x70] ; mov rbx, rdi ; cmp eax, -1 ; je 0x7803e
read: eax r12 rbp rbx rdi rflags rsp 
000780d0: CLP; push rbx ; cmp dword ptr [rdi + 0x70], -1 ; mov rbx, rdi ; je 0x7810a
read: rbx rdi rflags rsp 
00078160: CLP; push r12 ; xor eax, eax ; mov r12d, r8d ; push rbp ; push rbx ; mov rbx, rdi ; mov rdi, rsi ; test byte ptr [rbx + 0x74], 2 ; mov esi, edx ; mov edx, ecx ; jne 0x78210
read: eax ecx edx r12 r8d rbp rbx rdi rflags rsi rsp 
write: eax edx esi r12d rbx rdi rflags rsp 
00078230: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbx ; sub rsp, 0x38 ; cmp dword ptr [rdi + 0x70], -1 ; jne 0x782a4
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000786e0: CLP; push r12 ; cmp dword ptr [rdi + 0x70], -1 ; push rbp ; push rbx ; mov rbx, rdi ; jne 0x7874c
read: r12 rbp rbx rdi rflags rsp 
00078790: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; test al, 4 ; jne 0x789ac
read: al rbp rbx rdi rflags rsp 
00078a30: CLP; push r12 ; push rbp ; push rbx ; mov ecx, dword ptr [rdi] ; mov rbx, rdi ; test cl, 8 ; jne 0x78bac
read: cl r12 rbp rbx rdi rflags rsp 
00078d00: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; test byte ptr [rdi], 0x80 ; je 0x78ec9
read: rbp rbx rdi rflags rsp 
00078fb0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov eax, dword ptr [rdi] ; test al, 0x80 ; jne 0x79163
read: al rbp rbx rdi rflags rsp 
00079240: CLP; mov rdx, qword ptr [rdi + 0x60] ; mov rax, rsi ; sub rax, qword ptr [rdi + 0x18] ; test rdx, rdx ; je 0x79267
00079270: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; mov r14, r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; call 0x7923c
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
00079450: CLP; mov rax, qword ptr [rdi + 0x10] ; mov rdx, qword ptr [rdi + 0x58] ; and dword ptr [rdi], 0xfffffeff ; mov qword ptr [rdi + 0x10], rdx ; mov qword ptr [rdi + 0x58], rax ; mov rdx, qword ptr [rdi + 0x18] ; mov rax, qword ptr [rdi + 0x48] ; mov qword ptr [rdi + 0x48], rdx ; mov qword ptr [rdi + 0x18], rax ; mov qword ptr [rdi + 8], rax ; ret
00079480: CLP; mov rdx, qword ptr [rdi + 0x10] ; mov rax, qword ptr [rdi + 0x58] ; mov rcx, qword ptr [rdi + 0x48] ; or dword ptr [rdi], 0x100 ; mov qword ptr [rdi + 0x58], rdx ; mov rdx, qword ptr [rdi + 0x18] ; mov qword ptr [rdi + 0x10], rax ; mov qword ptr [rdi + 0x18], rcx ; mov qword ptr [rdi + 0x48], rdx ; mov qword ptr [rdi + 8], rax ; ret
000794b0: CLP; mov rax, qword ptr [rdi + 0x28] ; cmp rax, qword ptr [rdi + 0x20] ; push rbx ; mov rbx, rdi ; ja 0x794fc
read: rax rbx rdi rflags rsp 
00079520: CLP; push rbx ; test dword ptr [rdi], 0x100 ; mov rbx, rdi ; je 0x79535
read: rbx rdi rflags rsp 
00079560: CLP; sub rsp, 8 ; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jne 0x79578
00079590: CLP; push rbx ; mov eax, dword ptr [rdi + 0xc0] ; mov rbx, rdi ; test eax, eax ; jne 0x795f4
read: eax rbx rdi rflags rsp 
00079660: CLP; push rbx ; mov eax, dword ptr [rdi + 0xc0] ; mov rbx, rdi ; test eax, eax ; jne 0x796cc
read: eax rbx rdi rflags rsp 
00079750: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rdi, qword ptr [rdi + 0x38] ; mov eax, dword ptr [rbx] ; test rdi, rdi ; je 0x7976b
read: rbp rbx rdi rflags rsi rsp 
write: eax rbp rbx rdi rflags rsp 
000797e0: CLP; push rbx ; cmp qword ptr [rdi + 0x38], 0 ; mov rbx, rdi ; je 0x797f4
read: rbx rdi rflags rsp 
00079850: CLP; mov rax, qword ptr [rdi + 0xd8] ; push rbx ; mov rbx, rdi ; call qword ptr [rax + 0x20]
read: rbx rdi rsp 
00079950: CLP; sub rsp, 8 ; mov rax, qword ptr [rdi + 0xd8] ; call qword ptr [rax + 0x40]
00079970: CLP; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; nop dword ptr [rax + rax] ; mov rsi, qword ptr [rbx + 8] ; mov rdx, qword ptr [rbx + 0x10] ; cmp rsi, rdx ; jae 0x799dc
read: r12 r13 r14 rbp rbx rdi rdx rflags rsi rsp 
00079a20: CLP; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rax, qword ptr [rdi + 0xd8] ; mov rbx, rdi ; call qword ptr [rax + 0x60]
read: r12 rbp rbx rdi rdx rsi rsp 
00079ae0: CLP; sub rsp, 8 ; mov rax, qword ptr [rdi + 0xd8] ; mov ecx, edx ; xor edx, edx ; call qword ptr [rax + 0x48]
00079b00: CLP; push rbx ; xor r9d, r9d ; mov rbx, rdi ; mov r8d, 0xffffffff ; xor edi, edi ; mov ecx, 0x22 ; mov edx, 3 ; mov esi, 0x2000 ; call 0xe004c
read: edi r9d rbx rdi rip rsp 
00079b60: CLP; mov rax, qword ptr [rdi + 0x88] ; or esi, 0xfbad0000 ; xor ecx, ecx ; mov dword ptr [rdi], esi ; mov dword ptr [rdi + 0x74], 0 ; mov qword ptr [rdi + 0x38], 0 ; mov qword ptr [rdi + 0x40], 0 ; test rax, rax ; mov qword ptr [rdi + 0x18], 0 ; mov qword ptr [rdi + 8], 0 ; mov qword ptr [rdi + 0x10], 0 ; mov qword ptr [rdi + 0x20], 0 ; mov qword ptr [rdi + 0x28], 0 ; mov qword ptr [rdi + 0x30], 0 ; mov qword ptr [rdi + 0x68], 0
00079c10: CLP; push r13 ; mov r13, r8 ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rcx ; sub rsp, 8 ; call 0x79b5c
read: edx r12 r13 r8 rbp rbx rcx rdi rip rsp 
00079d00: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x38] ; test rdi, rdi ; je 0x79d12
read: rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
00079da0: CLP; push rbx ; mov rdx, qword ptr [rdi + 8] ; mov rbx, rdi ; cmp rdx, qword ptr [rdi + 0x18] ; jbe 0x79db4
read: rbx rdi rdx rflags rsp 
00079df0: CLP; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x18] ; push rbx ; mov rbx, rdi ; jbe 0x79e14
read: rax rbx rdi rflags rsp 
0007a5f0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov eax, dword ptr [rsi] ; mov qword ptr [rdi + 8], rsi ; test ah, 8 ; jne 0x7a63c
read: ah rbx rdi rflags rsi rsp 
0007a660: CLP; mov rax, qword ptr [rdi + 8] ; mov rdx, qword ptr [rax + 0x60] ; test rdx, rdx ; je 0x7a68c
0007a6b0: CLP; mov eax, dword ptr [rdi + 0x10] ; sub eax, dword ptr [rsi + 0x10] ; ret
0007a6c0: CLP; mov rax, qword ptr [rdi + 8] ; test rax, rax ; je 0x7a6ed
0007a700: CLP; push rbx ; mov eax, 0xffffffff ; sub rsp, 0x10 ; mov rbx, qword ptr [rsi + 8] ; cmp rbx, rdi ; jne 0x7a72d
read: rbx rdi rflags rsp 
0007a7a0: CLP; cmp qword ptr [rdi + 0x60], 0 ; je 0x7a7af
0007a7d0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 8] ; mov r13, qword ptr [rdi + 0x18] ; cmp rbp, r13 ; ja 0x7a83c
read: esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0007a990: CLP; mov rax, qword ptr [rdi + 0x68] ; ret
0007a9a0: CLP; mov rax, rdi ; ret
read: rdi 
0007aab0: CLP; mov rax, qword ptr [rdi + 0x28] ; mov rcx, qword ptr [rdi + 0x10] ; cmp rax, rcx ; jbe 0x7aac4
0007ab10: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov edx, dword ptr [rdi] ; cmp esi, -1 ; sete r13b ; test dl, 8 ; je 0x7ab4c
read: dl esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0007acc0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov rbp, qword ptr [rdi + 0x38] ; mov rax, qword ptr [rdi + 0x40] ; sub rax, rbp ; cmp rax, rsi ; jge 0x7adfc
read: r12 r13 r14 r15 rax rbp rbx rdi rflags rsi rsp 
0007ae70: CLP; sub rsp, 8 ; test byte ptr [rdi], 8 ; je 0x7ae82
0007aea0: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x38] ; test rdi, rdi ; je 0x7aebc
read: rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
0007aee0: CLP; push r13 ; mov r13, rcx ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test rdx, rdx ; jne 0x7af54
read: r12 r13 rbp rbx rcx rdi rdx rflags rsi rsp 
0007afb0: CLP; test edx, edx ; mov eax, 0xffffffff ; push rbx ; cmovns eax, edx ; mov rbx, rdi ; xor ecx, ecx ; movsxd rdx, eax ; call 0x7aedc
read: eax ecx edx rbx rdi rflags rip rsp 
0007afe0: CLP; mov rax, qword ptr [rdi + 0x10] ; cmp qword ptr [rdi + 0x28], rax ; cmovae rax, qword ptr [rdi + 0x28] ; sub rax, qword ptr [rdi + 0x18] ; ret
0007b000: CLP; push r14 ; test ecx, ecx ; push r13 ; mov r13d, edx ; push r12 ; mov r12, rsi ; push rbp ; mov ebp, ecx ; push rbx ; mov rbx, rdi ; jne 0x7b07c
read: ecx edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
0007b1b0: CLP; lea rcx, [rdi + 0x58] ; mov edx, 0x7f ; mov rax, rcx ; mov qword ptr [rax + 0x18], rax ; mov qword ptr [rax + 0x10], rax ; add rax, 0x10 ; sub edx, 1 ; jne 0x7b1bc
0007b400: CLP; test rdi, rdi ; mov rax, rdi ; je 0x7b473
read: rdi rflags 
0007b7a0: CLP; mov rax, qword ptr [rip + 0x2ed6b5] ; push r12 ; push rbp ; lea rbp, [rdi + rsi] ; mov rax, qword ptr [rax + 0x18] ; push rbx ; sub rax, 1 ; cmp rbp, 0x7fff ; jbe 0x7b8c4
0007b960: CLP; push r12 ; mov rax, qword ptr [rip + 0x2ed4f3] ; push rbp ; mov rax, qword ptr [rax + 0x18] ; push rbx ; mov rdx, qword ptr [rdi + 8] ; mov rbp, qword ptr [rdi] ; sub rax, 1 ; mov r12, rdx ; and r12, 0xfffffffffffffff8 ; and edx, 2 ; je 0x7ba4f
0007bb90: CLP; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov rcx, qword ptr [rsi] ; mov rax, qword ptr [rip + 0x2ed2b8] ; mov rbx, qword ptr [rcx + 8] ; mov r8, qword ptr [rax + 0x18] ; and rbx, 0xfffffffffffffff8 ; lea rax, [rbx - 0x21] ; cmp rax, rdi ; jbe 0x7bbca
read: r12 r13 rax rbp rbx rdi rflags rsp 
0007bd80: CLP; sub rsp, 8 ; mov rdx, qword ptr [rdi + 8] ; mov rax, rdi ; mov rsi, rdx ; and rsi, 0xfffffffffffffff8 ; and edx, 2 ; je 0x7bddd
read: edx rdi rdx rflags rsi rsp 
0007be20: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; cmp qword ptr [rip + 0x2efa23], 0 ; je 0x7c034
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0007c190: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x58] ; test rax, rax ; je 0x7c294
read: rax rbp rbx rdi rflags rsi rsp 
0007d050: CLP; test rdi, rdi ; je 0x7d08e
read: rdi rflags 
0007d0c0: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0x7d17f
read: rbx rdi rflags rsp 
0007e5e0: CLP; cmp rdi, -1 ; push rbx ; mov rbx, rdi ; je 0x7e6ac
read: rbx rdi rflags rsp 
0007e8f0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp rdi, 0x10 ; jbe 0x7ea34
read: rbp rbx rdi rflags rsi rsp 
0007f1c0: CLP; push r12 ; cmp qword ptr [rip + 0x2ec682], 0 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; je 0x7f2c4
read: r12 rbp rbx rdi rflags rsi rsp 
0007f600: CLP; lea rax, [rip + 0x2ea015] ; mov rdx, rdi ; cmp rdi, rax ; je 0x7f68c
read: rax rdi rflags 
0007f750: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2e977c] ; mov rax, qword ptr [rax] ; test rax, rax ; jne 0x7f8c0
read: rax rbp rbx rdi rflags rsp 
0007f900: CLP; mov rax, qword ptr [rip + 0x2e9475] ; push rbx ; mov rbx, rdi ; cmp qword ptr fs:[rax], -1 ; je 0x7f9a4
read: rbx rdi rflags rsp 
0007fc50: CLP; push r12 ; mov rax, qword ptr [rip + 0x2e9273] ; mov r12, rsi ; push rbp ; push rbx ; mov rax, qword ptr [rax] ; mov rbx, rdi ; test rax, rax ; jne 0x7fe91
read: r12 rax rbp rbx rdi rflags rsi rsp 
0007ff70: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rax, qword ptr [rip + 0x2e9049] ; mov rax, qword ptr [rax] ; test rax, rax ; jne 0x80217
read: r12 r13 r14 r15 rax rbp rbx rdi rflags rsi rsp 
00080270: CLP; push r13 ; mov rdx, rdi ; mov eax, 0xffffffff ; or rdx, rsi ; push r12 ; mov r12, rdi ; imul r12, rsi ; push rbp ; push rbx ; sub rsp, 8 ; cmp rdx, rax ; ja 0x80567
read: r12 r13 rax rbp rbx rdi rdx rflags rsi rsp 
000805d0: CLP; sub rsp, 8 ; test rdi, rdi ; je 0x8061c
read: rdi rflags rsp 
00080ee0: CLP; push r12 ; mov r8d, dword ptr [rip + 0x2e8237] ; mov dword ptr [rip + 0x2ea8f1], 1 ; push rbp ; test r8d, r8d ; push rbx ; mov rbx, rdi ; js 0x813ed
read: r12 r8d rbp rbx rdi rflags rsp 
00081440: CLP; sub rsp, 0x18 ; mov r9d, dword ptr [rip + 0x2e7cd5] ; mov rsi, rdi ; test r9d, r9d ; js 0x81474
read: r9d rdi rflags rsp 
00081520: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov r11d, dword ptr [rip + 0x2e7beb] ; mov qword ptr [rsp + 0x18], rdi ; test r11d, r11d ; js 0x817d5
read: r11d r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00081810: CLP; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x30 ; mov ebx, dword ptr [rip + 0x2e78fb] ; test ebx, ebx ; js 0x8192c
read: ebx r12 r13 r14 rbp rbx rdi rflags rsp 
00082210: CLP; push rbx ; mov rdx, qword ptr [rdi + 0x18] ; mov eax, 0xd8675309 ; add rdx, qword ptr [rdi + 0x10] ; xor rdx, qword ptr [rdi + 8] ; cmp rdx, rax ; je 0x82284
000824a0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov edi, dword ptr [rip + 0x2e93b5] ; test edi, edi ; jne 0x8257c
read: edi rbp rbx rdi rflags rsp 
000825e0: CLP; push r12 ; mov r9d, dword ptr [rip + 0x2e927b] ; mov r12, rsi ; push rbp ; test r9d, r9d ; push rbx ; mov rbx, rdi ; jne 0x8268c
read: r12 r9d rbp rbx rdi rflags rsi rsp 
000826e0: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; test rsi, rsi ; je 0x82914
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00082940: CLP; push rbx ; lea rax, [rip - 0x80c] ; sub rsp, 0x10 ; test rdi, rdi ; cmovne rax, rdi ; mov qword ptr [rip + 0x2e8f1a], rax ; mov eax, dword ptr [rip + 0x2e67c0] ; test eax, eax ; jle 0x8297c
read: eax rax rbx rdi rflags rsp 
00082a90: CLP; test rdi, rdi ; je 0x82afc
read: rdi rflags 
00082b10: CLP; push rbp ; test rdi, rdi ; mov rbp, rsp ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbx ; je 0x82bf9
read: r12 r13 r14 rbp rbx rdi rflags rsp 
00082c40: CLP; push r15 ; mov r15, rdi ; mov rdi, rdx ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; mov rsi, rsp ; call 0x82a8c
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r13 r15 rbx rdi rflags rsi rsp 
00082d60: CLP; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; mov rdi, rbx ; sub rsp, 0x20 ; mov rsi, rsp ; call 0x82a8c
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
write: r13 rbx rdi rflags rsi rsp 
00082e50: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; mov rdi, rdx ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; mov rsi, rsp ; call 0x82a8c
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r12 r13 rbx rdi rflags rsi rsp 
00083050: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; test rdi, rdi ; je 0x83119
read: r12 rbp rbx rdi rflags rsp 
00083420: CLP; lea rsi, [rip + 0xb29f8] ; lea rdi, [rip + 0xb157f] ; sub rsp, 8 ; mov edx, 5 ; call 0x2f4bc
write: edx rdi rflags rsi rsp 
00083470: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; test edx, edx ; je 0x834f4
read: edx r12 rbp rbx rdi rflags rsp 
00083530: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; test edx, edx ; je 0x835bc
read: edx r12 rbp rbx rdi rflags rsp 
00083600: CLP; push r13 ; movsxd rdx, esi ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rbp, qword ptr [rdi + 0x18] ; sub rbp, qword ptr [rdi + 0x10] ; mov r13, qword ptr [rdi + 8] ; mov rax, rbp ; add rdx, rbp ; sar rax, 3 ; add rdx, rax ; movsxd rax, dword ptr [rdi + 0x30]
read: esi r12 r13 rax rbp rbx rdi rdx rsp 
000837a0: CLP; mov rax, qword ptr [rdi + 8] ; test rax, rax ; je 0x837bf
000837e0: CLP; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rsi, qword ptr [rdi + 8] ; mov rbx, rdi ; test rsi, rsi ; jne 0x83813
read: r12 rbp rbx rdi rflags rsi rsp 
00083870: CLP; mov rdx, qword ptr [rdi + 8] ; xor eax, eax ; test rdx, rdx ; je 0x8388b
000838a0: CLP; mov rcx, rdi ; and ecx, 7 ; mov rax, rdi ; movabs r8, 0xfefefefefefefeff ; je 0x838cc
read: ecx rdi rflags 
00085110: CLP; mov rcx, rsi ; and ecx, 7 ; mov rdx, rdi ; je 0x85136
read: ecx rdi rflags rsi 
00085200: CLP; mov rdx, rdi ; mov r8, rdi ; sub rsp, 0x100 ; mov ecx, 0x20 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov rax, rsi ; nop word ptr cs:[rax + rax] ; mov cl, byte ptr [rax] ; test cl, cl ; je 0x8525a
read: cl eax rax rcx rdi rflags rsi rsp 
write: cl eax ecx r8 rax rcx rdi rdx rflags rsp 
000852b0: CLP; cmp rdi, rsi ; je 0x8539c
read: rdi rflags rsi 
000853f0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x856dc
read: rbp rbx rdi rip rsp 
00085440: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; call 0x858ac
read: rbp rbx rdi rip rsp 
000856e0: CLP; pxor xmm8, xmm8 ; pxor xmm9, xmm9 ; pxor xmm10, xmm10 ; pxor xmm11, xmm11 ; mov rax, rdi ; mov rcx, rdi ; and rcx, 0xfff ; cmp rcx, 0xfcf ; ja 0x8577c
read: rcx rdi rflags xmm10 xmm11 xmm8 xmm9 
00085ae0: CLP; mov rax, rdi ; mov r9, rdi ; jmp 0x85aef
read: rdi 
00087410: CLP; cmp rdx, 3 ; mov rax, rdi ; lea rcx, [rdi - 1] ; jbe 0x874ac
read: rdi rdx rflags 
00087520: CLP; movd xmm1, esi ; mov rax, rdi ; and eax, 0xfff ; punpcklbw xmm1, xmm1 ; cmp rax, 0xfc0 ; punpcklwd xmm1, xmm1 ; pshufd xmm1, xmm1, 0 ; ja 0x8774c
read: eax esi rax rdi rflags xmm1 
00087820: CLP; mov rdx, rdi ; mov r8, rdi ; sub rsp, 0x100 ; mov ecx, 0x20 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov rax, rsi ; nop word ptr cs:[rax + rax] ; mov cl, byte ptr [rax] ; test cl, cl ; je 0x8787a
read: cl eax rax rcx rdi rflags rsi rsp 
write: cl eax ecx r8 rax rcx rdi rdx rflags rsp 
00087bc0: CLP; mov rdx, rdi ; mov r8, rdi ; sub rsp, 0x100 ; mov ecx, 0x20 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov rax, rsi ; nop word ptr cs:[rax + rax] ; mov cl, byte ptr [rax] ; test cl, cl ; je 0x87c1a
read: cl eax rax rcx rdi rflags rsi rsp 
write: cl eax ecx r8 rax rcx rdi rdx rflags rsp 
00087da0: CLP; push r15 ; mov r15, rdi ; mov rdi, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rsi ; mov rsi, rcx ; push rbx ; mov rbx, rcx ; sub rsp, 0x868 ; mov qword ptr [rsp + 0x18], rdx ; lea rdx, [rsp + 0x58] ; call 0x87c6c
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
write: r15 rbp rbx rdi rdx rflags rsi rsp 
00088180: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x68 ; movzx eax, byte ptr [rdi] ; test al, al ; je 0x88612
read: al r12 r13 r14 r15 rbp rbx rdi rflags rsp 
00088650: CLP; mov r8, rdi ; sub rsp, 0x100 ; mov ecx, 0x20 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov rax, qword ptr [rip + 0x2e3315] ; mov rdx, r8 ; cmp rdx, 0 ; cmove rdx, rax ; test rdx, rdx ; je 0x88736
read: eax r8 rax rcx rdi rdx rflags rsp 
write: eax ecx r8 rax rcx rdi rdx rflags rsp 
00088750: CLP; mov r8, rdi ; sub rsp, 0x100 ; mov ecx, 0x20 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov r9, rdx ; mov rax, qword ptr [rdx] ; mov rdx, r8 ; cmp rdx, 0 ; cmove rdx, rax ; test rdx, rdx ; je 0x88831
read: eax r8 rax rcx rdi rdx rflags rsp 
write: eax ecx r8 r9 rax rcx rdi rdx rflags rsp 
00088870: CLP; movq xmm1, rsi ; mov rcx, rdi ; punpcklbw xmm1, xmm1 ; test rdx, rdx ; je 0x88bac
read: rdi rdx rflags rsi xmm1 
00088fc0: CLP; push r12 ; mov rcx, rdi ; mov rax, rdi ; sub rcx, rsi ; push rbp ; push rbx ; sub rsp, 0x10 ; cmp rcx, rdx ; jb 0x8908c
read: r12 rbp rbx rcx rdi rdx rflags rsi rsp 
00089170: CLP; mov rax, rdi ; mov rdx, rsi ; pxor xmm8, xmm8 ; jmp 0x891d8
read: rdi rsi xmm8 
000891c0: CLP; movd xmm8, esi ; mov rax, rdi ; punpcklbw xmm8, xmm8 ; punpcklwd xmm8, xmm8 ; pshufd xmm8, xmm8, 0 ; cmp rdx, 0x40 ; ja 0x8920c
read: esi rdi rdx rflags xmm8 
00089730: CLP; push r12 ; mov rax, rsi ; sub rax, rdi ; push rbp ; cmp rax, rdx ; push rbx ; jb 0x897e4
read: r12 rax rbp rbx rdi rdx rflags rsi rsp 
000898d0: CLP; mov edx, 0xffffffff ; bsf rax, rdi ; cmove rax, rdx ; add eax, 1 ; ret
read: eax rax rdi rdx rflags 
000898f0: CLP; mov rcx, rsi ; and ecx, 7 ; mov rdx, rdi ; je 0x89916
read: ecx rdi rflags rsi 
0008e3e0: CLP; cmp rdx, 0x20 ; mov rax, rdi ; jae 0x8e45c
read: rdi rdx rflags 
0008ee20: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi] ; test rbx, rbx ; je 0x8eeac
read: rbp rbx rdi rflags rsp 
0008f030: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; mov r13, rdi ; mov rdi, r15 ; push r12 ; mov r12, rsi ; mov rsi, rcx ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x868 ; lea rdx, [rsp + 0x58] ; call 0x8eebc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
write: r12 r13 r15 rbx rdi rdx rflags rsi rsp 
0008f490: CLP; push r15 ; mov r8, rsi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x68 ; movzx eax, byte ptr [rdi] ; test al, al ; je 0x8f96a
0008f9e0: CLP; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x10 ; mov eax, dword ptr [rip + 0x2dbff7] ; test eax, eax ; je 0x8fa74
read: eax r12 r13 r14 rbp rbx rdi rflags rsp 
0008fad0: CLP; test rsi, rsi ; mov rax, rdi ; lea rcx, [rdi + rsi] ; mov rdx, rdi ; je 0x8faf1
read: rdi rflags rsi 
0008fc30: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; mov r13, rsi ; mov rsi, rcx ; push r12 ; mov r12, rdi ; mov rdi, r15 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x838 ; lea rdx, [rsp + 0x28] ; call 0x8fafc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
write: r12 r13 r15 rbp rdi rdx rflags rsi rsp 
0008ff40: CLP; push r15 ; mov rax, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rcx ; sub rsp, 0x38 ; test rcx, rcx ; je 0x900e6
read: r12 r13 r14 r15 rbp rbx rcx rdi rflags rsp 
00090240: CLP; movq xmm1, rsi ; mov rcx, rdi ; punpcklbw xmm1, xmm1 ; punpcklbw xmm1, xmm1 ; and rcx, 0x3f ; pshufd xmm1, xmm1, 0 ; cmp rcx, 0x30 ; ja 0x9028c
read: rcx rdi rflags rsi xmm1 
00090670: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdi ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; add r12, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; mov rsi, r12
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: r12 r13 r14 r15 rbx rdi rflags rsi rsp 
000906e0: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; mov rdi, rdx ; push rbx ; mov rbx, rdx ; call 0x856dc
read: r12 rbp rbx rdi rdx rip rsi rsp 
write: r12 rbp rbx rdi rsp 
00090780: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 8 ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0x907cc
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
write: r12 r13 r14 rdi rflags rsp 
00090840: CLP; push r14 ; mov r14, rdx ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdi ; call 0x856dc
read: esi r12 r13 r14 rbp rbx rcx rdi rdx rip rsp 
00090a20: CLP; push r12 ; test rsi, rsi ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; je 0x90a64
read: r12 rbp rbx rdi rdx rflags rsi rsp 
00090a80: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; test rdx, rdx ; je 0x90b7c
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00090ba0: CLP; push r12 ; test rsi, rsi ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; jne 0x90bc3
read: edx r12 rbp rbx rdi rflags rsi rsp 
00090bf0: CLP; push r14 ; mov r14, rdi ; mov rdi, rdx ; push r13 ; push r12 ; mov r12d, ecx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdx ; call 0x856dc
read: ecx r12 r13 r14 rbp rbx rdi rdx rip rsi rsp 
write: r12d r14 rbp rbx rdi rsp 
00090cb0: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; add r13, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; lea rsi, [r13 + 1]
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: r12 r13 r14 r15 rbx rdi rflags rsi rsp 
00090d50: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; xor ebx, ebx ; sub rsp, 0x88 ; test rdx, rdx ; mov qword ptr [rsp + 0x50], rdi ; mov qword ptr [rsp + 0x58], rsi ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x38], r8 ; je 0x90f9a
read: ebx r12 r13 r14 r15 r8 rbp rbx rdi rdx rflags rsi rsp 
000911b0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; call 0x9109c
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rflags rsi rsp 
000911f0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; call 0x911ac
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
00091310: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x18 ; test rcx, rcx ; mov dword ptr [rsp + 0xc], r8d ; jne 0x9134b
read: r12 r13 r14 r15 r8d rbp rbx rcx rdi rdx rflags rsi rsp 
000913e0: CLP; push r14 ; mov r14, rdi ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; mov rbp, qword ptr [rsi] ; mov rbx, qword ptr [rdi] ; test rbp, rbp ; je 0x91459
read: r12 r13 r14 rbp rbx rdi rflags rsi rsp 
00091470: CLP; push rbx ; mov esi, 0x2f ; mov rbx, rdi ; call 0x8751c
read: rbx rdi rip rsp 
000914a0: CLP; push r15 ; push r14 ; push r13 ; xor r13d, r13d ; push r12 ; push rbp ; push rbx ; mov eax, dword ptr [rdi] ; mov qword ptr [rdi + 8], 0 ; mov r12, qword ptr [rdi + 0x30] ; mov qword ptr [rsp - 8], rdi ; mov rbx, qword ptr [rdi + 0x28] ; test eax, eax ; mov r14, qword ptr [rdi + 0x20] ; mov r10, qword ptr [rdi + 0x18]
read: eax r12 r13 r13d r14 r15 rbp rbx rdi rsp 
000915f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; mov qword ptr [rdi + 8], 0 ; mov r14, qword ptr [rbx + 0x48] ; mov qword ptr [rsp - 8], rdi ; mov qword ptr [rsp - 0x58], rdx ; mov edi, eax ; mov rdx, qword ptr [rbx + 0x18] ; mov dword ptr [rsp - 0xc], eax
read: eax r12 r13 r14 r15 rbp rbx rdi rdx rsp 
000919f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; mov ecx, dword ptr [rdi] ; mov ebx, dword ptr [rsp + 0x40] ; mov qword ptr [rdi + 8], 0 ; mov qword ptr [rsp - 0x50], rdx ; mov rdx, qword ptr [rdi + 0x30] ; test ecx, ecx ; mov qword ptr [rsp - 0x60], r8 ; mov qword ptr [rsp - 0x20], rdi
read: ecx r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsp 
00092120: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x158 ; mov rax, qword ptr [rdx + 0x18] ; mov qword ptr [rbp - 0x138], rdi ; mov qword ptr [rbp - 0x140], rsi ; mov r15d, dword ptr [rax + 0x40] ; mov edx, r15d ; test rdx, rdx ; mov qword ptr [rbp - 0x130], rdx
read: r12 r13 r14 r15 r15d rbp rbx rdi rdx rsi rsp 
00092920: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbx ; sub rsp, 0xa8 ; mov r13, qword ptr [rcx + 0x18] ; mov qword ptr [rbp - 0x90], rdi ; mov rdi, rsi ; mov qword ptr [rbp - 0x50], rdx ; mov eax, dword ptr [r13 + 0x40] ; mov rbx, rax
read: r12 r13 r14 r15 rax rbp rbx rdi rdx rsi rsp 
write: eax r12 r13 rbp rbx rdi rflags rsp 
00093700: CLP; movsx eax, byte ptr [rdi] ; test al, al ; je 0x93736
00093750: CLP; movsx eax, byte ptr [rdi] ; test al, al ; je 0x9378e
000937a0: CLP; movsx eax, byte ptr [rdi] ; test al, al ; je 0x937de
000937f0: CLP; movsx ecx, byte ptr [rdi] ; xor eax, eax ; cmp ecx, esi ; jne 0x9380a
00093870: CLP; movsx eax, byte ptr [rdi] ; test al, al ; jne 0x9388b
000938b0: CLP; movsx eax, byte ptr [rdi] ; test al, al ; je 0x938e8
00093900: CLP; test rdi, rdi ; mov rax, rdi ; mov r8d, esi ; je 0x9396c
read: esi rdi rflags 
00093990: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi] ; test rbx, rbx ; je 0x939c8
read: rbp rbx rdi rflags rsp 
000939e0: CLP; mov rax, qword ptr [rdi] ; mov r8d, esi ; mov r9d, edx ; test rax, rax ; je 0x93a2a
00093a50: CLP; mov rax, qword ptr [rdi] ; mov r8d, esi ; mov r9d, edx ; mov r10d, ecx ; test rax, rax ; je 0x93aa3
000947c0: CLP; cmp rdi, rsi ; je 0x947f4
read: rdi rflags rsi 
00094800: CLP; cmp rdi, rsi ; je 0x94844
read: rdi rflags rsi 
00094850: CLP; mov rax, rdi ; mov rdx, rdi ; jmp 0x9485f
read: rdi 
00094890: CLP; movq xmm1, rsi ; pxor xmm2, xmm2 ; mov rcx, rdi ; punpckldq xmm1, xmm1 ; punpckldq xmm1, xmm1 ; and rcx, 0x3f ; cmp rcx, 0x30 ; ja 0x948f6
read: rcx rdi rflags rsi xmm1 xmm2 
000956f0: CLP; mov rdx, rdi ; mov rax, rdi ; sub rdx, rsi ; sar rdx, 2 ; lea rcx, [rdx*4 - 4] ; nop dword ptr [rax] ; add rsi, 4 ; mov edx, dword ptr [rsi - 4] ; test edx, edx ; mov dword ptr [rsi + rcx], edx ; jne 0x9570c
read: edx rdi rdx rflags rsi 
00095720: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov esi, dword ptr [rdi] ; xor ebx, ebx ; test esi, esi ; jne 0x95748
read: ebx esi r12 rbp rbx rdi rflags rsi rsp 
00095770: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x957cc
read: rbp rbx rdi rip rsp 
000957d0: CLP; cmp dword ptr [rdi], 0 ; je 0x959ec
00095a70: CLP; mov rax, rdi ; mov r9, rdi ; jmp 0x95a7f
read: rdi 
00095c00: CLP; cmp rdx, 3 ; mov rax, rdi ; lea rcx, [rdi - 4] ; jbe 0x95c9c
read: rdi rdx rflags 
00095d00: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov esi, dword ptr [rdi] ; test esi, esi ; jne 0x95d26
read: esi rbp rbx rdi rflags rsi rsp 
00095d50: CLP; movq xmm1, rsi ; mov rcx, rdi ; punpckldq xmm1, xmm1 ; pxor xmm2, xmm2 ; punpckldq xmm1, xmm1 ; and rcx, 0x3f ; cmp rcx, 0x30 ; ja 0x95dcc
read: rcx rdi rflags rsi xmm1 xmm2 
00096070: CLP; mov r8d, dword ptr [rdi] ; test r8d, r8d ; je 0x960c5
000960e0: CLP; push r12 ; test rdi, rdi ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; je 0x9613c
read: r12 rbp rbx rdi rdx rflags rsi rsp 
00096180: CLP; mov edx, dword ptr [rsi] ; mov rax, rdi ; test edx, edx ; je 0x9621c
read: edx rdi rflags 
00096410: CLP; cmp rdx, 3 ; mov rax, rdi ; mov rcx, rdi ; jbe 0x96453
read: rdi rdx rflags 
00096480: CLP; sub rsi, rdi ; lea rax, [rdi - 4] ; sar rsi, 2 ; lea rcx, [rsi*4 + 4] ; nop word ptr [rax + rax] ; mov edx, dword ptr [rax + rcx] ; add rax, 4 ; test edx, edx ; mov dword ptr [rax], edx ; jne 0x9649c
read: edx rax rdi rflags rsi 
000965f0: CLP; push r12 ; lea edx, [rdi + 0x80] ; mov eax, 0xffffffff ; push rbp ; push rbx ; mov ebx, edi ; sub rsp, 0x70 ; cmp edx, 0x17f ; jbe 0x9661c
00096900: CLP; test rdi, rdi ; je 0x96914
read: rdi rflags 
00096920: CLP; lea rcx, [rip + 0x2d50c9] ; sub rsp, 8 ; test rdx, rdx ; cmovne rcx, rdx ; mov rdx, rsi ; mov rsi, rdi ; xor edi, edi ; call 0x9694c
read: edi rcx rdi rdx rflags rip rsi rsp 
00096950: CLP; push r14 ; lea rax, [rip + 0x2d509f] ; push r13 ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; add rsp, -0x80 ; test rdi, rdi ; lea rsi, [rsp + 0x20] ; mov dword ptr [rsp + 0x54], 0 ; mov dword ptr [rsp + 0x58], 1 ; mov dword ptr [rsp + 0x50], 1 ; mov qword ptr [rsp + 0x70], 0
read: r12 r13 r14 rbp rbx rdi rsi rsp 
00096b90: CLP; push r12 ; lea rax, [rip + 0x2d4e67] ; push rbp ; mov rbp, rdi ; push rbx ; add rsp, -0x80 ; test rdx, rdx ; cmovne rax, rdx ; test rdi, rdi ; mov dword ptr [rsp + 0x1c], esi ; mov dword ptr [rsp + 0x54], 0 ; mov dword ptr [rsp + 0x58], 1 ; mov dword ptr [rsp + 0x50], 1 ; mov qword ptr [rsp + 0x60], rax ; mov qword ptr [rsp + 0x70], 0
read: esi r12 rax rbp rbx rdi rdx rflags rsp 
00096de0: CLP; push r15 ; lea rax, [rip + 0x2d4c27] ; push r14 ; mov r14, rdx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x188 ; test rcx, rcx ; cmovne rax, rcx ; mov qword ptr [rsp + 0x70], 0 ; mov dword ptr [rsp + 0x54], 0
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rdx rflags rsi rsp 
000977b0: CLP; mov edx, dword ptr [rdi] ; mov rax, rdi ; test edx, edx ; je 0x977d2
read: edx rdi rflags 
000979c0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0x48 ; test ecx, ecx ; mov rax, qword ptr [r8 + 8] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x20], rsi ; jne 0x97d69
read: ecx edx r12 r13 r14 r15 r8 rbp rbx rdi rflags rsi rsp 
00097e90: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0x48 ; test ecx, ecx ; mov rax, qword ptr [r8 + 8] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x20], rsi ; jne 0x981d9
read: ecx edx r12 r13 r14 r15 r8 rbp rbx rdi rflags rsi rsp 
000985b0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x18] ; movzx eax, word ptr [rsp + 0x18] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
000989e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; sub rsp, 0x428 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x10], rsi ; jne 0x9a41f
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0009ac10: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x10] ; movzx eax, word ptr [rsp + 0x10] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
0009b010: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rcx ; push rbp ; push rbx ; sub rsp, 0x3628 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x10], rsi ; jne 0x9cc23
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0009d180: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; fnstcw word ptr [rsp + 0x1c] ; movzx eax, word ptr [rsp + 0x1c] ; and ax, 0xc00 ; cmp ax, 0x400
read: ax edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
0009d5a0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x108 ; test edx, edx ; mov rax, qword ptr [rcx + 8] ; mov qword ptr [rsp + 0x20], rdi ; mov qword ptr [rsp + 0x18], rsi ; jne 0x9f43e
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
0009f730: CLP; push r15 ; push r14 ; push r13 ; xor r13d, r13d ; push r12 ; push rbp ; push rbx ; mov eax, dword ptr [rdi] ; mov qword ptr [rdi + 8], 0 ; mov r12, qword ptr [rdi + 0x30] ; mov qword ptr [rsp - 8], rdi ; mov rbx, qword ptr [rdi + 0x28] ; test eax, eax ; mov r14, qword ptr [rdi + 0x20] ; mov r10, qword ptr [rdi + 0x18]
read: eax r12 r13 r13d r14 r15 rbp rbx rdi rsp 
0009f880: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; push rbx ; sub rsp, 0x58 ; mov ebx, dword ptr [rdi] ; mov qword ptr [rdi + 8], 0 ; mov qword ptr [rsp + 0x30], rcx ; mov qword ptr [rsp + 0x48], rdi ; mov dword ptr [rsp + 0x40], esi ; mov qword ptr [rsp], r8 ; mov ecx, ebx
read: ebx esi r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsp 
0009fbb0: CLP; push r15 ; mov rax, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x58 ; mov qword ptr [rdi + 8], 0 ; mov r15, qword ptr [rax + 0x20] ; mov dword ptr [rsp + 0x40], esi ; mov rsi, qword ptr [rax + 0x30] ; mov qword ptr [rsp + 0x28], rdi ; mov edi, dword ptr [rdi] ; mov qword ptr [rsp + 0x20], r9
read: esi r12 r13 r14 r15 r9 rbp rbx rdi rsp 
000a0120: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x148 ; mov rax, qword ptr [rdx + 0x18] ; mov qword ptr [rbp - 0x138], rdi ; mov qword ptr [rbp - 0x140], rsi ; mov r15d, dword ptr [rax + 0x40] ; mov ebx, r15d ; test rbx, rbx ; mov qword ptr [rbp - 0x130], rbx
read: r12 r13 r14 r15 r15d rbp rbx rdi rsi rsp 
000a08d0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rsi ; push r14 ; push r13 ; mov r13, rdi ; mov rdi, rsi ; push r12 ; mov r12, rdx ; push rbx ; sub rsp, 0x68 ; mov r14, qword ptr [rcx + 0x18] ; mov eax, dword ptr [r14 + 0x40] ; mov rbx, rax
read: r12 r13 r14 r15 rax rbp rbx rdi rdx rsi rsp 
write: eax r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000a1160: CLP; push r12 ; cmp rdi, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; jne 0xa1179
read: r12 rbp rbx rdi rflags rsi rsp 
000a11c0: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; cmp rdi, rsi ; je 0xa11dd
read: r12 r13 rbp rbx rdi rflags rsi rsp 
000a1240: CLP; push r13 ; mov r13, rdx ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; cmp rdi, rsi ; jne 0xa1261
read: r12 r13 rbp rbx rdi rdx rflags rsi rsp 
000a12c0: CLP; push r14 ; cmp rdi, rsi ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; je 0xa12de
read: r12 r13 r14 rbp rbx rdi rflags rsi rsp 
000a1340: CLP; push rbx ; mov rbx, qword ptr [rdi + 0x28] ; test rbx, rbx ; je 0xa1387
000a1400: CLP; push rbp ; mov rbp, rsp ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov edx, dword ptr [rip + 0x2cd356] ; test edx, edx ; jne 0xa1584
read: edx r12 r13 rbp rbx rdi rflags rsp 
000a1660: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2c774c] ; mov rax, qword ptr fs:[rax] ; mov rbp, qword ptr [rax] ; mov rax, qword ptr [rbp + 0x28] ; test rax, rax ; je 0xa16bd
read: rax rbp rbx rdi rflags rsp 
000a16f0: CLP; push rbp ; lea rdx, [rdi + 8] ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; lea rdi, [rip + 0x92ea7] ; sub rsp, 8 ; call 0xa138c
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rdx rflags rsp 
000a1770: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x198 ; mov rbx, qword ptr [r8] ; mov qword ptr [rsp + 0x80], 0 ; mov qword ptr [rsp + 0x20], rsi ; mov rsi, rdx ; mov qword ptr [rsp + 0x18], rdi ; mov dword ptr [rsp + 0x64], 0 ; mov rax, qword ptr [rbx + 0x28] ; mov dword ptr [rsp + 0x68], 1
read: r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
000a1d20: CLP; push r12 ; mov r10, qword ptr [rip + 0x2c728b] ; mov rdx, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [r10] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0xa1da4
read: eax r12 rbp rbx rdi rflags rsi rsp 
write: eax r10 rbp rbx rdi rdx rflags rsp 
000a1e90: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0xd0 ; test al, al ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x48], r9 ; je 0xa1eea
read: al r8 r9 rbx rcx rdi rdx rflags rsp 
000a2060: CLP; push rbp ; mov r10, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; and eax, 0x8000 ; jne 0xa20d2
read: eax rbp rbx rdi rflags rsi rsp 
000a2250: CLP; push r13 ; lea r8, [rip + 0x2c5d43] ; mov r13, rdi ; push r12 ; mov r12, rdx ; xor edx, edx ; push rbp ; mov rbp, rsi ; mov esi, 0x8000 ; push rbx ; sub rsp, 0x248 ; lea rcx, [rsp + 0xf0] ; mov rdi, rsp ; mov qword ptr [rsp + 0x88], 0 ; call 0x79c0c
read: edx r12 r13 rbp rbx rdi rdx rip rsi rsp 
write: edx esi r12 r13 r8 rbp rcx rdi rflags rsp 
000a22f0: CLP; push r15 ; lea rax, [rip + 0x2c972f] ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x88 ; test rcx, rcx ; cmove rbx, rax ; mov eax, dword ptr [rbx] ; test eax, eax ; js 0xa247c
read: eax r12 r13 r14 r15 rax rbp rbx rcx rdi rflags rsp 
000a25c0: CLP; push r14 ; movabs rcx, 0x1845c8a0ce512957 ; push r13 ; push r12 ; push rbp ; mov rbp, rdx ; push rbx ; mov rdi, qword ptr [rdi] ; mov rax, rdi ; imul rcx ; mov rax, rdi ; sar rax, 0x3f ; mov rcx, rdx ; sar rcx, 0xd ; sub rcx, rax
read: r12 r13 r14 rax rbp rbx rcx rdi rdx rsp 
write: rax rbp rcx rdi rdx rflags rsp 
000a29c0: CLP; test rdi, rdi ; je 0xa2a9c
read: rdi rflags 
000a2bd0: CLP; mov qword ptr [rsp - 0x18], rdi ; fild qword ptr [rsp - 0x18] ; mov qword ptr [rsp - 0x18], rsi ; fild qword ptr [rsp - 0x18] ; fsubp st(1) ; fstp qword ptr [rsp - 0x10] ; movsd xmm0, qword ptr [rsp - 0x10] ; ret
read: rdi rsi st1 
000a2c90: CLP; push r12 ; xor eax, eax ; mov r10d, 0x51eb851f ; movsxd r12, edx ; movsxd r8, r8d ; movsxd rcx, ecx ; push rbp ; mov rbp, rdi ; sar rbp, 2 ; push rbx ; add ebp, 0x1db ; mov ebx, r9d ; test dil, 3 ; sete al ; sar ebx, 2
read: dil eax ebp ebx ecx edx r12 r8d r9d rbp rbx rdi rflags rsp 
000a2db0: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; mov r13, rdi ; push r12 ; mov r12, rsi ; mov rsi, rdx ; mov rdi, r12 ; push rbp ; push rbx ; sub rsp, 8 ; call r13
read: r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
write: r12 r13 r14 rdi rflags rsi rsp 
000a2f40: CLP; push r15 ; mov ecx, 0x2aaaaaab ; xor r8d, r8d ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x138 ; mov eax, dword ptr [rdi] ; mov qword ptr [rsp + 0x38], rsi ; mov esi, dword ptr [r13 + 0x10] ; mov qword ptr [rsp + 0x68], rdx ; mov dword ptr [rsp + 0x5c], eax
read: eax r12 r13 r14 r15 r8d rbp rbx rdi rdx rsi rsp 
000a3460: CLP; push rbx ; mov rbx, rdi ; call 0xa46dc
read: rbx rdi rip rsp 
000a3640: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0xd0 ; test rdi, rdi ; je 0xa376c
read: rbx rdi rflags rsi rsp 
000a3ad0: CLP; push rbp ; xor ecx, ecx ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2c8015] ; cmp rax, qword ptr [rip + 0x2c803e] ; mov rdx, qword ptr [rip + 0x2c53d7] ; mov rdi, qword ptr [rip + 0x2c7fe8] ; mov rbp, qword ptr [rip + 0x2c8011] ; setne cl ; neg rax ; mov dword ptr [rdx], ecx ; mov rdx, qword ptr [rip + 0x2c5342] ; mov qword ptr [rdx], rax ; mov rax, qword ptr [rip + 0x2c5330]
write: cl ecx rax rbp rdi rdx rflags rsp 
000a3b60: CLP; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; call 0x856dc
read: r12 r13 r14 rbp rbx rdi rip rsp 
000a3c30: CLP; push rbp ; xor eax, eax ; mov ecx, 0xc ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; lea r13, [rip + 0x2c7e91] ; push r12 ; mov rdi, r13 ; lea r12, [rbp - 0x3c] ; push rbx ; sub rsp, 0x68 ; rep stosq qword ptr [rdi], rax
read: eax r12 r13 r14 r15 rax rbp rbx rcx rdi rflags rsp 
write: eax ecx r12 r13 r15 rbp rcx rdi rflags rsp 
000a4620: CLP; push r12 ; mov r12, rdi ; lea rdi, [rip + 0x2c74b0] ; push rbp ; mov ebp, edx ; push rbx ; mov eax, dword ptr [rsi + 0x14] ; mov rbx, rsi ; lea esi, [rax + 0x76c] ; call 0xa37ec
read: edx r12 rbp rbx rdi rip rsi rsp 
write: eax ebp esi r12 rbx rdi rsp 
000a47b0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x10 ; test rdi, rdi ; je 0xa498c
read: r12 rbp rbx rdi rflags rsp 
000a49b0: CLP; mov rdx, qword ptr [rip + 0x2c71b5] ; lea rcx, [rdx + rdi] ; nop ; cmp byte ptr [rdx], 0 ; mov rax, rdx ; je 0xa49eb
000a4a00: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x118 ; test rdi, rdi ; mov r12d, dword ptr [rip + 0x2c9b1e] ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x48], 0 ; mov dword ptr [rip + 0x2c9b01], 0 ; je 0xa4d3c
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000a5830: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; mov qword ptr [rsp + 8], rcx ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
000a59f0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; push rbx ; sub rsp, 0x28 ; test esi, esi ; mov qword ptr [rsp + 0x18], rdi ; je 0xa5c0c
read: esi r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsp 
000a6100: CLP; test rdi, rdi ; je 0xa612c
read: rdi rflags 
000a61a0: CLP; lea rdx, [rip + 0x2c5a05] ; lea rsi, [rip - 0x35b2] ; sub rsp, 8 ; mov dword ptr [rdi + 0x20], 0 ; call 0xa2f3c
000a61d0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; lea rdi, [rsp + 0x10] ; mov rsi, rsp ; call 0x1f38c
read: rbx rdi rip rsp 
write: rbx rdi rflags rsi rsp 
000a6270: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14d, 1 ; push r13 ; push r12 ; mov r12, rdi ; lea rdi, [rip + 0x8fe7f] ; push rbx ; mov rbx, rsi ; sub rsp, 0x148 ; call 0x3819c
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
write: r12 r14d rbp rbx rdi rflags rsp 
000a6920: CLP; movsxd r9, dword ptr [rdi + 0x10] ; mov eax, dword ptr [rdi + 0x14] ; xor edx, edx ; mov esi, 0x51eb851f ; push rbx ; lea ecx, [rax + 0x76c] ; cmp r9d, 1 ; setle dl ; sub ecx, edx ; lea r11d, [rcx + 3] ; test ecx, ecx ; cmovns r11d, ecx ; sub eax, 0x46 ; imul eax, eax, 0x16d ; mov r8d, r11d
000a6a00: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0xc8 ; mov rax, qword ptr [r8 + 0x10] ; test rcx, rcx ; mov qword ptr [rsp + 0x68], rdi ; mov qword ptr [rsp], rax
read: r12 r13 r14 r15 r8 rax rbp rbx rcx rdi rdx rsi rsp 
000a9c40: CLP; push r15 ; mov r11, rdi ; mov r10, rsi ; push r14 ; push r13 ; push r12 ; mov r12, r9 ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0xd8 ; mov rdi, qword ptr [r9 + 0x10] ; mov rax, qword ptr [rcx + 0x30] ; mov qword ptr [rsp + 0x20], rcx ; mov qword ptr [rsp + 0x38], r8
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
write: r10 r11 r12 rax rbx rdi rflags rsp 
000abc10: CLP; push r13 ; mov r13, rsi ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; sub rsp, 8 ; test rdx, rdx ; je 0xabc47
read: r12 r13 rbp rbx rcx rdi rdx rflags rsi rsp 
000abc60: CLP; push rbp ; mov r11, rdx ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0x118 ; mov edi, dword ptr [rcx + 8] ; mov qword ptr [rbp - 0xd8], rsi ; mov rax, qword ptr [rcx + 0x30] ; mov rsi, qword ptr [r9 + 0x10] ; mov qword ptr [rbp - 0xe8], rcx
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
000adf80: CLP; push r14 ; mov ecx, dword ptr [rip + 0x2c07e4] ; push r13 ; test ecx, ecx ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; jne 0xae01c
read: ecx r12 r13 r14 rbp rbx rdi rflags rsp 
000ae1f0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rax, qword ptr [rsi + 0x28] ; test rax, rax ; je 0xae29c
read: rax rbx rdi rflags rsp 
000ae3e0: CLP; push r12 ; push rbp ; push rbx ; mov r12, qword ptr [rdi + 0x28] ; mov rbx, rdi ; test r12, r12 ; je 0xae461
read: r12 rbp rbx rdi rflags rsp 
000ae750: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov rax, qword ptr [rdi] ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp], rax ; mov rax, qword ptr [rsi + 0x350] ; mov r13d, dword ptr [rax] ; test r13d, r13d ; je 0xae8a6
read: r12 r13 r13d r14 r15 rax rbp rbx rdi rflags rsi rsp 
000ae8c0: CLP; push rbx ; mov rbx, qword ptr [rdi + 0x28] ; test rbx, rbx ; je 0xae90c
000ae920: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0xd0 ; mov rdi, rsp ; mov dword ptr [rsp], 0 ; call 0xe39ec
read: rbx rdi rip rsp 
write: rbx rdi rflags rsp 
000ae970: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0xd0 ; mov rdi, rsp ; mov dword ptr [rsp], 0 ; call 0xe39ec
read: rbx rdi rip rsp 
write: rbx rdi rflags rsp 
000aeb60: CLP; sub rsp, 8 ; mov rsi, rdi ; mov edi, 0xffffff9c ; call 0xaeb0c
read: rdi rip rsp 
000aeb80: CLP; test rdi, rdi ; je 0xaeba4
read: rdi rflags 
000aebc0: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov r12, qword ptr [rip + 0x2ba289] ; mov r13d, dword ptr fs:[r12] ; cmp dword ptr [rip + 0x2bfb89], 0 ; je 0xaebf2
read: eax r12 r13 rbp rbx rdi rflags rsp 
000aecd0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; mov esi, 1 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rax, qword ptr [rip + 0x2ba174] ; mov qword ptr [rsp], rdx ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rsp + 0xc], eax ; xor eax, eax
read: eax r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
000aee70: CLP; push rbx ; mov esi, 1 ; mov rbx, rdi ; xor eax, eax ; cmp dword ptr [rip + 0x2bf8ee], 0 ; je 0xaee8d
read: eax rbx rdi rflags rsp 
000aef20: CLP; push rbp ; xor eax, eax ; mov rbp, rsi ; mov esi, 1 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp dword ptr [rip + 0x2bf836], 0 ; je 0xaef45
read: eax rbp rbx rdi rflags rsi rsp 
000aefd0: CLP; mov rax, qword ptr [rdi + 0x20] ; ret
000aefe0: CLP; sub rsp, 8 ; mov r8, rcx ; mov rcx, rdx ; mov rdx, rsi ; mov rsi, rdi ; mov edi, 0xffffff9c ; call 0xaf20c
read: rcx rdi rdx rip rsi rsp 
000af010: CLP; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; add rsi, 0x13 ; add rdi, 0x13 ; call 0x850dc
read: rdi rip rsi rsp 
write: rdi rflags rsi rsp 
000af040: CLP; sub rsp, 8 ; mov rsi, qword ptr [rsi] ; mov rdi, qword ptr [rdi] ; add rsi, 0x13 ; add rdi, 0x13 ; call 0x852ac
read: rdi rip rsi rsp 
write: rdi rflags rsi rsp 
000af070: CLP; push r14 ; movsxd rdi, edi ; mov eax, 0x4e ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; syscall ; cmp rax, -0x1000 ; ja 0xaf0e6
write: eax rbx rdi rflags rsp 
000af100: CLP; mov eax, dword ptr [rdi] ; ret
000af1b0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; xor ebx, ebx ; cmp qword ptr [rdi + 0x10], 0 ; mov r12, qword ptr [rdi + 8] ; je 0xaf1e3
read: ebx r12 rbp rbx rdi rflags rsp 
000af440: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; lea rbp, [rsp + 0x20] ; mov rsi, rbp ; call 0x6c5bc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
000af640: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, r9 ; push r13 ; push r12 ; mov r12, rdi ; mov edi, 0x45 ; push rbx ; mov rbx, rsi ; sub rsp, 0x78 ; mov dword ptr [rbp - 0x74], edx ; mov qword ptr [rbp - 0x80], rcx ; mov qword ptr [rbp - 0x88], r8
read: edx r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp 
000af9b0: CLP; push r15 ; mov r15, rcx ; push r14 ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov ebp, esi ; push rbx ; sub rsp, 0x48 ; mov eax, dword ptr [rip + 0x2befa0] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x20], r8 ; cmp eax, 0 ; jle 0xafc24
read: eax esi r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsp 
000afca0: CLP; push r13 ; mov eax, 1 ; mov r13d, esi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rcx ; sub rsp, 0x18 ; mov edx, dword ptr [rcx] ; test edx, edx ; cmovg eax, dword ptr [rcx] ; cdqe ; lea rdi, [rax*4]
read: eax edx esi r12 r13 rbp rbx rcx rdi rdx rflags rsp 
write: eax edx r12 r13d rax rbp rbx rdi rflags rsp 
000afd60: CLP; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rdi ; mov edi, 3 ; push rbx ; sub rsp, 0x18 ; call 0xb4c0c
read: esi r12 r13 rbp rbx rdi rip rsp 
000b0150: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x2be605], 0 ; je 0xb0179
read: eax r12 r13 rbp rbx rdi rflags rsp 
000b02f0: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; test rdi, rdi ; je 0xb0529
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000b0720: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x2be034], 0 ; je 0xb074a
read: eax rbx rcx rdi rflags rsi rsp 
000b0ad0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; mov eax, dword ptr [rip + 0x2bde7c] ; mov qword ptr [rsp + 0x18], r8 ; cmp eax, 0 ; jle 0xb0cac
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000b0d70: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rdx ; push r13 ; lea r13, [rdx + rcx] ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, r8 ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; cmp rdx, rdi ; ja 0xb0d9f
read: r12 r13 r14 r15 r8 rbp rbx rdi rdx rflags rsi rsp 
000b1060: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; mov qword ptr [rsp], rsi ; and eax, 0x8000 ; jne 0xb10e1
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000b12f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; lea rbp, [rsp + 0x20] ; mov rsi, rbp ; call 0x6c5bc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
000b15d0: CLP; test rdi, rdi ; je 0xb16cc
read: rdi rflags 
000b17d0: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x2bcf85], 0 ; je 0xb17f9
read: eax r12 r13 rbp rbx rdi rflags rsp 
000b1cd0: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x2bca84], 0 ; je 0xb1cfa
read: eax rbx rcx rdi rflags rsi rsp 
000b1de0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; mov eax, dword ptr [rip + 0x2bcb4c] ; mov qword ptr [rsp + 0x18], r8 ; cmp eax, 0 ; jle 0xb1fbc
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000b2320: CLP; push r12 ; push rbp ; mov rbp, rsi ; mov esi, 0xa ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; call 0x83a5c
read: r12 rbp rbx rdi rip rsi rsp 
000b25e0: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; mov qword ptr [rsp], rsi ; and eax, 0x8000 ; jne 0xb2661
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000b2880: CLP; mov ecx, 0x64 ; mov rsi, rdi ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rdx, rax ; jbe 0xb289d
read: ecx rax rdi rflags 
000b28e0: CLP; mov r8d, dword ptr [rip + 0x2bbe89] ; mov rsi, rdi ; test r8d, r8d ; jne 0xb291c
read: r8d rdi rflags 
000b2a30: CLP; sub rsp, 8 ; mov rcx, rdx ; mov edx, esi ; mov rsi, rdi ; mov edi, 0xffffffff ; call 0xb2a5c
read: esi rdi rdx rip rsp 
000b3150: CLP; pop rdi ; mov esi, dword ptr fs:[0x2d4] ; mov ecx, 0x80000000 ; mov edx, esi ; neg edx ; cmove edx, ecx ; mov dword ptr fs:[0x2d4], edx ; mov eax, 0x3a ; syscall ; push rdi ; test rax, rax ; je 0xb3182
read: ecx edx esi rax rdi rflags rsp 
write: eax ecx edx esi rdi rflags rsp 
000b3330: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x2068 ; test rsi, rsi ; lea rax, [rsp + 0x20a0] ; mov qword ptr [rsp + 0x2040], rdx ; mov qword ptr [rsp + 0x2048], rcx ; mov qword ptr [rsp + 0x2050], r8 ; mov qword ptr [rsp + 0x2058], r9 ; mov qword ptr [rsp + 0x20], rax
read: r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp 
000b34f0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x2068 ; test rsi, rsi ; lea rax, [rsp + 0x20a0] ; mov qword ptr [rsp + 0x2040], rdx ; mov qword ptr [rsp + 0x2048], rcx ; mov qword ptr [rsp + 0x2050], r8 ; mov qword ptr [rsp + 0x2058], r9 ; mov qword ptr [rsp + 0x20], rax
read: r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp 
000b36c0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x2068 ; test rsi, rsi ; lea rax, [rsp + 0x20a0] ; mov qword ptr [rsp + 0x2040], rdx ; mov qword ptr [rsp + 0x2048], rcx ; mov qword ptr [rsp + 0x2050], r8 ; mov qword ptr [rsp + 0x2058], r9 ; mov qword ptr [rsp + 0x20], rax
read: r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp 
000b3860: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x58 ; cmp byte ptr [rdi], 0 ; je 0xb38cc
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000b4230: CLP; push rbp ; mov rbp, rsp ; push r14 ; lea rdx, [rbp - 0x1540] ; push r13 ; push r12 ; push rbx ; sub rsp, 0x1590 ; test rdi, rdi ; je 0xb438c
read: r12 r13 r14 rbp rbx rdi rflags rsp 
000b4880: CLP; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x90 ; cmp esi, 6 ; je 0xb495c
read: esi r12 rbp rbx rdi rflags rsp 
000b4b10: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; lea rdi, [rip + 0x817af] ; push r13 ; push r12 ; push rbx ; sub rsp, 0x98 ; mov rax, qword ptr [rip + 0x2b432f] ; mov r13d, dword ptr fs:[rax] ; call 0x3898c
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
write: r13d r14 rax rbp rdi rflags rsp 
000b5800: CLP; xor eax, eax ; and esi, 0x40 ; nop dword ptr [rax] ; movzx edx, byte ptr [rdi] ; test dl, dl ; je 0xb583d
000b5890: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp], rdx ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
000b59b0: CLP; mov rdi, qword ptr [rdi] ; mov rsi, qword ptr [rsi] ; cmp rdi, rsi ; je 0xb59dc
read: rdi rflags rsi 
write: rdi rflags rsi 
000b5a00: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 8] ; test rdi, rdi ; je 0xb5a4f
read: rbp rbx rdi rflags rsp 
write: rbp rdi rflags rsp 
000b5a60: CLP; movzx edx, byte ptr [rdi] ; xor eax, eax ; test dl, dl ; je 0xb5ad5
000b5ae0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rcx ; push r13 ; mov r13, r9 ; push r12 ; mov r12d, edx ; mov r15d, r12d ; push rbx ; mov rbx, rdi ; sub rsp, 0x448 ; mov qword ptr [rbp - 0x400], rdi ; mov rdi, rsi
read: edx r12 r12d r13 r14 r15 r9 rbp rbx rcx rdi rsi rsp 
write: r12d r13 r14 r15d rbp rbx rdi rflags rsp 
000b6340: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; mov r12, rcx ; push rbx ; sub rsp, 0x208 ; test rdi, rdi ; mov qword ptr [rbp - 0x1a8], rdx ; sete dl ; test rcx, rcx ; sete al
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsp 
000b81f0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov edx, dword ptr [rbx + 4] ; test edx, edx ; je 0xb8234
read: edx rbp rbx rdi rflags rsp 
000b8300: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; movzx edx, byte ptr [rbx + 1] ; test dl, dl ; je 0xb834c
read: dl rbp rbx rdi rflags rsp 
000b8420: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; mov edi, r8d ; push r13 ; mov r13, rsi ; mov esi, r8d ; mov r15, r13 ; push r12 ; push rbx ; mov rbx, r14 ; sub rsp, 0x28f8 ; mov rax, qword ptr [rip + 0x2b096f]
read: r12 r13 r14 r15 r8d rbp rbx rdi rsi rsp 
000b9c30: CLP; push r15 ; mov r11, rsi ; mov esi, r8d ; push r14 ; mov r14, rdi ; mov edi, r8d ; push r13 ; mov r13d, ecx ; push r12 ; push rbp ; push rbx ; sub rsp, 0x8d8 ; mov rax, qword ptr [rip + 0x2af165] ; mov qword ptr [rsp + 8], rdx ; mov dword ptr [rsp + 0x14], r8d
read: ecx r12 r13 r14 r15 r8d rbp rbx rdi rdx rsi rsp 
000bb2d0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13d, edx ; push r12 ; push rbx ; sub rsp, 0x58 ; mov rax, qword ptr [rip + 0x2adad1] ; mov qword ptr [rbp - 0x48], rdi ; mov qword ptr [rbp - 0x50], rsi ; mov rax, qword ptr fs:[rax] ; mov rax, qword ptr [rax] ; cmp dword ptr [rax + 0xa8], 1
read: edx r12 r13 r14 r15 rbp rbx rdi rsi rsp 
000bb670: CLP; mov r8d, dword ptr [rdi + 0x34] ; cmp dword ptr [rdi + 0x40], r8d ; cmovle r8d, dword ptr [rdi + 0x40] ; mov eax, dword ptr [rdi + 0x2c] ; cmp r8d, eax ; jle 0xbb6b7
000bb820: CLP; push r15 ; movsxd r10, ecx ; shl r10, 4 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; mov r15, qword ptr [rdi + 0x70] ; mov qword ptr [rsp], rdi ; mov dword ptr [rsp + 0xc], esi ; mov dword ptr [rsp + 0x34], ecx ; mov dword ptr [rsp + 8], r8d ; add r10, qword ptr [r15 + 0x30]
read: ecx esi r10 r12 r13 r14 r15 r8d rbp rbx rdi rsp 
000bba40: CLP; movsxd rsi, esi ; mov rax, qword ptr [rdi + 0xa0] ; lea rsi, [rsi + rsi*4] ; lea rax, [rax + rsi*4] ; mov esi, dword ptr [rax + 8] ; cmp esi, r8d ; jg 0xbbaa4
000bbab0: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; jmp 0xbbac7
read: r12 rbp rbx rdi rdx rsi rsp 
000bbb20: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; jmp 0xbbb37
read: r12 rbp rbx rdi rdx rsi rsp 
000bbb90: CLP; push r12 ; push rbp ; mov ebp, esi ; push rbx ; cmp dword ptr [rdi + 0x68], 1 ; mov rbx, rdi ; jle 0xbbbf0
read: esi r12 rbp rbx rdi rflags rsp 
000bbc30: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; movsxd rdx, dword ptr [rdi + 4] ; cmp dword ptr [rdi], edx ; je 0xbbc5c
read: edx esi rbp rbx rdi rflags rsp 
000bbc90: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; movzx ebp, dl ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov rax, qword ptr [rdi + 0x10] ; mov rcx, qword ptr [rdi + 8] ; cmp rax, rcx ; jae 0xbbd83
read: dl r12 r13 r14 r15 rax rbp rbx rcx rdi rflags rsi rsp 
000bbe70: CLP; push r13 ; mov r13d, edx ; push r12 ; mov r12d, esi ; push rbp ; movsxd rbp, esi ; shl rbp, 4 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi] ; mov rsi, qword ptr [rax + rbp] ; mov rdx, qword ptr [rax + rbp + 8] ; call 0xbbc8c
read: edx esi r12 r13 rbp rbx rdi rip rsp 
000bbf20: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov dword ptr [rdi], 1 ; mov dword ptr [rdi + 4], 1 ; mov edi, 4 ; call 0x1f3cc
read: esi rbp rbx rdi rip rsp 
000bbf70: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; mov r13d, edx ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 8 ; mov r15d, dword ptr [rsi + 0xc] ; mov dword ptr [rbp], edx ; mov dword ptr [rsi + 0x1c], 0 ; movsxd rdi, r15d ; mov dword ptr [rsi + 0x18], r15d
read: edx r12 r13 r14 r15 r15d rbp rbx rdi rsi rsp 
write: r13d r14 r15d rbp rdi rflags rsp 
000bc080: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; xor ebp, ebp ; push rbx ; xor ebx, ebx ; sub rsp, 0x28 ; mov r8d, dword ptr [rsi + 4] ; mov r14, qword ptr [rdi + 0x70] ; test r8d, r8d ; jg 0xbc0be
read: ebp ebx r12 r13 r14 r15 r8d rbp rbx rdi rflags rsi rsp 
000bc430: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; cmp dword ptr [rdi + 0x68], 0x10 ; jg 0xbc577
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000bc620: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x78 ; cmp dword ptr [rdi + 0x68], 0x10 ; jg 0xbc9c3
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000bcc60: CLP; mov r9d, dword ptr [rdi + 0x34] ; cmp dword ptr [rdi + 0x40], r9d ; cmovle r9d, dword ptr [rdi + 0x40] ; mov eax, dword ptr [rdi + 0x2c] ; cmp r9d, eax ; jle 0xbcce6
000bcd00: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi + 0x34] ; cmp eax, 0x7fffffe ; ja 0xbcdd1
read: eax rbx rdi rflags rsp 
000bcde0: CLP; push r12 ; push rbp ; mov ebp, esi ; push rbx ; mov eax, dword ptr [rdi + 0x34] ; mov rbx, rdi ; movsxd r12, dword ptr [rdi + 0x90] ; cmp eax, esi ; jg 0xbce1c
read: eax esi r12 rbp rbx rdi rflags rsp 
000bce80: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; test esi, esi ; js 0xbcee4
read: esi rbp rbx rdi rflags rsp 
000bcf70: CLP; movsxd rax, edx ; mov r8d, edx ; mov rdx, qword ptr [rdi + 8] ; push rbx ; movzx ecx, byte ptr [rdx + rax] ; movzx eax, byte ptr [rsi + 8] ; cmp al, 3 ; je 0xbd054
000bd0a0: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi] ; call 0x1f46c
read: rbx rdi rip rsp 
write: rbx rdi rsp 
000bd110: CLP; sub rsp, 8 ; mov eax, dword ptr [rdi + 8] ; and eax, 0x400ff ; cmp eax, 6 ; je 0xbd144
000bd160: CLP; lea rdi, [rsi + 0x28] ; sub rsp, 8 ; call 0xbd10c
write: rdi rflags rsp 
000bd180: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x20] ; call 0x1f46c
read: rbx rdi rip rsp 
write: rbx rdi rsp 
000bd200: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x10] ; call 0x1f46c
read: rbx rdi rip rsp 
write: rbx rdi rsp 
000bd250: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rdi] ; test rax, rax ; je 0xbd2a0
read: r12 r13 r14 r15 rax rbp rbx rdi rflags rsp 
000bd430: CLP; push r15 ; mov r15, rdi ; push r14 ; xor r14d, r14d ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov r13d, dword ptr [rdi + 0xac] ; mov dword ptr [rsp + 0xc], 0 ; test r13d, r13d ; jle 0xbd501
read: r12 r13 r13d r14 r14d r15 rbp rbx rdi rflags rsp 
000bd530: CLP; push r12 ; test rdi, rdi ; push rbp ; mov rbp, rdi ; push rbx ; je 0xbd58b
read: r12 rbp rbx rdi rflags rsp 
000bd5a0: CLP; push r15 ; push r14 ; push r13 ; mov r13d, edx ; push r12 ; mov r12d, esi ; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 0x58 ; sub ebp, dword ptr [rdi + 0x28] ; js 0xbd777
read: ebp edx esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000bdc40: CLP; mov edx, dword ptr [rdi + 4] ; xor eax, eax ; cmp edx, dword ptr [rsi + 4] ; je 0xbdc4c
000bdec0: CLP; push r15 ; mov r15, rsi ; push r14 ; lea r14, [rdi + 0xa0] ; push r13 ; mov rsi, r14 ; mov r13d, ecx ; push r12 ; mov r12d, r9d ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x28 ; mov ebp, dword ptr [rdi + 0x94] ; mov rax, qword ptr [rdi + 0x70]
read: ecx r12 r13 r14 r15 r9d rbp rbx rdi rsi rsp 
000bdff0: CLP; push r14 ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; cmp dword ptr [rsi + 0x68], 1 ; mov ebp, dword ptr [rsi + 0x38] ; mov rdi, qword ptr [rsi + 0x10] ; mov r11d, dword ptr [rsi + 0x2c] ; je 0xbe07c
read: r12 r13 r14 rbp rbx rdi rdx rflags rsp 
write: ebp r11d r12 rbx rdi rflags rsp 
000be310: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; movsxd rax, dword ptr [rsi] ; cmp eax, 0xf ; je 0xbe388
read: eax rbx rdi rflags rsp 
000be3e0: CLP; push r14 ; push r13 ; lea r13, [rsi + 0x70] ; push r12 ; lea r12, [rsi + 0x80] ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rbp, qword ptr [rdi] ; lea r14, [rsp + 8] ; jmp 0xbe413
read: r12 r13 r14 rbp rbx rdi rsp 
000be4a0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; test byte ptr [rsi + 0x38], 0x10 ; mov r13, qword ptr [rsi] ; mov qword ptr [rsp + 8], rdi ; mov r10, qword ptr [rdx + 8] ; je 0xbe5ec
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
000be6c0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov rdx, qword ptr [rsi + 8] ; mov dword ptr [rsp + 0xc], 0 ; test rdx, rdx ; je 0xbe6e3
read: rbp rbx rdi rdx rflags rsi rsp 
000be750: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; test eax, eax ; je 0xbe784
read: eax esi rbp rbx rdi rflags rsp 
000be870: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, edx ; push rbp ; mov ebp, r8d ; push rbx ; mov ebx, esi ; sub rsp, 0x18 ; mov dword ptr [rsp + 0xc], ecx ; nop dword ptr [rax] ; mov rax, qword ptr [r13] ; movsxd r14, ebx
read: ebx ecx edx esi r12 r13 r14 r15 r8d rbp rbx rdi rsp 
000beb40: CLP; push r15 ; mov r15d, edx ; push r14 ; lea r14, [rsi + 8] ; push r13 ; mov r13d, r8d ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov dword ptr [rsp + 0xc], ecx ; jmp 0xbeb73
read: ecx edx r12 r13 r14 r15 r8d rbp rbx rdi rsi rsp 
000bee50: CLP; push r15 ; mov r15, rsi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; movsxd rbx, edx ; shl rbx, 4 ; sub rsp, 0x48 ; mov rbp, rbx ; add rbp, qword ptr [rsi + 0x28] ; mov qword ptr [rsp + 0x10], rdi ; mov dword ptr [rsp + 0x18], edx ; mov dword ptr [rsp + 0x1c], ecx
read: ecx edx r12 r13 r14 r15 rbp rbx rdi rsi rsp 
000bf0d0: CLP; push r15 ; mov r15, rsi ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; mov ebp, edx ; push rbx ; mov ebx, ecx ; sub rsp, 0x28 ; mov r12d, dword ptr [rsi + 4] ; mov dword ptr [rsp + 0x14], 0 ; movsxd rdi, r12d ; mov dword ptr [rsp + 0x10], r12d
read: ecx edx r12 r12d r13 r14 r15 rbp rbx rdi rsi rsp 
write: ebp ebx r12d r14 r15 rdi rflags rsp 
000bf230: CLP; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; movsxd rdi, dword ptr [rsi + 4] ; mov dword ptr [rbx + 4], edi ; movsxd r12, dword ptr [rsi + 4] ; test r12d, r12d ; jle 0xbf284
read: edi r12 r12d rbp rbx rdi rflags rsi rsp 
write: r12 rbp rbx rdi rflags rsp 
000bf2b0: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 8 ; test rsi, rsi ; je 0xbf39c
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000bf480: CLP; push r15 ; push r14 ; mov r14, rdx ; mov edx, ecx ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; mov ecx, dword ptr [r14 + 4] ; mov qword ptr [rsp + 0x20], rdi ; test ecx, ecx ; je 0xbf797
read: ecx r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
000bf7e0: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov edx, dword ptr [rdx + 4] ; mov qword ptr [rsp + 8], rdi ; cmp edx, 0 ; je 0xbf9e8
read: edx r12 r13 r14 r15 rbp rbx rdi rdx rflags rsp 
000bfaf0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rsi ; lea rsi, [rdi + 0xa0] ; push rbx ; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x70] ; mov edi, dword ptr [rdi + 0x94] ; mov dword ptr [rsp + 0x38], ecx ; mov dword ptr [rsp + 0x3c], r8d
read: ecx edx r12 r13 r14 r15 r8d rbp rbx rdi rsi rsp 
000bffb0: CLP; push r15 ; movsxd r15, esi ; shl r15, 4 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; add r15, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x38], 0 ; mov dword ptr [rsp], esi ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x20], rcx
000c01f0: CLP; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov edx, dword ptr [rdi + 0x78] ; mov ebx, esi ; mov esi, ecx ; call 0xbce7c
read: ecx esi r12 rbp rbx rdi rdx rip rsp 
000c02a0: CLP; push r12 ; push rbp ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; lea ebp, [rax - 1] ; test ebp, ebp ; mov dword ptr [rdi], ebp ; js 0xc031b
read: ebp r12 rbp rbx rdi rflags rsp 
000c0340: CLP; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, r9 ; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; test qword ptr [rsp + 0x40], 0x400000 ; je 0xc0381
read: r12 r13 r14 r9 rbp rbx rcx rdi rflags rsi rsp 
000c0b60: CLP; push r15 ; mov r15, rsi ; mov esi, 1 ; push r14 ; push r13 ; mov r13d, r8d ; push r12 ; mov r12, rdi ; mov edi, 0x20 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x58 ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x18], r9
read: r12 r13 r14 r15 r8d r9 rbp rbx rcx rdi rdx rsi rsp 
000c0da0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; xor r14d, r14d ; push r13 ; mov r13, rcx ; push r12 ; push rbx ; sub rsp, 0x158 ; mov r12, qword ptr [rdi] ; mov qword ptr [rbp - 0x158], rdi ; mov qword ptr [rbp - 0x148], rsi ; mov qword ptr [rbp - 0x150], rdx ; cmp dword ptr [r12 + 0xa4], 1
read: r12 r13 r14 r14d r15 rbp rbx rcx rdi rdx rsi rsp 
000c1420: CLP; push r15 ; movsxd rdx, edx ; shl rdx, 4 ; push r14 ; push r13 ; lea r13, [rdi + rdx] ; push r12 ; push rbp ; push rbx ; sub rsp, 0x58 ; movzx edi, byte ptr [r13 + 8] ; cmp dil, 7 ; je 0xc1e35
000c1f30: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, edx ; push rbp ; push rbx ; mov ebx, ecx ; sub rsp, 0xa8 ; mov rax, qword ptr [rdi + 0x70] ; movsxd rbp, dword ptr [rsi + 4] ; mov dword ptr [rsp + 0x78], 0 ; mov qword ptr [rsp + 0x58], rsi ; mov dword ptr [rsp + 0x6c], r8d
read: ecx edx r12 r13 r14 r15 r8d rbp rbx rdi rsi rsp 
000c2660: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rsi ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xa8 ; mov rax, qword ptr [rdi] ; test r8d, r8d ; mov qword ptr [rbp - 0xa0], rdx ; mov qword ptr [rbp - 0x70], rcx ; mov dword ptr [rbp - 0x40], 0 ; mov dword ptr [rbp - 0x3c], 2
000c2e80: CLP; push r15 ; mov r9d, r8d ; push r14 ; mov r14, rsi ; lea rsi, [rdx + 8] ; push r13 ; mov r13d, ecx ; push r12 ; mov r12d, r8d ; mov r8d, r13d ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0x18
read: ecx r12 r13 r13d r14 r15 r8d rbp rbx rdi rdx rsi rsp 
000c3040: CLP; push r15 ; mov rax, rsi ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0xc8 ; mov ebx, dword ptr [rax + 4] ; mov qword ptr [rsp + 0x58], rsi ; mov rsi, qword ptr [rdi + 0x70] ; test ebx, ebx ; mov qword ptr [rsp + 0x60], rsi ; mov esi, dword ptr [rdi + 0x38]
read: ebx r12 r13 r14 r15 rbp rbx rdi rsi rsp 
000c3900: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; mov r13d, dword ptr [rsi + 0x38] ; cmp r13d, dword ptr [rsi + 0x90] ; mov qword ptr [rsp], rdi ; mov rbp, qword ptr [rsi + 0x70] ; movsxd r12, r13d ; jle 0xc3964
read: r12 r13 r13d r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000c3ae0: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x68 ; mov eax, dword ptr [rsi + 0x14] ; mov esi, dword ptr [rsi + 0x10] ; lea rbx, [rsp + 0x50] ; mov qword ptr [rsp + 0x10], rdi ; mov rdi, rbx ; mov r15d, eax
read: eax r12 r13 r14 r15 rbp rbx rdi rsi rsp 
write: eax esi r14 r15d rbp rbx rdi rflags rsp 
000c3e20: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov ebp, r9d ; push rbx ; mov ebx, ecx ; mov ecx, 0x18 ; sub rsp, 0x1d8 ; mov rax, qword ptr [rdi] ; mov qword ptr [rsp + 0x80], rsi ; mov rsi, rdi ; lea r14, [rsp + 0x110] ; mov r15, qword ptr [rsi + 0x20]
read: ecx r12 r13 r14 r15 r9d rbp rbx rdi rsi rsp 
000c5590: CLP; push r15 ; mov rax, rdi ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0xb8 ; mov rax, qword ptr [rax + 0x88] ; mov r10, qword ptr [rdi + 0x70] ; mov qword ptr [rsp + 0x38], rdi ; movsxd rdi, edx ; mov dword ptr [rsp + 4], edx
read: edx r12 r13 r14 r15 rbp rbx rcx rdi rsi rsp 
write: r10 r14 rax rbx rdi rflags rsp 
000c5d90: CLP; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x20 ; movsxd rax, dword ptr [rsi + 0x38] ; cmp dword ptr [rsi + 0x48], eax ; jle 0xc5e5c
read: eax r12 r13 r14 rbp rbx rdi rflags rsi rsp 
000c64b0: CLP; push r14 ; mov r14, rdx ; push r13 ; mov r13d, 0xffffffff ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; mov ebx, dword ptr [rdi + 0x38] ; jmp 0xc64d2
read: r12 r13 r14 rbp rbx rdi rdx rsi rsp 
000c6560: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 0x158 ; movzx eax, byte ptr [rdx + 8] ; mov qword ptr [rsp + 0x50], rcx ; mov rcx, qword ptr [rsi] ; mov qword ptr [rsp + 0x48], rdi ; mov qword ptr [rsp + 0x28], rdx ; mov qword ptr [rsp + 0x58], r9 ; cmp al, 0x24
read: al r12 r13 r14 r15 r9 rbp rbx rcx rdi rdx rsi rsp 
000c8430: CLP; push r15 ; mov r15, rcx ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12d, r8d ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, r9 ; sub rsp, 0x48 ; mov r11, qword ptr [rsi] ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp + 0x10], r11
read: r11 r12 r13 r14 r15 r8d r9 rbp rbx rcx rdi rdx rsi rsp 
000c85e0: CLP; push r15 ; mov r15, r9 ; push r14 ; mov r14d, r8d ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; sub rsp, 0x48 ; mov r13, qword ptr [rsi] ; mov qword ptr [rsp + 0x28], rsi ; mov qword ptr [rsp + 0x20], rcx ; call 0xc842c
read: r12 r13 r14 r15 r8d r9 rbp rbx rcx rdi rdx rip rsi rsp 
000c8750: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0xe8 ; movzx eax, byte ptr [rdi + 0x38] ; mov qword ptr [rdi + 0x18], rcx ; mov qword ptr [rsp + 0x20], rdi ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x28], rcx ; mov dword ptr [rsp + 0x4c], 0 ; mov qword ptr [rdi + 0x10], 0
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
000c9670: CLP; sub rsp, 8 ; mov rax, qword ptr [rip + 0x29f931] ; mov r9, rdi ; mov rdi, rdx ; mov rcx, qword ptr [rax] ; movzx eax, byte ptr [rdx + 0x38] ; mov r8, rcx ; shr r8, 0x19 ; and eax, 0xffffffef ; and r8d, 1 ; shl r8d, 4 ; or eax, r8d ; or eax, 0xffffff80 ; mov byte ptr [rdx + 0x38], al ; mov rdx, rsi
read: al eax r8 r8d rcx rdi rdx rsi rsp 
write: eax r8 r8d r9 rax rcx rdi rdx rflags rsp 
000c96f0: CLP; mov rdx, qword ptr [rip + 0x29f8b5] ; mov rax, qword ptr [rdx] ; mov qword ptr [rdx], rdi ; ret
read: rdi 
000c9710: CLP; push r12 ; mov esi, 0x100 ; push rbp ; push rbx ; mov r12, qword ptr [rdi + 0x20] ; mov rbx, rdi ; mov rbp, qword ptr [rdi] ; test r12b, 1 ; mov rdi, r12 ; jne 0xc980c
read: r12 r12b rbp rbx rdi rflags rsp 
write: esi r12 rbp rbx rdi rflags rsp 
000c9870: CLP; push r15 ; mov r15d, ecx ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; cmp ecx, edx ; mov r12, qword ptr [rdi] ; mov qword ptr [rsp + 0x18], rsi ; mov r13, qword ptr [rsp + 0x80] ; jg 0xc9bff
read: ecx edx r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
000c9e60: CLP; push r14 ; mov eax, edx ; mov r14, rsi ; and eax, 1 ; push r13 ; mov r13d, edx ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; cmp eax, 1 ; mov qword ptr [rdi], 0 ; sbb r12, r12 ; mov qword ptr [rdi + 8], 0
read: eax edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
000ca030: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0xca045
read: rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
000ca090: CLP; push r12 ; test rdi, rdi ; push rbp ; push rbx ; mov rbx, rdi ; je 0xca15c
read: r12 rbp rbx rdi rflags rsp 
000ca1e0: CLP; push r14 ; mov eax, 2 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x30 ; test r8d, 0xfffffff8 ; mov rbx, qword ptr [rdi] ; je 0xca214
read: r12 r13 r14 r8d rbp rbx rdi rflags rsp 
000ca470: CLP; mov rsi, rdi ; lea rdi, [rip + 0x2a1a62] ; sub rsp, 8 ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; call 0xca1dc
read: ecx edx r8d rdi rip rsp 
write: ecx edx r8d rdi rflags rsi rsp 
000cabd0: CLP; push r15 ; mov r9d, dword ptr [rsi + 0x34] ; push r14 ; push r13 ; mov r13d, dword ptr [rsi + 0x30] ; push r12 ; mov r12d, dword ptr [rsi] ; mov r10d, r13d ; push rbp ; movsxd rbp, r9d ; mov r11d, r12d ; push rbx ; lea rbx, [rdi + 8] ; nop word ptr cs:[rax + rax] ; cmp r9d, r10d
000cc270: CLP; mov r9, rsi ; mov ecx, 0xcc ; mov esi, 0x7fffffff ; cmp r9, 0x7fffffff ; mov r10, rdx ; movsxd rdi, edi ; cmovbe rsi, r9 ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov r8, rax ; ja 0xcc2c7
write: eax ecx esi r10 r8 r9 rdi rflags rsi 
000cc460: CLP; mov edx, dword ptr [rsi + 0x10] ; cmp dword ptr [rdi + 0x10], edx ; mov eax, 1 ; jb 0xcc475
000cc480: CLP; mov eax, dword ptr [rsi + 4] ; xor edx, edx ; cmp dword ptr [rdi + 4], eax ; mov eax, 0xffffffff ; setne dl ; cmovbe eax, edx ; ret
000cc4a0: CLP; sub rsp, 8 ; add rsi, 8 ; add rdi, 8 ; mov edx, 0x10 ; call 0x88bbc
read: rdi rip rsi rsp 
write: edx rdi rflags rsi rsp 
000cc4d0: CLP; movzx ecx, word ptr [rdi] ; cmp cx, 2 ; je 0xcc4e3
000cc5b0: CLP; push r15 ; lea rsi, [rip + 0x67f3b] ; lea rdi, [rip + 0x6a02f] ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x128 ; mov qword ptr [rsp + 0x48], 0 ; mov qword ptr [rsp + 0x50], 0 ; mov byte ptr [rsp + 0x46], 0 ; mov qword ptr [rsp + 0x58], 0 ; mov qword ptr [rsp + 0x60], 0 ; mov byte ptr [rsp + 0x47], 0
write: rdi rflags rsi rsp 
000cd290: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rcx ; lea rax, [rbp - 0x58] ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdi ; push r12 ; lea r12, [rsi + 0xa] ; push rbx ; mov ebx, 0x400 ; sub rsp, 0x58 ; mov qword ptr [rbp - 0x68], rax
read: r12 r13 r14 r15 rax rbp rbx rcx rdi rsi rsp 
000cd380: CLP; push rbp ; lea rax, [rip + 0x29ec14] ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; push rbx ; mov rbx, rdx ; sub rsp, 0x118 ; mov qword ptr [rbp - 0x78], rcx ; mov rcx, qword ptr [rdx + 8] ; mov qword ptr [rbp - 0xa0], rdi ; mov qword ptr [rbp - 0xa8], r8
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp 
000cfa70: CLP; movzx edx, word ptr [rdi] ; cmp dx, 0xa ; je 0xcfac4
000cfb30: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; mov r13, qword ptr [rdi] ; mov rbp, qword ptr [rsi] ; mov rbx, qword ptr [rdx] ; lea r8, [r13 + r13*2] ; lea rax, [rbp + rbp*2] ; shl r8, 4 ; shl rax, 4 ; lea r15, [rbx + r8]
000d01a0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test rdi, rdi ; jne 0xd01b7
read: rbp rbx rdi rflags rsp 
000d01f0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbx ; sub rsp, 0x178 ; test rdi, rdi ; mov qword ptr [rbp - 0x198], rcx ; mov qword ptr [rbp - 0x128], 0 ; je 0xd0bbc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000d0f10: CLP; push r12 ; test rsi, rsi ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; je 0xd0f74
read: r12 rbp rbx rdi rflags rsi rsp 
000d0fd0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rsi, qword ptr [rsi] ; cmp rsi, qword ptr [rdx] ; je 0xd100c
read: rbp rbx rdi rflags rsi rsp 
000d1080: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rax, qword ptr [r8] ; movsx ecx, byte ptr [rcx + rax + 1] ; lea rdi, [rax + 1] ; mov eax, 5 ; test cl, cl ; je 0xd10c6
read: cl rbx rdi rflags rsp 
write: eax ecx rax rbx rdi rflags rsp 
000d10f0: CLP; push r14 ; mov r14, rdx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, r8 ; mov r8, qword ptr [r8] ; movzx r9d, byte ptr [rcx + r8 + 1] ; lea rdx, [r8 + 1] ; cmp r9b, 0x22 ; je 0xd11ac
read: r12 r13 r14 r8 r9b rbp rbx rcx rdi rdx rflags rsi rsp 
000d11e0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, r8 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rsi] ; mov rax, qword ptr [rdx] ; lea r8, [rdi + r8] ; cmp r8, rax ; jbe 0xd1274
read: r12 r13 r8 rax rbp rbx rcx rdi rflags rsi rsp 
write: r12 r13 r8 rax rbp rbx rdi rflags rsp 
000d12c0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x1a8 ; test rdi, rdi ; mov qword ptr [rsp + 0x30], rdi ; mov qword ptr [rsp + 0x18], rdx ; mov qword ptr [rsp + 0x20], rcx ; mov dword ptr [rsp + 0x40], r8d ; mov qword ptr [rsp + 0x28], r9 ; mov dword ptr [rsp + 0x5c], 0 ; je 0xd1301
read: r12 r13 r14 r15 r8d r9 rbp rbx rcx rdi rdx rflags rsp 
000d1a70: CLP; push r15 ; push r14 ; mov r14, r8 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x58 ; mov qword ptr [rsp + 0x20], rdx ; mov rdx, qword ptr [r8] ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x40], 0 ; mov qword ptr [rsp + 0x38], 0
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp 
000d1c30: CLP; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x18 ; call 0xd1e6c
read: r12 r13 rbp rbx rdi rip rsi rsp 
000d1d60: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x28 ; lea rbp, [rsp + 8] ; mov qword ptr [rsp + 8], rdi ; lea r12, [rsp + 0x18] ; mov rdi, rbp ; call 0xd1c2c
read: r12 r13 rbp rbx rdi rip rsi rsp 
write: r12 rbp rbx rdi rflags rsp 
000d1e70: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0xd1ec4
read: r12 rbp rbx rdi rflags rsi rsp 
write: r12 rbp rdi rflags rsp 
000d1fe0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x78 ; mov rax, qword ptr [rsi] ; mov qword ptr [rbp - 0x78], rdi ; mov qword ptr [rbp - 0x88], rsi ; mov qword ptr [rbp - 0x90], rdx ; mov qword ptr [rbp - 0x80], r8 ; test rax, rax ; je 0xd2062
read: r12 r13 r14 r15 r8 rax rbp rbx rdi rdx rflags rsi rsp 
000d2430: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x88 ; mov qword ptr [rsp + 0x38], rdx ; mov rdx, qword ptr [r8] ; mov qword ptr [rsp + 0x28], rdi ; mov qword ptr [rsp + 0x30], rsi ; mov dword ptr [rsp + 0x24], r9d ; mov qword ptr [rsp + 0x48], 0
read: r12 r13 r14 r15 r8 r9d rbp rbx rcx rdi rdx rsi rsp 
000d2850: CLP; push r15 ; push r14 ; mov r14, r8 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x108 ; mov rbp, qword ptr [r8] ; mov qword ptr [rsp + 0x28], rdx ; mov qword ptr [rsp + 0x30], rdi ; mov qword ptr [rsp + 0x20], rsi ; mov dword ptr [rsp + 0x38], r9d ; lea rdx, [rbp + 1]
read: r12 r13 r14 r15 r8 r9d rbp rbx rcx rdi rdx rsi rsp 
000d4390: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; test rdi, rdi ; je 0xd43e9
read: rbp rbx rdi rflags rsp 
000d4400: CLP; push r15 ; mov rax, rsi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x138 ; mov qword ptr [rsp + 0x28], rsi ; mov rsi, qword ptr [rsi] ; mov dword ptr [rsp + 0x80], edx ; and edx, 8 ; mov qword ptr [rsp + 0xb0], 0 ; mov qword ptr [rsp + 0xa8], 0
read: edx r12 r13 r14 r15 rbp rbx rdi rsi rsp 
000d52c0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov eax, dword ptr [rdi] ; mov rdi, qword ptr [rdi + 8] ; lea ebp, [rax + 8] ; movsxd rsi, ebp ; shl rsi, 5 ; call 0x1f3ac
read: ebp rbp rbx rdi rip rsi rsp 
write: eax ebp rbx rdi rflags rsi rsp 
000d53a0: CLP; push r12 ; mov r12, rdi ; push rbp ; xor ebp, ebp ; push rbx ; mov eax, dword ptr [rdi + 4] ; xor ebx, ebx ; mov rdi, qword ptr [rdi + 8] ; test eax, eax ; jg 0xd53ca
read: eax ebp ebx r12 rbp rbx rdi rflags rsp 
write: eax ebp ebx r12 rdi rflags rsp 
000d5410: CLP; push rbp ; mov rbp, rdi ; mov edi, 4 ; push rbx ; mov ebx, esi ; sub rsp, 8 ; call 0xb4c0c
read: esi rbp rbx rdi rip rsp 
000d54a0: CLP; push r15 ; push r14 ; mov r14d, ecx ; push r13 ; mov r13d, r8d ; push r12 ; mov r12, rdi ; mov edi, 4 ; push rbp ; mov rbp, rdx ; push rbx ; mov ebx, esi ; sub rsp, 8 ; call 0xb4c0c
read: ecx esi r12 r13 r14 r15 r8d rbp rbx rdi rdx rip rsp 
000d5580: CLP; push r12 ; mov r12, rdi ; mov edi, 4 ; push rbp ; mov ebp, edx ; push rbx ; mov ebx, esi ; call 0xb4c0c
read: edx esi r12 rbp rbx rdi rip rsp 
000d56b0: CLP; mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsi], rdx ; mov rdx, qword ptr [rdi + 0x10] ; mov qword ptr [rsi + 8], rdx ; mov rdx, qword ptr [rdi + 0x18] ; mov qword ptr [rsi + 0x10], rdx ; mov rdx, qword ptr [rdi + 0x20] ; mov qword ptr [rsi + 0x18], rdx ; mov rdx, qword ptr [rdi + 0x28] ; mov qword ptr [rsi + 0x20], rdx ; mov rdx, qword ptr [rdi + 0x30] ; mov qword ptr [rsi + 0x28], rdx ; mov rdx, qword ptr [rdi + 0x38] ; mov qword ptr [rsi + 0x30], rdx ; mov rdx, qword ptr [rdi + 0x40]
000d5740: CLP; mov rdx, qword ptr [rsi] ; xor eax, eax ; mov qword ptr [rdi + 8], rdx ; mov rdx, qword ptr [rsi + 8] ; mov qword ptr [rdi + 0x10], rdx ; mov rdx, qword ptr [rsi + 0x10] ; mov qword ptr [rdi + 0x18], rdx ; mov rdx, qword ptr [rsi + 0x18] ; mov qword ptr [rdi + 0x20], rdx ; mov rdx, qword ptr [rsi + 0x20] ; mov qword ptr [rdi + 0x28], rdx ; mov rdx, qword ptr [rsi + 0x28] ; mov qword ptr [rdi + 0x30], rdx ; mov rdx, qword ptr [rsi + 0x30] ; mov qword ptr [rdi + 0x38], rdx
000d57d0: CLP; movzx eax, word ptr [rdi] ; mov word ptr [rsi], ax ; xor eax, eax ; ret
000d5800: CLP; mov eax, dword ptr [rdi + 4] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
000d5810: CLP; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
000d5910: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xf8 ; test rcx, rcx ; mov qword ptr [rbp - 0x120], rdi ; mov qword ptr [rbp - 0x118], rsi ; mov qword ptr [rbp - 0x100], rdx ; mov qword ptr [rbp - 0x108], rcx ; mov qword ptr [rbp - 0xe8], r8 ; mov qword ptr [rbp - 0xf0], r9
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
000d5f60: CLP; mov rdx, qword ptr [rdi + 0x88] ; mov qword ptr [rsi], rdx ; mov rdx, qword ptr [rdi + 0x90] ; mov qword ptr [rsi + 8], rdx ; mov rdx, qword ptr [rdi + 0x98] ; mov qword ptr [rsi + 0x10], rdx ; mov rdx, qword ptr [rdi + 0xa0] ; mov qword ptr [rsi + 0x18], rdx ; mov rdx, qword ptr [rdi + 0xa8] ; mov qword ptr [rsi + 0x20], rdx ; mov rdx, qword ptr [rdi + 0xb0] ; mov qword ptr [rsi + 0x28], rdx ; mov rdx, qword ptr [rdi + 0xb8] ; mov qword ptr [rsi + 0x30], rdx ; mov rdx, qword ptr [rdi + 0xc0]
000d6020: CLP; mov eax, dword ptr [rdi + 0x10c] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
000d6030: CLP; mov eax, dword ptr [rdi + 0x108] ; mov dword ptr [rsi], eax ; xor eax, eax ; ret
000d6040: CLP; mov rdx, qword ptr [rsi] ; xor eax, eax ; mov qword ptr [rdi + 0x88], rdx ; mov rdx, qword ptr [rsi + 8] ; mov qword ptr [rdi + 0x90], rdx ; mov rdx, qword ptr [rsi + 0x10] ; mov qword ptr [rdi + 0x98], rdx ; mov rdx, qword ptr [rsi + 0x18] ; mov qword ptr [rdi + 0xa0], rdx ; mov rdx, qword ptr [rsi + 0x20] ; mov qword ptr [rdi + 0xa8], rdx ; mov rdx, qword ptr [rsi + 0x28] ; mov qword ptr [rdi + 0xb0], rdx ; mov rdx, qword ptr [rsi + 0x30] ; mov qword ptr [rdi + 0xb8], rdx
000d6120: CLP; mov eax, dword ptr [rsi] ; mov dword ptr [rdi + 0x108], eax ; xor eax, eax ; ret
000d6190: CLP; and rdi, 0xfffffffffffffff8 ; add rdi, rsi ; cmp rsi, rdi ; jae 0xd624a
read: rdi rflags rsi 
write: rdi rflags 
000d6260: CLP; add rdi, 0x3f ; sub rsp, 8 ; shr rdi, 6 ; shl rdi, 3 ; call 0x1f3cc
read: rdi rip rsp 
write: rdi rflags rsp 
000d62b0: CLP; sub rsp, 8 ; mov rdi, rsp ; xor esi, esi ; mov edx, 0x38 ; add rdx, qword ptr fs:[0] ; mov rax, qword ptr [rip + 0x298076] ; ror rax, 0x11 ; xor rax, qword ptr fs:[0x30] ; call rax
write: edx esi rax rdi rdx rflags rsp 
000d6340: CLP; sub rsp, 0x18 ; mov edx, esi ; mov rsi, rdi ; lea rcx, [rsp + 8] ; or dh, 0x10 ; xor edi, edi ; mov qword ptr [rsp + 8], 0 ; call 0xd648c
read: dh edi esi rdi rip rsp 
000d6610: CLP; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, rdi ; add rsp, -0x80 ; mov rsi, rsp ; call 0xd65ac
read: r12 rbp rbx rdi rip rsi rsp 
000d67e0: CLP; mov edx, edx ; movsxd rdi, edi ; mov eax, 0x102 ; syscall ; cmp rax, -0x1000 ; ja 0xd67f6
write: eax edx rdi rflags 
000d68e0: CLP; mov r10d, ecx ; movsxd rdx, edx ; movsxd rdi, edi ; mov eax, 0x101 ; syscall ; cmp rax, -0x1000 ; ja 0xd68fa
write: eax r10d rdi rdx rflags 
000d6b70: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; mov ebx, esi ; mov rsi, rdi ; mov edi, 1 ; sub rsp, 0x98 ; mov rdx, rsp ; call 0xd639c
read: esi r12 r13 r14 r15 rbp rbx rdi rip rsp 
000d7350: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0xf8 ; test rsi, rsi ; jne 0xd73b4
read: r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
000d7a40: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x1000 ; test rdi, rdi ; je 0xd7a94
read: r12 rbp rbx rdi rflags rsp 
000d7ad0: CLP; push rbx ; lea rdi, [rip + 0x5ece0] ; sub rsp, 0x120 ; call 0x3819c
write: rdi rflags rsp 
000d7c10: CLP; movsxd r8, r8d ; mov r10d, ecx ; mov edx, edx ; movsxd rdi, edi ; mov eax, 0x104 ; syscall ; cmp rax, -0x1000 ; ja 0xd7c2c
write: eax edx r10d r8 rdi rflags 
000d8290: CLP; mov r10, rcx ; movsxd r8, r8d ; movsxd rdx, edx ; movsxd rdi, edi ; mov eax, 0x109 ; syscall ; cmp rax, -0x1000 ; ja 0xd82ad
write: eax r10 r8 rdi rdx rflags 
000d8360: CLP; mov r10, rcx ; movsxd rdi, edi ; mov eax, 0x10b ; syscall ; cmp rax, -0x1000 ; ja 0xd8377
write: eax r10 rdi rflags 
000d83c0: CLP; movsxd rdx, edx ; movsxd rdi, edi ; mov eax, 0x107 ; syscall ; cmp rax, -0x1000 ; ja 0xd83d7
write: eax rdi rdx rflags 
000d8420: CLP; mov rdx, qword ptr [rsi + 8] ; mov rcx, qword ptr [rdi + 8] ; xor eax, eax ; cmp rcx, rdx ; setb dl ; seta al ; movzx edx, dl ; sub eax, edx ; jne 0xd8450
000d8460: CLP; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; mov edi, 0x10 ; call 0x1f3cc
read: r12 rbp rbx rdi rdx rip rsi rsp 
000d84d0: CLP; push r14 ; mov r14d, r8d ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0xa0 ; cmp byte ptr [rdx], 0x2e ; je 0xd862c
read: r12 r13 r14 r8d rbp rbx rcx rdi rdx rflags rsi rsp 
000d8800: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x58 ; mov eax, dword ptr [rdi + 0x28] ; mov qword ptr [rsp + 0x28], rsi ; xor esi, esi ; mov qword ptr [rsp + 0x18], rdx ; mov dword ptr [rsp + 0x24], eax ; mov rax, rdx ; add rax, 8
read: eax esi r12 r13 r14 r15 rax rbp rbx rdi rdx rsi rsp 
000d8eb0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x118 ; cmp byte ptr [rdi], 0 ; je 0xd9388
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000d94a0: CLP; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; cmp dword ptr [rdi + 0x30], edx ; mov rbx, rsi ; jl 0xd9544
read: edx r12 rbp rbx rdi rflags rsi rsp 
000d95b0: CLP; push rbx ; mov eax, dword ptr [rsi] ; mov rbx, rdi ; lea eax, [rax + rdx + 0x100] ; cmp eax, 0xfffe ; mov dword ptr [rsi], eax ; ja 0xd95e4
read: eax rbx rdi rflags rsp 
000d9860: CLP; push r14 ; mov r14, rdx ; push r13 ; mov r13, rdi ; lea rdi, [rcx + 0x78] ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; lea rcx, [rcx + 0x117] ; push rbx ; test byte ptr [rsi], 8 ; cmove rdi, rcx ; call 0x1f3cc
read: r12 r13 r14 rbp rbx rcx rdi rdx rflags rip rsi rsp 
write: r12 r13 r14 rbp rcx rdi rflags rsp 
000d9920: CLP; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rsi ; push rbx ; mov ebx, edx ; sub rsp, 0x90 ; test edx, edx ; js 0xd99cc
read: edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
000d9a30: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x68 ; mov rax, qword ptr [rdi] ; mov dword ptr [rsp + 0x58], esi ; mov rdi, qword ptr [rax + 0x28] ; mov qword ptr [rsp + 0x38], rax ; call 0xaeb5c
read: esi r12 r13 r14 r15 rax rbp rbx rdi rip rsp 
write: rax rbx rdi rflags rsp 
000da5b0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0xda610
read: r12 rbp rbx rdi rflags rsp 
write: rbp rdi rflags rsp 
000da6d0: CLP; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; mov rbp, qword ptr [rdi] ; test rbp, rbp ; je 0xda9c4
read: r12 r13 r14 rbp rbx rdi rflags rsp 
000dafd0: CLP; movsxd r10, ecx ; movsxd rdi, edi ; mov eax, 0xdd ; syscall ; mov ecx, eax ; xor edx, edx ; neg ecx ; cmp eax, 0xfffff000 ; cmova edx, ecx ; mov eax, edx ; ret
write: eax ecx edx r10 rdi rflags 
000db2e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov ebp, esi ; mov esi, edx ; push rbx ; mov rbx, rdi ; sub rsp, 0x578 ; test esi, esi ; lea rdx, [rsp + 0x50] ; js 0xdb5d8
read: edx esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000dbaf0: CLP; mov eax, dword ptr [rdi + 8] ; and eax, 0x100f ; ret
000dbb00: CLP; mov eax, dword ptr [rdi] ; test eax, eax ; js 0xdbb14
000dbbd0: CLP; push r12 ; lea rax, [rip + 0x56cc7] ; lea rdx, [rip + 0x56dc0] ; mov r12, rdi ; push rbp ; push rbx ; mov ebx, esi ; nop dword ptr [rax + rax] ; mov ebp, dword ptr [rax] ; cmp ebp, ebx ; je 0xdbc1c
read: ebp ebx esi r12 rbp rbx rdi rflags rsp 
000dbd50: CLP; mov ecx, 0x10 ; mov r8, rsi ; lea rdx, [rsp - 0x38] ; mov esi, 0x5401 ; movsxd rdi, edi ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rdx, rax ; ja 0xdbde9
write: eax ecx esi r8 rdi rdx rflags 
000dbfa0: CLP; mov eax, dword ptr [rdi + 8] ; and dword ptr [rdi], 0xfffffa14 ; and dword ptr [rdi + 4], 0xfffffffe ; mov byte ptr [rdi + 0x17], 1 ; and dword ptr [rdi + 0xc], 0xffff7fb4 ; mov byte ptr [rdi + 0x16], 0 ; and eax, 0xfffffecf ; or eax, 0x30 ; mov dword ptr [rdi + 8], eax ; ret
000dc270: CLP; push r12 ; movsxd r12, esi ; push rbp ; push rbx ; lea ebx, [rdi - 1] ; sub rsp, 0x10 ; cmp ebx, 5 ; ja 0xdc2bc
000dc2e0: CLP; push rbp ; xor ebp, ebp ; push rbx ; mov rbx, rdi ; sub rsp, 0x98 ; test rdi, rdi ; je 0xdc3b5
read: ebp rbp rbx rdi rflags rsp 
000dc410: CLP; mov ecx, 0x8c ; mov esi, esi ; movsxd rdi, edi ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rdx, rax ; ja 0xdc436
write: eax ecx esi rdi rdx rflags 
000dc510: CLP; mov ecx, 0xc ; mov rsi, rdi ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rdx, rax ; ja 0xdc550
read: ecx rax rdi rflags 
000dc580: CLP; push r12 ; mov r12, qword ptr [rip + 0x28c92b] ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [r12] ; test rbx, rbx ; je 0xdc5cc
read: r12 rbp rbx rdi rflags rsp 
000dcba0: CLP; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x190 ; mov rdi, rsp ; call 0xb284c
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
write: r14 rbx rdi rflags rsp 
000dcc70: CLP; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x190 ; mov rdi, rsp ; mov rbx, rsp ; call 0xb284c
read: r12 rbp rbx rdi rip rsi rsp 
write: r12 rbp rbx rdi rflags rsp 
000dd030: CLP; movsxd rdx, edi ; mov esi, 0x28121969 ; mov rdi, -0x11e2153 ; mov eax, 0xa9 ; syscall ; cmp rax, -0x1000 ; ja 0xdd050
write: eax esi rdi rdx rflags 
000dd070: CLP; push rbp ; lea rdi, [rip + 0x59889] ; xor edx, edx ; xor esi, esi ; xor eax, eax ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xa8 ; call 0xd6819
write: eax edx esi rbp rdi rflags rsp 
000dd3a0: CLP; push rbx ; xor edx, edx ; xor esi, esi ; mov ecx, 2 ; mov rbx, rdi ; call 0x69afc
read: edx esi rbx rdi rip rsp 
000dd3f0: CLP; push rbx ; xor edx, edx ; xor esi, esi ; mov ecx, 1 ; mov rbx, rdi ; call 0x69afc
read: edx esi rbx rdi rip rsp 
000dd520: CLP; mov eax, edi ; mov edx, 0x431bde83 ; sub rsp, 0x18 ; mul edx ; xor esi, esi ; shr edx, 0x12 ; mov eax, edx ; imul edx, edx, 0xf4240 ; mov qword ptr [rsp], rax ; sub edi, edx ; imul rdi, rdi, 0x3e8 ; mov qword ptr [rsp + 8], rdi ; mov rdi, rsp ; call 0xb2dac
read: eax edi edx esi rax rdi rip rsp 
write: eax edi edx esi rdi rflags rsp 
000dd5d0: CLP; lea rax, [rsp + 8] ; lea r8d, [rdi - 1] ; mov qword ptr [rsp - 0x28], rsi ; mov qword ptr [rsp - 0x20], rdx ; mov qword ptr [rsp - 0x18], rcx ; lea r10, [rsp - 0x50] ; mov qword ptr [rsp - 0x40], rax ; lea rax, [rsp - 0x30] ; cmp r8d, 2 ; movsxd rsi, dword ptr [rax + 8] ; mov rdx, qword ptr [rax + 0x10] ; mov edi, edi ; mov qword ptr [rsp - 0x38], rax ; cmova r10, qword ptr [rax + 0x18] ; mov eax, 0x65
000dd660: CLP; push r12 ; lea rsi, [rip + 0x592a7] ; lea r12, [rdi + 0x38] ; push rbp ; lea rbp, [rdi + 0x10] ; push rbx ; mov rax, qword ptr [rdi + 0x10] ; mov rbx, rdi ; mov qword ptr [rdi + 0x38], rax ; mov rax, qword ptr [rdi + 0x18] ; mov qword ptr [rdi + 0x40], rax ; mov rax, qword ptr [rdi + 0x20] ; mov qword ptr [rdi + 0x48], rax ; mov rax, qword ptr [rdi + 0x28] ; mov qword ptr [rdi + 0x50], rax
read: r12 rax rbp rbx rdi rsp 
000dd890: CLP; push r12 ; mov r12, rdi ; mov edi, 1 ; push rbp ; push rbx ; call 0xdd75c
read: r12 rbp rbx rdi rip rsp 
000dd920: CLP; push r12 ; mov r12, rdi ; mov edi, 1 ; push rbp ; push rbx ; call 0xdd75c
read: r12 rbp rbx rdi rip rsp 
000dd9b0: CLP; mov rdi, qword ptr [rip + 0x28e625] ; test rdi, rdi ; je 0xdd9d8
read: rdi rflags 
write: rdi rflags 
000dda10: CLP; mov edx, dword ptr [rip + 0x290d56] ; push rbx ; mov rbx, rdi ; test edx, edx ; jne 0xdda5c
read: edx rbx rdi rflags rsp 
000ddad0: CLP; mov rax, rdi ; lea rcx, [rdi + 1] ; mov rdx, rdi ; jmp 0xddaf0
read: rdi 
000ddba0: CLP; push rbp ; mov rbp, rsp ; push r12 ; mov r12, rdi ; mov rdi, rsi ; push rbx ; mov rbx, rsi ; call 0x856dc
read: r12 rbp rbx rdi rip rsi rsp 
write: r12 rbp rbx rdi rsp 
000ddc10: CLP; test rdi, rdi ; je 0xddc2c
read: rdi rflags 
000ddc40: CLP; push r14 ; mov r14, rsi ; push r13 ; mov r13d, ecx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rdx ; push rbx ; sub rsp, 0x400 ; mov rbx, rsp ; nop word ptr [rax + rax] ; mov rdx, r12 ; mov esi, r13d ; mov rdi, rbp
read: ecx r12 r13 r13d r14 rbp rbx rdi rdx rsi rsp 
write: esi r12 r13d r14 rbp rbx rdi rdx rflags rsp 
000ddf50: CLP; push rbp ; mov edx, 2 ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbx ; sub rsp, 0x38 ; mov eax, dword ptr [rsi + 0x20] ; mov r15, qword ptr [rsi] ; mov r13, qword ptr [rsi + 8] ; mov r12, qword ptr [rsi + 0x10] ; mov rbx, qword ptr [rsi + 0x18]
read: r12 r13 r14 r15 rbp rbx rdi rsp 
000de4e0: CLP; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; mov rdi, rsi ; call 0x856dc
read: r12 rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rsp 
000de7a0: CLP; test rdi, rdi ; mov rax, qword ptr [rip + 0x28a6ba] ; je 0xde7bc
read: rdi rflags 
000de830: CLP; mov rdx, qword ptr [rdi] ; mov rax, qword ptr [rdi + 8] ; test rdx, rdx ; je 0xde840
000de850: CLP; movzx ecx, byte ptr [rdi] ; movsx edx, cl ; test edx, edx ; je 0xde92e
000de940: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x28d7f9] ; test rdi, rdi ; je 0xde96c
read: rdi rflags rsp 
write: rdi rflags rsp 
000dece0: CLP; mov rdi, qword ptr [rip + 0x28d45d] ; mov eax, 1 ; test rdi, rdi ; je 0xded16
read: rdi rflags 
write: eax rdi rflags 
000ded20: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; call 0xde93c
read: rbp rbx rdi rip rsp 
000ded80: CLP; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x98 ; mov rdi, qword ptr [rip + 0x28d3d0] ; call 0x1f46c
write: rdi rflags rsp 
000df010: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x28d149] ; call 0x1f46c
write: rdi rflags rsp 
000df080: CLP; push r15 ; lea rsi, [rip + 0x578ea] ; mov r15, rdi ; lea rdi, [rip + 0x56949] ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x88 ; call 0x6ca9c
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
write: r15 rdi rflags rsi rsp 
000df400: CLP; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; test rdi, rdi ; je 0xdf416
read: r12 r13 rbp rbx rdi rflags rsp 
000dfd60: CLP; mov r10d, esi ; push rbx ; mov r9, rdi ; mov esi, 1 ; xor eax, eax ; cmp dword ptr [rip + 0x28e9fb], 0 ; je 0xdfd83
read: eax esi rbx rdi rflags rsp 
000dfeb0: CLP; mov rax, rdi ; mov rdi, rsi ; mov rsi, rdx ; mov rdx, rcx ; mov r10, r8 ; mov r8, r9 ; mov r9, qword ptr [rsp + 8] ; syscall ; cmp rax, -0xfff ; jae 0xdfed2
read: r8 r9 rax rcx rdi rdx rflags rsi 
write: r10 r8 r9 rax rdi rdx rflags rsi 
000e0390: CLP; push rbx ; cmp edi, 0x11 ; mov rbx, rsi ; mov edx, 0x11 ; lea rsi, [rip + 0x565fb] ; mov eax, 1 ; cmovle edx, edi ; mov rdi, rbx ; call 0x5231c
write: eax edx rbx rdi rflags rsi rsp 
000e0950: CLP; push rbx ; mov edx, 0x15 ; mov rbx, rsi ; lea rsi, [rip + 0x56048] ; sub rsp, 0x10 ; cmp edi, 0x15 ; fld xword ptr [rsp + 0x20] ; cmovle edx, edi ; mov rdi, rbx ; xor eax, eax ; fstp xword ptr [rsp] ; call 0x5231c
write: eax edx fpsw rbx rdi rflags rsi rsp 
000e0e10: CLP; lea rdi, [rip + 0x28b4f5] ; sub rsp, 8 ; call 0xe0f5c
write: rdi rflags rsp 
000e0f60: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0xe0f84
read: rbx rdi rflags rsp 
000e0fa0: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; mov dword ptr [rsp + 0x20], edx ; mov qword ptr [rsp + 0x28], rsi ; mov qword ptr [rsp + 0x18], rcx ; mov qword ptr [rsp + 0x10], r8 ; call 0x856dc
read: edx r12 r13 r14 r15 r8 rbp rbx rcx rdi rip rsi rsp 
000e11b0: CLP; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rsi ; push rbx ; cmp qword ptr [rdi + 8], 0 ; mov rbx, rdi ; je 0xe122c
read: edx r12 rbp rbx rdi rflags rsi rsp 
000e1250: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 8] ; test rdi, rdi ; je 0xe126e
read: rbp rbx rdi rflags rsi rsp 
write: rbp rbx rdi rflags rsp 
000e12b0: CLP; cmp r9d, 1 ; mov rax, qword ptr [rdi + 0x10] ; je 0xe1364
000e13e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 0x28 ; test rsi, rsi ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 0x18], rdx ; je 0xe151c
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000e1530: CLP; push r12 ; test rsi, rsi ; mov r12, rdi ; push rbp ; mov rbp, rdx ; push rbx ; jne 0xe1562
read: r12 rbp rbx rdi rdx rflags rsi rsp 
000e1580: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; mov qword ptr [rbp - 0x40], rdi ; mov qword ptr [rbp - 0x48], rdx ; sub rsp, 0x150 ; lea r12, [rsp + 0xf] ; and r12, 0xfffffffffffffff0 ; test rsi, rsi
read: r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
000e1a20: CLP; test rdi, rdi ; jne 0xe1a2c
read: rdi rflags 
000e1a50: CLP; test rdi, rdi ; je 0xe1a66
read: rdi rflags 
000e1a70: CLP; push r15 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rdx ; push rbx ; sub rsp, 0x18 ; cmp qword ptr [rdx], 0 ; mov qword ptr [rsp + 8], rsi ; je 0xe1ae5
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000e1bb0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0x38 ; test rdi, rdi ; mov qword ptr [rbp - 0x58], rsi ; je 0xe1ca5
read: r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
000e1cf0: CLP; push r12 ; mov rdx, qword ptr [rip + 0x2870f3] ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, qword ptr [rip + 0x287094] ; mov rdx, qword ptr [rdx] ; mov rdi, qword ptr [rbx] ; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jle 0xe1d54
read: eax r12 rbp rbx rdi rflags rsi rsp 
write: eax r12 rbp rbx rdi rdx rflags rsp 
000e1db0: CLP; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, qword ptr [rip + 0x2870a0] ; push rbx ; mov rbx, qword ptr [rip + 0x286fd0] ; mov r13d, dword ptr fs:[rbp] ; mov rdi, qword ptr [rbx] ; mov edx, dword ptr [rdi + 0xc0] ; test edx, edx ; mov rdx, qword ptr [rip + 0x287009] ; mov rdx, qword ptr [rdx]
read: edx r12 r13 r14 rbp rbx rdi rsi rsp 
write: edx r12 r13d r14 rbp rbx rdi rdx rflags rsp 
000e2000: CLP; push rbx ; mov ebx, edi ; mov rdi, rsi ; mov rsi, rdx ; call 0xe1dac
write: ebx rdi rsi rsp 
000e2020: CLP; push rbx ; mov ebx, edi ; mov rdi, rsi ; mov rsi, rdx ; call 0xe1cec
write: ebx rdi rsi rsp 
000e21a0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdx ; push r12 ; push rbx ; sub rsp, 0x48 ; mov rax, qword ptr [rip + 0x286be1] ; mov dword ptr [rbp - 0x58], edi ; mov qword ptr [rbp - 0x60], rcx ; mov dword ptr [rbp - 0x54], esi ; mov rdi, qword ptr [rax] ; mov ecx, dword ptr [rdi + 0xc0]
write: ecx r13 rax rbp rdi rflags rsp 
000e2760: CLP; mov rax, rdi ; mov edi, edi ; cmp rdi, rax ; jne 0xe277c
read: edi rax rdi rflags 
000e2980: CLP; push r13 ; lea rsi, [rip + 0x51b6b] ; push r12 ; mov r12, rdi ; lea rdi, [rip + 0x54032] ; push rbp ; push rbx ; sub rsp, 0x2018 ; mov qword ptr [rsp + 8], -1 ; call 0x6ca9c
read: r12 r13 rbp rbx rdi rip rsp 
write: r12 rdi rflags rsi rsp 
000e2d60: CLP; push r13 ; lea rdi, [rip + 0x53c8f] ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; call 0xaeb5c
write: rdi rflags rsp 
000e2e30: CLP; lea rdi, [rip + 0x53bd9] ; sub rsp, 8 ; call 0xe297c
write: rdi rflags rsp 
000e2e50: CLP; lea rdi, [rip + 0x53bca] ; sub rsp, 8 ; call 0xe297c
write: rdi rflags rsp 
000e2e70: CLP; test rdi, rdi ; push rbx ; mov rbx, rdi ; je 0xe2f24
read: rbx rdi rflags rsp 
000e2f40: CLP; push rbx ; mov rbx, rdi ; lea rdi, [rsi + 8] ; mov r8d, 2 ; mov edx, 1 ; mov rsi, rbx ; sub rsp, 0x10 ; and rdi, 0xfffffffffffffff8 ; mov rcx, rsp ; call 0xca1dc
read: rbx rdi rip rsp 
write: edx r8d rbx rcx rdi rflags rsi rsp 
000e2fb0: CLP; push rbx ; mov rbx, rdi ; lea rdi, [rsi + 8] ; mov r8d, 2 ; mov edx, 1 ; mov rsi, rbx ; sub rsp, 0x10 ; and rdi, 0xfffffffffffffff8 ; mov rcx, rsp ; call 0xca1dc
read: rbx rdi rip rsp 
write: edx r8d rbx rcx rdi rflags rsi rsp 
000e3010: CLP; push r14 ; xor eax, eax ; mov r14d, esi ; xor esi, esi ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; lea rdi, [rip + 0x53a13] ; push rbx ; sub rsp, 0x60 ; call 0xd6819
read: eax esi r12 r13 r14 rbp rbx rdi rip rsp 
write: eax esi r14d rbp rdi rflags rsp 
000e3370: CLP; cmp rdi, 0x10 ; mov rax, qword ptr [rip + 0x285ae1] ; je 0xe33c4
read: rdi rflags 
000e34c0: CLP; push rbp ; xor eax, eax ; mov rbp, rcx ; mov ecx, 0xa ; push rbx ; mov rbx, rdi ; lea rdi, [rsp - 0x58] ; rep stosq qword ptr [rdi], rax ; mov qword ptr [rsp - 0x58], rbx ; mov dword ptr [rsp - 0x50], esi ; lea rdi, [rsp - 0x58] ; mov qword ptr [rsp - 0x48], rdx ; mov qword ptr [rsp - 0x40], rbp ; mov al, 0x9c ; mov qword ptr [rsp - 0x38], r8
read: eax esi r8 rax rbp rbx rcx rdi rdx rflags rsp 
write: al eax ecx rbp rbx rcx rdi rflags rsp 
000e3520: CLP; mov rax, -0x16 ; test rdi, rdi ; je 0xe359d
read: rdi rflags 
000e3710: CLP; mov rax, rdi ; shr rdi, 8 ; shr rax, 0x20 ; and edi, 0xfff ; and eax, 0xfffff000 ; or eax, edi ; ret
read: eax edi rax rdi 
write: eax edi rax rdi rflags 
000e3730: CLP; mov rax, rdi ; movzx edi, dil ; shr rax, 0xc ; xor al, al ; or eax, edi ; ret
read: al dil eax edi rax rdi 
000e3750: CLP; mov eax, edi ; movzx edx, sil ; and esi, 0xffffff00 ; and eax, 0xfff ; shl rsi, 0xc ; and edi, 0xfffff000 ; shl eax, 8 ; shl rdi, 0x20 ; or eax, edx ; or rax, rsi ; or rax, rdi ; ret
read: eax edi edx esi rax rdi rsi sil 
write: eax edi edx esi rax rdi rflags rsi 
000e3840: CLP; movsxd r10, edx ; movsxd rdi, edi ; mov edx, 8 ; mov eax, 0x121 ; syscall ; cmp rax, -0x1000 ; ja 0xe385c
write: eax edx r10 rdi rflags 
000e3880: CLP; movsxd rsi, esi ; movsxd rdi, edi ; mov eax, 0x122 ; syscall ; cmp rax, -0x1000 ; ja 0xe3897
write: eax rdi rflags rsi 
000e4d90: CLP; push rbx ; mov ebx, esi ; mov rsi, rdi ; mov edi, 1 ; sub rsp, 0x90 ; mov rdx, rsp ; call 0xd639c
read: esi rbx rdi rip rsp 
000e50a0: CLP; push rbp ; lea rdi, [rip + 0x519c5] ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x6e8 ; call 0x3819c
write: rbp rdi rflags rsp 
000e5640: CLP; push r13 ; movabs rdx, 0x28f5c28f5c28f5c3 ; push r12 ; lea r12, [rsi + 3] ; push rbp ; and r12, 0xfffffffffffffffc ; mov rbp, rdi ; and rbp, 0xfffffffffffffffc ; mov rax, r12 ; push rbx ; sub rax, rbp ; mov rdi, rax ; sub rsp, 8 ; mov qword ptr [rip + 0x283bf9], rax ; lea rax, [rax + rax*2]
read: r12 r13 rax rbp rbx rdi rsp 
write: r12 rax rbp rdi rdx rflags rsp 
000e5a50: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0xc8 ; test rdi, rdi ; je 0xe5b8c
read: r12 r13 rbp rbx rdi rflags rsp 
000e5bf0: CLP; mov rax, qword ptr [rip + 0x286855] ; cmp rdi, qword ptr [rax + 0x20] ; jb 0xe5c06
read: rdi rflags 
000e5d10: CLP; mov rdi, qword ptr [rdx + 0xa8] ; xor esi, esi ; call 0xe5bec
write: esi rdi rflags rsp 
000e5d30: CLP; mov rdi, qword ptr [rdx + 0xa8] ; mov esi, 1 ; call 0xe5bec
write: esi rdi rsp 
000e5d50: CLP; mov rcx, qword ptr [rdi] ; mov rdx, qword ptr [rsi] ; mov eax, 1 ; mov rdx, qword ptr [rdx + 0x10] ; cmp qword ptr [rcx + 0x10], rdx ; jb 0xe5d6d
000e5ed0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; push r13 ; movsxd r13, esi ; lea rax, [r13*8 + 0x16] ; push r12 ; mov r12, rdx ; and rax, 0xfffffffffffffff0 ; push rbx ; mov ebx, esi ; sub rsp, 0xe8 ; mov dword ptr [rbp - 0x104], ecx
read: ecx esi r12 r13 r14 r15 rax rbp rbx rdi rdx rsp 
000e63a0: CLP; sub rsp, 0x38 ; mov qword ptr [rsp], rax ; mov qword ptr [rsp + 8], rcx ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x20], rdi ; mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x30], r9 ; mov rsi, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rbp + 8] ; call 0xe587c
read: r8 r9 rax rcx rdi rdx rip rsi rsp 
write: rdi rflags rsi rsp 
000e6410: CLP; sub rsp, 0x40 ; mov qword ptr [rsp], rax ; mov qword ptr [rsp + 8], rcx ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x18], rsi ; mov qword ptr [rsp + 0x20], rdi ; mov qword ptr [rsp + 0x28], r8 ; mov qword ptr [rsp + 0x30], r9 ; mov rsi, qword ptr [rsp + 0x40] ; mov rdi, qword ptr [rsp + 0x48] ; call 0xe587c
read: r8 r9 rax rcx rdi rdx rip rsi rsp 
write: rdi rflags rsi rsp 
000e6d30: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; xor r12d, r12d ; push rbp ; push rbx ; sub rsp, 8 ; call 0x856dc
read: r12 r12d r13 r14 r15 rbp rbx rdi rip rsp 
000e76a0: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; xor r12d, r12d ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x856dc
read: r12 r12d r13 r14 r15 rbp rbx rdi rip rsi rsp 
000e7980: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x286dd5], 0 ; je 0xe79a9
read: eax r12 r13 rbp rbx rdi rflags rsp 
000e7b20: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x286c35], 0 ; je 0xe7b49
read: eax r12 r13 rbp rbx rdi rflags rsp 
000e7ce0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; lea rbp, [rsp + 0x20] ; mov rsi, rbp ; call 0x6c5bc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
000e7ee0: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; mov eax, dword ptr [rsi] ; and eax, 0x8000 ; jne 0xe7f53
read: eax r12 r13 rbp rbx rdi rflags rsi rsp 
000e8520: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x286234], 0 ; je 0xe854a
read: eax rbx rcx rdi rflags rsi rsp 
000e8630: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; cmp byte ptr [rip + 0x284093], 0 ; mov qword ptr [rsp + 0x18], r8 ; je 0xe87c4
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000e8860: CLP; push r12 ; push rbp ; mov rbp, rsi ; mov esi, 0xa ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; call 0x83a5c
read: r12 rbp rbx rdi rip rsi rsp 
000e8c40: CLP; push r12 ; mov rax, rdi ; mov rdi, rdx ; mov rdx, rcx ; mov r12, r8 ; push rbp ; mov rbp, rsi ; mov rsi, rax ; push rbx ; lea rbx, [rdi + rcx - 1] ; mov byte ptr [rbx], 0 ; call 0x8740c
read: r12 r8 rax rbp rbx rcx rdi rdx rip rsi rsp 
write: r12 rax rbp rbx rdi rdx rsi rsp 
000e8cd0: CLP; push r15 ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; mov qword ptr [rsp + 8], rsi ; and eax, 0x8000 ; jne 0xe8d52
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000e9390: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x2853c5], 0 ; je 0xe93b9
read: eax r12 r13 rbp rbx rdi rflags rsp 
000e9530: CLP; push r14 ; mov esi, 1 ; xor eax, eax ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x10 ; cmp dword ptr [rip + 0x285223], 0 ; je 0xe955b
read: eax r12 r13 r14 rbp rbx rdi rflags rsp 
000e9700: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; lea rbp, [rsp + 0x20] ; mov rsi, rbp ; call 0x6c5bc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
000e9900: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x18 ; mov eax, dword ptr [rsi] ; and eax, 0x8000 ; jne 0xe9977
read: eax r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
000e9d20: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x284a34], 0 ; je 0xe9d4a
read: eax rbx rcx rdi rflags rsi rsp 
000e9e30: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; cmp byte ptr [rip + 0x2829eb], 0 ; mov qword ptr [rsp + 0x18], r8 ; je 0xe9fc4
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000ea060: CLP; push r15 ; mov r15, rdx ; push r14 ; mov r14, rdx ; push r13 ; lea r13, [rdx + rcx] ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, r8 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp rdx, rdi ; ja 0xea08f
read: r12 r13 r14 r15 r8 rbp rbx rdi rdx rflags rsi rsp 
000ea3a0: CLP; push r14 ; cmp rdi, rdx ; push r13 ; mov r13, r8 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; jb 0xea3c2
read: r12 r13 r14 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000ea450: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; mov qword ptr [rsp], rsi ; and eax, 0x8000 ; jne 0xea4d1
read: eax r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000ea6c0: CLP; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdi ; mov edi, 0x48 ; push rbx ; call 0x1f3cc
read: r12 r13 r14 rbp rbx rcx rdi rdx rip rsi rsp 
000ea750: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rbx, qword ptr [rdi + 0x30] ; add rbx, qword ptr [rdi + 0x20] ; mov r14, qword ptr [rdi + 0x38] ; cmp rbx, r14 ; jae 0xea85d
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000ead10: CLP; push rbx ; mov rbx, rdi ; call 0xea74c
read: rbx rdi rip rsp 
000ead70: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x40] ; sub rax, qword ptr [rdi + 0x38] ; cmp rax, rsi ; jb 0xead9c
read: rax rbp rbx rdi rflags rsi rsp 
000eae30: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0xd8 ; test al, al ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x48], r9 ; je 0xeae8f
read: al r12 r13 r8 r9 rbp rbx rcx rdi rdx rflags rsp 
000eaf50: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x38] ; lea rax, [rdi + rdx] ; cmp qword ptr [rbx + 0x40], rax ; jae 0xeaf86
read: r12 rax rbp rbx rdi rdx rflags rsi rsp 
write: r12 rax rbp rbx rdi rflags rsp 
000eafb0: CLP; push r12 ; mov r12, rdi ; mov rdi, rsi ; push rbp ; mov rbp, rsi ; push rbx ; call 0x856dc
read: r12 rbp rbx rdi rip rsi rsp 
write: r12 rbp rdi rsp 
000eb000: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdx, qword ptr [rdi + 0x38] ; cmp rdx, qword ptr [rdi + 0x40] ; jae 0xeb02c
read: esi rbp rbx rdi rdx rflags rsp 
000eb060: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x38] ; sub rax, qword ptr [rdi + 0x30] ; cmp rax, qword ptr [rdi + 0x20] ; jbe 0xeb083
read: rax rbp rbx rdi rflags rsi rsp 
000eb0a0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x38] ; sub rax, qword ptr [rdi + 0x30] ; cmp rax, qword ptr [rdi + 0x20] ; jbe 0xeb0c3
read: rax rbp rbx rdi rflags rsi rsp 
000eb0e0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x38] ; sub rax, qword ptr [rdi + 0x30] ; cmp rax, qword ptr [rdi + 0x20] ; jbe 0xeb103
read: rax rbp rbx rdi rflags rsi rsp 
000eb120: CLP; mov rax, qword ptr [rdi + 0x38] ; sub rax, qword ptr [rdi + 0x30] ; cmp rax, qword ptr [rdi + 0x20] ; push rbx ; mov rbx, rdi ; jbe 0xeb13b
read: rax rbx rdi rflags rsp 
000eb150: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov ebp, dword ptr [rdi + 8] ; mov r12, qword ptr [rdi] ; mov r13, qword ptr [rdi + 0x10] ; test ebp, ebp ; je 0xeb231
000eb240: CLP; xor eax, eax ; test byte ptr [rdi + 0x18], 8 ; mov edx, dword ptr [rdi + 8] ; jne 0xeb26c
000eb280: CLP; mov rdx, qword ptr [rdi] ; mov r8, qword ptr [rip + 0x27db72] ; movzx ecx, byte ptr [rdx] ; mov rax, qword ptr fs:[r8] ; movsx rsi, cl ; test byte ptr [rax + rsi*2 + 1], 0x20 ; je 0xeb2c1
000eb310: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x18] ; test rdi, rdi ; jne 0xeb32f
read: rbp rbx rdi rflags rsp 
write: rbp rdi rflags rsp 
000eb380: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov rdx, qword ptr [rbp + 0x20] ; mov rcx, qword ptr [rbx + 0x20] ; mov edi, dword ptr [rdi + 0x18] ; mov esi, dword ptr [rsi + 0x18] ; cmp rdx, rcx ; je 0xeb514
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000eb730: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov rax, qword ptr [rdi + 0x38] ; sub rax, qword ptr [rdi + 0x30] ; cmp rax, qword ptr [rdi + 0x20] ; ja 0xeb7ac
read: rax rbp rbx rdi rflags rsp 
000eb7d0: CLP; push r12 ; test rdx, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; je 0xeb80b
read: r12 rbp rbx rdi rdx rflags rsp 
000eb820: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdx ; mov edx, 5 ; push rbx ; mov rbx, rsi ; mov rsi, rdi ; sub rsp, 0x18 ; mov rdi, qword ptr [rbx + 0x30] ; call 0x2f4bc
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: edx rbp rbx rdi rflags rsi rsp 
000ebc30: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; mov r13d, ecx ; push r12 ; mov r12d, edx ; mov edx, 5 ; push rbp ; mov rbp, r9 ; push rbx ; sub rsp, 0x38 ; mov qword ptr [rsp], rsi ; mov rsi, qword ptr [rdi + 0x18] ; mov rdi, qword ptr [rdi + 0x30]
read: ecx edx r12 r13 r14 r15 r9 rbp rbx rdi rsi rsp 
write: edx r12d r13d r15 rbp rdi rflags rsi rsp 
000ec1d0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rax, qword ptr [rdi + 0x38] ; mov rdx, rax ; sub rdx, qword ptr [rdi + 0x30] ; cmp rdx, qword ptr [rdi + 0x20] ; ja 0xec23c
read: rax rbx rdi rdx rflags rsp 
000ec2a0: CLP; push r13 ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdi ; mov rdi, rdx ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rbp + 0x10] ; mov ebx, dword ptr [rsi + 0x18] ; or ebx, dword ptr [rbp + 0x18] ; test rax, rax ; je 0xec33c
read: ebx r12 r13 rax rbp rbx rcx rdi rdx rflags rsp 
write: ebx r12 rax rbp rdi rflags rsp 
000ec390: CLP; push r15 ; mov r15d, ecx ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0x38 ; mov rax, qword ptr [rdx] ; mov rbx, qword ptr [rdi + 0x20] ; mov qword ptr [rsp], rsi
read: ecx r12 r13 r14 r15 r8 rbp rbx rdi rdx rsi rsp 
000ec5e0: CLP; cmp qword ptr [rdi + 0x10], 0 ; je 0xec5ec
000ec620: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0x38 ; mov ebx, dword ptr [rdi + 8] ; mov qword ptr [rbp - 0x48], rsi ; test ebx, ebx ; jne 0xec64e
read: ebx r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
000ec890: CLP; test rdi, rdi ; je 0xec8d4
read: rdi rflags 
000ec920: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; mov r15, qword ptr [rdi + 0x20] ; mov rbx, qword ptr [rdi] ; mov qword ptr [rsp], rdi ; mov edi, 0x20 ; mov qword ptr [rsp + 8], rsi ; call 0x1f3cc
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
000ed030: CLP; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; test rdi, rdi ; je 0xed09c
read: rbp rbx rdi rflags rsi rsp 
000ed0b0: CLP; push r14 ; mov r14d, esi ; push r13 ; mov r13d, edx ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x190 ; test al, al ; mov qword ptr [rsp + 0x100], r8 ; mov qword ptr [rsp + 0x108], r9 ; je 0xed11c
read: al edx esi r12 r13 r14 r8 r9 rbp rbx rdi rflags rsp 
000ed2f0: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xb8 ; test rdx, rdx ; mov qword ptr [rbp - 0xd0], rdi ; mov qword ptr [rbp - 0xb8], rdx ; mov rdi, rdx ; mov dword ptr [rbp - 0x84], ecx ; mov qword ptr [rbp - 0xa0], r8 ; je 0xeda8c
read: ecx r12 r13 r14 r15 r8 rbp rbx rdi rdx rflags rsp 
write: rbp rdi rflags rsp 
000ee7b0: CLP; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test rdi, rdi ; je 0xee820
read: edx rbp rbx rdi rflags rsp 
000ee850: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0xe8 ; test al, al ; mov qword ptr [rsp + 0x40], rdx ; mov qword ptr [rsp + 0x48], rcx ; mov qword ptr [rsp + 0x50], r8 ; mov qword ptr [rsp + 0x58], r9 ; je 0xee8ae
read: al r8 r9 rbp rbx rcx rdi rdx rflags rsp 
000ee9c0: CLP; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; mov rax, qword ptr [rdi] ; mov rbp, qword ptr [rdi + 0x20] ; test rax, rax ; je 0xeea1c
000eebb0: CLP; push r15 ; push r14 ; push r13 ; mov r13, r8 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; mov r14, qword ptr [rdi] ; mov rbp, qword ptr [rdi + 0x20] ; mov qword ptr [rsp + 0x18], rdi ; mov qword ptr [rsp + 0x20], rsi ; mov dword ptr [rsp + 0x2c], edx ; mov qword ptr [rsp], rcx ; test r14, r14
read: edx r12 r13 r14 r15 r8 rbp rbx rcx rdi rsi rsp 
000eef80: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; mov r12d, ecx ; push rbx ; sub rsp, 0x158 ; test cl, 0x10 ; mov dword ptr [rbp - 0x164], esi ; mov qword ptr [rbp - 0x160], rdx ; mov qword ptr [rbp - 0x178], r8 ; mov qword ptr [rbp - 0x180], r9
read: cl ecx esi r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsp 
000eff00: CLP; mov eax, dword ptr [rdi + 0x18] ; and eax, 8 ; jne 0xeff34
000eff40: CLP; mov ecx, dword ptr [rdi + 8] ; xor eax, eax ; test ecx, ecx ; jne 0xeff4f
000f07a0: CLP; push rsi ; push rdx ; mov dword ptr [rdi], 0 ; mov esi, 0x81 ; mov edx, 1 ; mov eax, 0xca ; syscall ; pop rdx ; pop rsi ; ret
000f0880: CLP; mov edx, dword ptr [rdi + 0x10] ; mov rax, rdi ; test edx, edx ; jne 0xf088c
read: edx rdi rflags 
000f08b0: CLP; push rbx ; mov qword ptr [rip + 0x27dc94], rdi ; mov rbx, rdx ; xor ecx, ecx ; mov rdx, rsi ; xor edi, edi ; xor esi, esi ; call 0xf091c
read: ecx edi esi rbx rdi rdx rip rsi rsp 
000f0920: CLP; push r12 ; xor eax, eax ; mov r12, rcx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; mov esi, 1 ; sub rsp, 0x10 ; cmp dword ptr [rip + 0x27de31], 0 ; je 0xf094d
read: eax r12 rbp rbx rcx rdi rflags rsi rsp 
000f0ab0: CLP; nop dword ptr [rax] ; mov rdx, qword ptr [rip + 0x27da99] ; mov qword ptr [rdi], rdx ; mov rax, rdx ; cmp dword ptr fs:[0x18], 0 ; je 0xf0acd
000f0df0: CLP; not edi ; mov ecx, 0xe5 ; mov r9, rsi ; lea r8d, [rdi*8 + 2] ; xor esi, esi ; mov eax, ecx ; movsxd rdi, r8d ; syscall ; cmp eax, 0xfffff000 ; mov rdx, rax ; jbe 0xf0e2c
write: eax ecx edi esi r8d r9 rdi rdx rflags 
000f0e40: CLP; movsxd rdi, edi ; mov eax, 0xe5 ; syscall ; cmp rax, -0x1000 ; ja 0xf0e54
write: eax rdi rflags 
000f1080: CLP; push rbp ; lea rdi, [rip + 0x433ba] ; mov esi, 0x80000001 ; mov rbp, rsp ; call 0x11c37c
write: esi rbp rdi rsp 
000f1130: CLP; push rbp ; mov rbp, rsp ; push rbx ; mov ebx, esi ; sub rsp, 0x28 ; mov edx, dword ptr [rip + 0x27d62b] ; mov qword ptr [rbp - 0x30], rdi ; mov qword ptr [rbp - 0x28], 0 ; mov dword ptr [rbp - 0x20], 0xffffffff ; mov dword ptr [rbp - 0x1c], esi ; test edx, edx ; jne 0xf11ac
read: edx esi rbp rbx rdi rflags rsp 
000f1220: CLP; push rbp ; movsxd rax, esi ; mov rcx, rax ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbx ; sub rsp, 0x58 ; mov qword ptr [rbp - 0x60], rax ; shl rax, 5 ; add rax, 0x10 ; mov dword ptr [rbp - 0x64], esi
read: esi r12 r13 r14 r15 rax rbp rbx rdi rsp 
000f19f0: CLP; sub rsp, 8 ; lea r9, [rdi + rdx] ; mov rcx, rdi ; jmp 0xf1a07
read: rdi rsp 
000f1a60: CLP; mov rcx, rsi ; and ecx, 7 ; mov r10, rdi ; je 0xf1a92
read: ecx rdi rflags rsi 
000f1bc0: CLP; push rbx ; mov r9, rdi ; lea rbx, [rdi + rcx] ; jmp 0xf1bd2
read: rbx rdi rsp 
000f2240: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 0xd8 ; test al, al ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x48], r9 ; je 0xf2298
read: al esi r8 r9 rbp rbx rcx rdi rflags rsp 
000f2420: CLP; push r13 ; mov r10, rsi ; push r12 ; mov r12d, edi ; push rbp ; push rbx ; sub rsp, 8 ; mov rbp, qword ptr [rip + 0x276b05] ; mov rbx, qword ptr [rbp] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0xf24ac
write: eax r10 r12d rbp rbx rdi rflags rsp 
000f25a0: CLP; push r12 ; mov r10, rdx ; mov rdx, rcx ; push rbp ; mov ebp, esi ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0xf2615
read: eax esi r12 rbp rbx rcx rdi rdx rflags rsp 
000f2920: CLP; lea rdi, [rip + 0x4445c] ; sub rsp, 8 ; call 0xf4afc
write: rdi rflags rsp 
000f2940: CLP; push r15 ; push r14 ; lea r14, [rdi + rsi] ; push r13 ; mov r13, rdi ; lea rdi, [rip + 0x43065] ; push r12 ; push rbp ; mov rbp, rsi ; lea rsi, [rip + 0x41b93] ; push rbx ; sub rsp, 0x48 ; call 0x6ca9c
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
write: r13 r14 rbp rdi rflags rsi rsp 
000f2fe0: CLP; push r13 ; mov eax, 0xffffffff ; mov r9, rdi ; mov r13, r8 ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdx ; or rdx, rcx ; imul rbx, rcx ; sub rsp, 8 ; cmp rdx, rax ; ja 0xf3119
read: r12 r13 r8 rax rbp rbx rcx rdi rdx rflags rsp 
000f3260: CLP; mov r8, rdi ; mov rax, rdi ; xor ecx, ecx ; sub r8, rsi ; sar r8, 2 ; lea r9, [rsi + r8*4 - 4] ; nop dword ptr [rax + rax] ; cmp rcx, rdx ; je 0xf3295
read: ecx r8 rcx rdi rdx rflags rsi 
000f3340: CLP; sub rsi, rdi ; lea rax, [rdi - 4] ; xor ecx, ecx ; sar rsi, 2 ; lea rdi, [rsi*4 + 4] ; nop dword ptr [rax] ; cmp rcx, rdx ; je 0xf3374
read: ecx rcx rdi rdx rflags rsi 
write: ecx rax rdi rflags rsi 
000f33c0: CLP; sub rsp, 8 ; sub rdx, 1 ; mov r8, rdi ; jmp 0xf33da
read: rdi rdx rsp 
000f3430: CLP; sub rsp, 8 ; mov r10, rdi ; jmp 0xf3442
read: rdi rsp 
000f3960: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 0xd8 ; test al, al ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x48], r9 ; je 0xf39b8
read: al esi r8 r9 rbp rbx rcx rdi rflags rsp 
000f3b40: CLP; push r13 ; mov r10, rsi ; push r12 ; mov r12d, edi ; push rbp ; push rbx ; sub rsp, 8 ; mov rbp, qword ptr [rip + 0x2753e5] ; mov rbx, qword ptr [rbp] ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0xf3bcc
write: eax r10 r12d rbp rbx rdi rflags rsp 
000f3cc0: CLP; push r12 ; mov r10, rdx ; mov rdx, rcx ; push rbp ; mov ebp, esi ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rdi ; and eax, 0x8000 ; jne 0xf3d35
read: eax esi r12 rbp rbx rcx rdi rdx rflags rsp 
000f43c0: CLP; push r15 ; mov r15d, esi ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; mov edi, 0x64 ; push rbp ; push rbx ; sub rsp, 0xf8 ; call 0x1f3cc
read: esi r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsp 
000f4610: CLP; push r14 ; lea r8, [rip + 0x273bc3] ; mov r14d, esi ; mov esi, 0x8000 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; xor edx, edx ; push rbp ; mov ebp, edi ; push rbx ; sub rsp, 0x230 ; lea rcx, [rsp + 0xe0] ; mov rdi, rsp
write: ebp edx esi r12 r13 r14d r8 rcx rdi rflags rsp 
000f4700: CLP; push r15 ; xor r8d, r8d ; push r14 ; mov r14d, esi ; mov esi, 0x8000 ; push r13 ; mov r13, rcx ; xor ecx, ecx ; push r12 ; mov r12, rdx ; mov edx, 0xffffffff ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x108
read: ecx esi r12 r13 r14 r15 r8d rbp rbx rcx rdi rdx rsp 
000f4960: CLP; push rbp ; mov ebp, esi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x35d9c
read: esi rbp rbx rdi rip rsp 
000f49b0: CLP; mov r8, qword ptr [rdi + 0x30] ; mov r9, qword ptr [rdi + 8] ; mov rdx, qword ptr [rdi + 0x38] ; ror r8, 0x11 ; xor r8, qword ptr fs:[0x30] ; ror r9, 0x11 ; xor r9, qword ptr fs:[0x30] ; ror rdx, 0x11 ; xor rdx, qword ptr fs:[0x30] ; cmp rsp, r8 ; jbe 0xf4a37
000f4a60: CLP; cmp rdi, 0x3ff ; ja 0xf4a71
read: rdi rflags 
000f4ae0: CLP; lea rdi, [rip + 0x422ed] ; sub rsp, 8 ; call 0xf4afc
write: rdi rflags rsp 
000f4b00: CLP; push rbp ; mov rbp, rdi ; push rbx ; lea rbx, [rip + 0x40f13] ; sub rsp, 8 ; nop dword ptr [rax] ; mov rax, qword ptr [rip + 0x279831] ; lea rsi, [rip + 0x422ca] ; mov rdx, rbp ; mov edi, 2 ; mov rcx, qword ptr [rax] ; test rcx, rcx ; cmove rcx, rbx ; xor eax, eax ; call 0x760ac
read: eax rbp rbx rcx rdi rflags rip rsp 
000f4c80: CLP; push r13 ; mov rax, rdi ; mov r13d, edx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov ebx, 4 ; sub rsp, 8 ; movzx r8d, byte ptr [rax] ; jmp 0xf4cd0
read: edx r12 r13 rbp rbx rdi rsi rsp 
000f4d50: CLP; movzx ecx, byte ptr [rdi] ; test cl, cl ; jle 0xf4d67
000f4ec0: CLP; push r14 ; mov r14d, edi ; shr r14d, 0x10 ; push r13 ; movzx r14d, r14b ; push r12 ; movzx r12d, dil ; push rbp ; push rbx ; mov ebx, edi ; movzx eax, bh ; shr ebx, 0x18 ; sub rsp, 0x10 ; mov r13d, eax ; lea rdi, [rip + 0x273e9f]
write: eax ebx r12d r13d r14d rdi rflags rsp 
000f4f40: CLP; push r13 ; mov rax, qword ptr [rip + 0x273fd3] ; xor r9d, r9d ; mov r8d, 0xa ; push r12 ; mov r12, qword ptr [rip + 0x273ea1] ; push rbp ; push rbx ; mov rbp, qword ptr fs:[rax] ; movzx eax, byte ptr [rdi] ; mov rbx, qword ptr fs:[r12] ; lea r13, [rsp - 0x18] ; mov r11, r13 ; cmp al, 0x30 ; je 0xf501f
000f5110: CLP; push r15 ; xor eax, eax ; push r14 ; push r13 ; mov r13d, edx ; push r12 ; mov r12d, esi ; mov esi, 1 ; push rbp ; push rbx ; sub rsp, 0x38 ; mov qword ptr [rsp + 0x18], rdi ; mov dword ptr [rsp + 0x24], 0 ; cmp dword ptr [rip + 0x279631], 0 ; je 0xf514d
read: eax edx esi r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000f52f0: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; mov r12, rcx ; push rbp ; mov ebp, esi ; push rbx ; sub rsp, 0x58 ; cmp esi, 0x10 ; mov dword ptr [rsp + 0x14], edx ; mov qword ptr [rsp + 0x18], r8 ; mov qword ptr [rsp + 0x20], r9 ; mov rbx, qword ptr [rsp + 0x98]
read: edx esi r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsp 
000f56e0: CLP; push r12 ; mov esi, 1 ; xor eax, eax ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x30 ; mov dword ptr [rsp + 0x24], 0 ; cmp dword ptr [rip + 0x27906f], 0 ; je 0xf570f
read: eax r12 rbp rbx rdi rflags rsp 
000f58f0: CLP; push r13 ; xor eax, eax ; push r12 ; push rbp ; mov ebp, esi ; mov esi, 1 ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; mov dword ptr [rsp + 0x24], 0 ; cmp dword ptr [rip + 0x278e5b], 0 ; je 0xf5923
read: eax esi r12 r13 rbp rbx rdi rflags rsp 
000f5b00: CLP; push r15 ; push r14 ; mov r14, r8 ; push r13 ; mov r13d, esi ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rdx ; push rbx ; sub rsp, 0x68 ; mov rbx, qword ptr [rsp + 0xa0] ; lea rax, [rsp + 0x4c] ; lea rdx, [rsp + 0x38] ; mov qword ptr [rsp + 0x38], rcx
read: esi r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsp 
000f5f00: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, r9 ; sub rsp, 0x68 ; lea rax, [rsp + 0x4c] ; mov qword ptr [rsp + 0x38], rdx ; lea rdx, [rsp + 0x38] ; mov qword ptr [rsp + 0x30], r8
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
000f6580: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x2781d4], 0 ; je 0xf65aa
read: eax rbx rcx rdi rflags rsi rsp 
000f6b50: CLP; push r14 ; mov esi, 1 ; xor eax, eax ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x10 ; mov dword ptr [rsp + 4], 0 ; cmp dword ptr [rip + 0x277bfb], 0 ; je 0xf6b83
read: eax r12 r13 r14 rbp rbx rdi rflags rsp 
000f6fc0: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x277794], 0 ; je 0xf6fea
read: eax rbx rcx rdi rflags rsi rsp 
000f70e0: CLP; push r15 ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, r9 ; sub rsp, 0x48 ; cmp byte ptr [rip + 0x27631b], 0 ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp + 0x28], r8 ; je 0xf728c
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rflags rsi rsp 
000f7a10: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x276d44], 0 ; je 0xf7a3a
read: eax rbx rcx rdi rflags rsi rsp 
000f7b20: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x276c35], 0 ; je 0xf7b49
read: eax r12 r13 rbp rbx rdi rflags rsp 
000f7cc0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; cmp byte ptr [rip + 0x275813], 0 ; mov qword ptr [rsp + 0x18], r8 ; je 0xf7e54
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000f7ef0: CLP; push r14 ; xor eax, eax ; push r13 ; push r12 ; mov r12, rsi ; mov esi, 1 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x10 ; cmp dword ptr [rip + 0x276860], 0 ; je 0xf7f1e
read: eax r12 r13 r14 rbp rbx rdi rflags rsi rsp 
000f80a0: CLP; push r15 ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x48 ; mov eax, dword ptr [rip + 0x2768ec] ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp + 0x28], r9 ; cmp eax, 0
read: eax r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
000f8a60: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x275cf4], 0 ; je 0xf8a8a
read: eax rbx rcx rdi rflags rsi rsp 
000f8c50: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x275b05], 0 ; je 0xf8c79
read: eax r12 r13 rbp rbx rdi rflags rsp 
000f9150: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x275604], 0 ; je 0xf917a
read: eax rbx rcx rdi rflags rsi rsp 
000f9260: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; cmp byte ptr [rip + 0x274463], 0 ; mov qword ptr [rsp + 0x18], r8 ; je 0xf93f4
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000f96e0: CLP; mov rax, qword ptr [rip + 0x26f835] ; push rbx ; xor edx, edx ; mov r10, qword ptr fs:[rax] ; mov rax, qword ptr [rip + 0x26f707] ; mov rax, qword ptr fs:[rax] ; movsx rcx, byte ptr [rdi] ; lea r9, [rdi + 1] ; mov r8d, dword ptr [r10 + rcx*4] ; lea ecx, [r8 - 0x61] ; cmp cl, 5 ; ja 0xf97a4
000f97e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x438 ; mov rdx, qword ptr [rip + 0x273f11] ; mov qword ptr [rsp + 8], rsi ; test rdx, rdx ; je 0xf98cc
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000f9930: CLP; push r12 ; mov rax, qword ptr [rip + 0x26f5e3] ; xor ecx, ecx ; mov r11, qword ptr [rip + 0x26f4ba] ; push rbp ; push rbx ; mov rbx, qword ptr fs:[rax] ; movsx rax, byte ptr [rdi] ; mov rbp, qword ptr fs:[r11] ; mov r10d, dword ptr [rbx + rax*4] ; lea eax, [r10 - 0x61] ; cmp al, 5 ; ja 0xf99cf
000f9b10: CLP; push rbx ; mov rbx, rsi ; lea rsi, [rip + 0x3d48b] ; sub rsp, 0x10 ; movzx eax, byte ptr [rdi + 5] ; movzx r9d, byte ptr [rdi + 3] ; movzx r8d, byte ptr [rdi + 2] ; movzx ecx, byte ptr [rdi + 1] ; movzx edx, byte ptr [rdi] ; mov dword ptr [rsp + 8], eax ; movzx eax, byte ptr [rdi + 4] ; mov rdi, rbx ; mov dword ptr [rsp], eax ; xor eax, eax ; call 0x5231c
write: eax ecx edx r8d r9d rbx rdi rflags rsi rsp 
000f9b60: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 0x438 ; mov rdx, qword ptr [rip + 0x273bc1] ; mov qword ptr [rsp + 8], rdi ; test rdx, rdx ; je 0xf9c4b
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
000f9cb0: CLP; push r12 ; mov r12d, esi ; mov rsi, rdi ; push rbp ; push rbx ; mov rbx, rdi ; mov edi, 1 ; sub rsp, 0x90 ; mov rdx, rsp ; call 0xd643c
read: esi r12 rbp rbx rdi rip rsp 
000f9eb0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0xf8 ; lea rax, [rsp + 0x90] ; lea r12, [rsp + 0x80] ; lea rbp, [rsp + 0x78] ; mov qword ptr [rsp + 0x10], rsi ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 0x18], rax ; lea rax, [rsp + 0xc0]
read: r12 r13 r14 r15 rax rbp rbx rdi rdx rsi rsp 
000fa370: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, r9 ; push r14 ; mov r14, rcx ; push r13 ; mov r13d, edx ; push r12 ; push rbx ; mov rbx, r8 ; sub rsp, 0x68 ; test edx, edx ; mov qword ptr [rbp - 0x78], rdi ; mov qword ptr [rbp - 0x80], rsi
read: edx r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp 
000fa580: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov ebx, esi ; sub rsp, 0x88 ; cmp si, 2 ; je 0xfa684
read: esi r12 r13 r14 r15 rbp rbx rdi rflags rsp si 
000fa700: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov ebx, esi ; sub rsp, 0x1f8 ; mov r12d, dword ptr [rsp + 0x230] ; mov qword ptr [rsp + 0x20], rdi ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 0x38], rcx ; mov qword ptr [rsp + 0x40], r8 ; mov qword ptr [rsp + 0x28], r9 ; mov eax, r12d
read: esi r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsp 
000fb2b0: CLP; push r14 ; xor eax, eax ; mov r14, rcx ; mov ecx, 6 ; movzx r8d, r8w ; push r13 ; mov r13, rdx ; push r12 ; mov r12d, esi ; xor esi, esi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x40 ; lea rdx, [rsp + 0x10]
read: eax esi r12 r13 r14 r8w rbp rbx rcx rdi rdx rsp 
000fb3a0: CLP; push rbx ; xor eax, eax ; mov r9, rdi ; mov rbx, rcx ; mov ecx, 0x10 ; mov r11d, esi ; add rsp, -0x80 ; cmp r8w, 2 ; mov rdi, rsp ; mov r10, rsp ; rep stosq qword ptr [rdi], rax ; je 0xfb41c
read: eax esi r8w rax rbx rcx rdi rflags rsp 
write: eax ecx r10 r11d r9 rbx rcx rdi rflags rsp 
000fb440: CLP; sub rsp, 0x18 ; mov r8d, 2 ; mov dword ptr [rsp + 0xc], edi ; lea rdi, [rsp + 0xc] ; call 0xfb39c
write: r8d rdi rflags rsp 
000fb4c0: CLP; push r15 ; mov rax, rdx ; ror si, 8 ; push r14 ; mov r14, r9 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x1d8 ; lea r12, [rsp + 0x60] ; mov qword ptr [rsp + 0x48], rdx ; lea rdx, [rip + 0x3a96f] ; mov qword ptr [rsp + 0x40], rcx
read: r12 r13 r14 r15 r9 rbp rbx rcx rdi rdx rsp si 
000fbaf0: CLP; mov rdi, qword ptr [rip + 0x271ccd] ; xor eax, eax ; test byte ptr [rdi], 0x30 ; jne 0xfbc23
write: eax rdi rflags 
000fbd00: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; mov r13, rdx ; push r12 ; push rbx ; mov rbx, rsi ; sub rsp, 0x4b8 ; mov qword ptr [rbp - 0x4c8], rdi ; lea rdi, [rip + 0x3a63f] ; call 0x3898c
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r13 rbp rbx rdi rflags rsp 
000fc200: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x50] ; lea rax, [rdi - 1] ; cmp rax, -3 ; jbe 0xfc21c
read: rax rbx rdi rflags rsp 
write: rax rbx rdi rflags rsp 
000fc2f0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; mov rdi, rsi ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; lea r14, [rbx + 0x50] ; sub rsp, 0x28 ; lea r15, [rsp + 0x10] ; mov qword ptr [rsp + 8], rdx ; call 0xfc1fc
read: r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
write: r13 r14 r15 rbx rdi rflags rsp 
000fc490: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rbx + 0x20] ; add rax, qword ptr [rbx + 0x28] ; mov rdi, qword ptr [rdi + 0x30] ; cmp rdi, rax ; jae 0xfc524
read: rax rbp rbx rdi rflags rsp 
write: rax rbx rdi rflags rsp 
000fc530: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; mov rdi, qword ptr [rdi] ; test rdi, rdi ; je 0xfc583
read: rbp rbx rdi rflags rsi rsp 
write: rbp rbx rdi rflags rsp 
000fc5a0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; lea rsi, [rsi + 0x48] ; lea rdi, [rbx + 0x40] ; sub rsp, 8 ; call 0xfc52c
read: rbp rbx rdi rip rsi rsp 
write: rbp rbx rdi rflags rsi rsp 
000fc5f0: CLP; push rbx ; mov esi, 1 ; mov rbx, rdi ; xor eax, eax ; cmp dword ptr [rip + 0x27216e], 0 ; je 0xfc610
read: eax rbx rdi rflags rsp 
000fc6f0: CLP; push rbx ; mov rbx, rdi ; call 0xfc1fc
read: rbx rdi rip rsp 
000fc7e0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rcx ; sub rsp, 0x48 ; mov qword ptr [rsp + 0x20], rdi ; mov rdi, qword ptr [rcx + 0x50] ; mov qword ptr [rsp + 0x28], rsi ; mov qword ptr [rsp + 0x30], rdx ; mov qword ptr [rsp + 8], r8 ; mov qword ptr [rsp + 0x10], r9 ; test rdi, rdi
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
write: rbx rdi rflags rsp 
000fca10: CLP; push r12 ; xor eax, eax ; mov r12, rcx ; push rbp ; mov rbp, rsi ; mov esi, 1 ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; cmp dword ptr [rip + 0x271d41], 0 ; je 0xfca3d
read: eax r12 rbp rbx rcx rdi rflags rsi rsp 
000fcae0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x4c8 ; mov eax, dword ptr [rip + 0x271eb6] ; mov qword ptr [rsp + 0x40], rdi ; mov qword ptr [rsp + 8], rdx ; mov qword ptr [rsp + 0x28], rcx ; cmp eax, 0 ; jle 0xfceaa
read: eax r12 r13 r14 r15 rbp rbx rcx rdi rdx rflags rsi rsp 
000fcf20: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov ecx, dword ptr [rip + 0x27183a] ; test ecx, ecx ; jne 0xfcf6c
read: ecx rbp rbx rdi rflags rsi rsp 
000fd1c0: CLP; push rbx ; mov r10, rsi ; mov r9, rdi ; mov rbx, rcx ; mov esi, 1 ; xor eax, eax ; sub rsp, 0x40 ; cmp dword ptr [rip + 0x271594], 0 ; je 0xfd1ea
read: eax rbx rcx rdi rflags rsi rsp 
000fd3b0: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rip + 0x2713a5], 0 ; je 0xfd3d9
read: eax r12 r13 rbp rbx rdi rflags rsp 
000fd550: CLP; push r15 ; push r14 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x38 ; cmp byte ptr [rip + 0x2703ab], 0 ; mov qword ptr [rsp + 0x18], r8 ; je 0xfd6e4
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
000fe550: CLP; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x30 ; call 0xe48fc
read: r12 rbp rbx rdi rip rsp 
000fe5f0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; jmp 0xfe611
read: rbp rbx rdi rsp 
000fe640: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x38 ; lea r12, [rsp + 0x10] ; mov dword ptr [rsp + 0x10], 0 ; mov dword ptr [rsp + 0x14], 0 ; mov dword ptr [rsp + 0x18], 0 ; mov qword ptr [rsp + 0x20], 0 ; mov rdi, r12 ; mov qword ptr [rsp + 0x28], 0 ; call 0xfed9c
write: r12 rdi rflags rsp 
000fea40: CLP; push r12 ; push rbp ; mov rbp, qword ptr [rip + 0x26a41a] ; push rbx ; mov rdi, qword ptr [rdi + 0x10] ; mov r12d, dword ptr fs:[rbp] ; test rdi, rdi ; jne 0xfea5f
read: r12 rbp rbx rdi rflags rsp 
write: r12d rbp rdi rflags rsp 
000fea80: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x88 ; mov eax, dword ptr [rdi + 8] ; mov qword ptr [rbp - 0x78], 0x1000 ; sub rsp, 0x1010 ; lea r14, [rsp + 0xf] ; and r14, 0xfffffffffffffff0 ; test eax, eax
read: eax r12 r13 r14 r15 rbp rbx rdi rsp 
000fed90: CLP; movsxd rdi, dword ptr [rdi] ; mov eax, 3 ; syscall ; ret
write: eax rdi 
000feda0: CLP; push rbp ; xor edx, edx ; mov esi, 3 ; push rbx ; mov rbx, rdi ; mov edi, 0x10 ; sub rsp, 0x28 ; call 0xe483c
read: edx rbp rbx rdi rip rsp 
000fee60: CLP; push rbp ; mov rbp, rsp ; push r15 ; lea rax, [rbp - 0x50] ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rax ; sub rsp, 0xa8 ; mov qword ptr [rbp - 0x98], rdi ; mov qword ptr [rdi], 0 ; mov rdi, rax ; mov dword ptr [rbp - 0x50], 0 ; mov dword ptr [rbp - 0x4c], 0
read: r12 r13 r14 r15 rax rbp rbx rdi rsp 
write: rax rbp rbx rdi rflags rsp 
000ffa40: CLP; push rbx ; mov rbx, rdi ; nop dword ptr [rax + rax] ; mov rdi, rbx ; call 0xfee5c
read: rbx rdi rip rsp 
write: rbx rdi rsp 
000ffa90: CLP; push rbp ; mov rbp, rdi ; push rbx ; movsxd rbx, esi ; sub rsp, 8 ; mov rax, qword ptr [rdi] ; cmp ebx, 1 ; lea rdx, [rax - 0x10] ; je 0xffaf4
read: ebx esi rbp rbx rdi rflags rsp 
000ffb10: CLP; push r12 ; lea eax, [rdx - 1] ; mov r12d, esi ; push rbp ; cmp eax, 1 ; push rbx ; mov rbx, rdi ; jbe 0xffb27
read: eax esi r12 rbp rbx rdi rflags rsp 
000ffc30: CLP; lea eax, [rdi + 9] ; and eax, 0xfffffff8 ; add eax, 0x10 ; ret
000ffcf0: CLP; cmp dword ptr [rdi + 8], 0x29 ; jne 0xffdac
000ffdc0: CLP; cmp dword ptr [rdi + 8], 0x29 ; jne 0xffe8c
00100580: CLP; test rdi, rdi ; mov eax, 2 ; je 0x1005b4
read: rdi rflags 
001006e0: CLP; push rbp ; mov ebp, ecx ; push rbx ; mov ebx, esi ; mov rsi, rdx ; movsxd rax, ebx ; mov edx, ecx ; sub rsp, 8 ; add rdi, rax ; call 0x8e3dc
read: ebx ecx esi rax rbp rbx rdi rdx rip rsp 
write: ebp ebx edx rax rdi rflags rsi rsp 
00100810: CLP; push rbp ; mov rax, rdx ; mov edx, ecx ; mov ebp, ecx ; push rbx ; mov ebx, esi ; movsxd rsi, esi ; add rsi, rdi ; mov rdi, rax ; sub rsp, 8 ; call 0x8e3dc
read: ecx esi rax rbp rbx rdi rdx rip rsi rsp 
write: ebp ebx edx rax rdi rflags rsi rsp 
001008d0: CLP; cmp byte ptr [rdi + 2], 0 ; jne 0x100914
00100920: CLP; push r12 ; mov eax, 0xffffffff ; push rbp ; push rbx ; cmp byte ptr [rdi + 2], 0 ; mov rbx, rdi ; jne 0x1009e4
read: r12 rbp rbx rdi rflags rsp 
001009f0: CLP; cmp byte ptr [rdi + 2], 0 ; jne 0x100a0c
00100a20: CLP; cmp byte ptr [rdi + 2], 0 ; jne 0x100a4c
00101080: CLP; push r15 ; xor eax, eax ; push r14 ; push r13 ; mov r13, rsi ; mov esi, 1 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; mov qword ptr [rdx], 0 ; mov qword ptr [rcx], 0
read: eax r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
001012e0: CLP; test rdi, rdi ; mov rdx, rdi ; je 0x10138c
read: rdi rflags 
00101720: CLP; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, edx ; push rbx ; mov ebx, edx ; sub rsp, 0x10 ; test edx, edx ; js 0x10185c
read: edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
00101900: CLP; push rbp ; push rbx ; sub rsp, 0x48 ; test rdi, rdi ; je 0x1019ac
read: rbp rbx rdi rflags rsp 
001019c0: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x28 ; mov rax, qword ptr [rip + 0x26748c] ; mov qword ptr [rsp + 8], rsi ; mov dword ptr [rsp + 0x10], 0 ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rsp + 4], eax ; mov rax, qword ptr [rip + 0x267471] ; mov dword ptr fs:[rax], 0
read: eax r12 r13 r14 r15 rbp rbx rdi rsi rsp 
00101b20: CLP; push r12 ; mov r12, rsi ; lea rsi, [rip + 0x357ab] ; xor eax, eax ; push rbp ; mov ebp, edx ; push rbx ; sub rsp, 0x10 ; movzx ecx, byte ptr [rdi + 1] ; movzx edx, byte ptr [rdi] ; movzx r9d, byte ptr [rdi + 3] ; movzx r8d, byte ptr [rdi + 2] ; mov rdi, rsp ; call 0x5231c
write: eax ebp ecx edx r12 r8d r9d rdi rflags rsi rsp 
00101ea0: CLP; lea r8, [rsp - 0x18] ; mov byte ptr [rsp - 0x18], 0 ; xor r9d, r9d ; xor ecx, ecx ; nop dword ptr [rax + rax] ; add rdi, 1 ; movsx eax, byte ptr [rdi - 1] ; test eax, eax ; je 0x101f05
read: eax ecx r9d rdi rflags 
write: eax ecx r8 r9d rdi rflags 
00102210: CLP; push rbx ; xor eax, eax ; nop word ptr [rax + rax] ; movzx ecx, byte ptr [rdi] ; test cl, cl ; je 0x1022ec
001023c0: CLP; push r14 ; push r13 ; lea r13, [rip + 0x308a1] ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; movzx eax, byte ptr [rsi] ; mov rbx, rsi ; nop dword ptr [rax] ; test al, al ; je 0x10257a
read: al r12 r13 r14 rbp rbx rdi rflags rsi rsp 
001025b0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x2078 ; mov rax, qword ptr [rip + 0x26c1b9] ; test esi, esi ; mov qword ptr [rdi + 0x230], rax ; je 0x102eb8
read: esi r12 r13 r14 r15 rax rbp rbx rdi rflags rsp 
001030b0: CLP; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; movsxd rdi, dword ptr [rdi + 0x1f4] ; test edi, edi ; js 0x1030e3
read: edi esi r12 r13 rbp rbx rdi rflags rsp 
write: r12d rbp rdi rflags rsp 
00103180: CLP; movzx edx, byte ptr [rdi] ; mov rax, rdi ; test dl, dl ; je 0x1031bc
read: dl rdi rflags 
001031d0: CLP; push r15 ; push r14 ; mov r14d, esi ; push r13 ; push r12 ; mov r12d, 1 ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; mov rbp, qword ptr [rip + 0x265c3b] ; mov qword ptr [rsp + 8], rdi ; nop word ptr [rax + rax] ; mov rdi, rbx ; call 0x10317c
read: esi r12 r13 r14 r15 rbp rbx rdi rdx rip rsp 
write: r12d r14d rbp rbx rdi rflags rsp 
001033a0: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; call 0x10317c
read: r12 r13 rbp rbx rdi rip rsp 
00103470: CLP; push r13 ; mov r13d, esi ; lea rsi, [rip + 0x31386] ; push r12 ; mov r12, rdi ; push rbp ; mov ebp, ecx ; push rbx ; mov rbx, rdx ; mov edx, 2 ; mov rdi, rbx ; sub rsp, 0x18 ; call 0x8bd2c
read: ecx esi r12 r13 rbp rbx rdi rdx rip rsp 
write: ebp edx r12 r13d rbx rdi rflags rsi rsp 
00103570: CLP; push r15 ; xor eax, eax ; mov ecx, 9 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x138 ; mov rdi, qword ptr [rip + 0x26589d] ; rep stosq qword ptr [rdi], rax ; lea rdi, [rip + 0x33dcc] ; call 0x3819c
read: eax r12 r13 r14 r15 rax rbp rbx rcx rdi rflags rip rsp 
write: eax ecx rcx rdi rflags rsp 
00103d60: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x18 ; mov qword ptr [rsp + 8], rdi ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
00103e80: CLP; push rbx ; mov rax, qword ptr fs:[0] ; add rax, qword ptr [rip + 0x26515b] ; nop dword ptr [rax - 0x34] ; mov rdi, qword ptr [rax] ; mov ecx, dword ptr [rdi] ; test ecx, ecx ; jne 0x103ea4
write: ecx rax rdi rflags rsp 
00103f50: CLP; push rbx ; test byte ptr [rdi + 8], 1 ; mov rbx, rdi ; je 0x103f9c
read: rbx rdi rflags rsp 
00104010: CLP; push r12 ; xor eax, eax ; mov ecx, 0x10 ; mov r12, rsi ; push rbp ; mov ebp, edi ; push rbx ; add rsp, -0x80 ; mov rdi, rsp ; rep stosq qword ptr [rdi], rax ; mov dword ptr [rsp + 0x10], edx ; mov dword ptr [rsp], ebp ; mov dword ptr [rsp + 8], 0xffffffc4 ; call 0xb3dbc
read: eax ebp edi edx r12 rax rbp rbx rcx rdi rflags rip rsi rsp 
write: eax ebp ecx r12 rcx rdi rflags rsp 
00104090: CLP; cmp rdi, rsi ; je 0x1040b4
read: rdi rflags rsi 
001040c0: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov rax, qword ptr [rip + 0x264d24] ; mov qword ptr [rsp + 0x18], 0 ; mov r12, qword ptr fs:[rax] ; lea rax, [rsp + 0x18] ; mov qword ptr [rsp + 8], rax ; nop dword ptr [rax + rax] ; movzx eax, byte ptr [rbp]
read: r12 r13 r14 r15 rax rbp rbx rdi rsp 
001044f0: CLP; push r12 ; test rdi, rdi ; mov r12, rdi ; push rbp ; push rbx ; je 0x104556
read: r12 rbp rbx rdi rflags rsp 
00104560: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov r12, qword ptr [rdi + 0x20] ; test r12, r12 ; je 0x10459c
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
001047c0: CLP; push r15 ; xor eax, eax ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; mov esi, 1 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rcx ; sub rsp, 0x58 ; cmp dword ptr [rip + 0x269f8b], 0 ; je 0x1047f3
read: eax r12 r13 r14 r15 rbp rbx rcx rdi rflags rsi rsp 
00104c50: CLP; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; lea rbp, [rip + 0x263d7a] ; push rbx ; xor ebx, ebx ; sub rsp, 8 ; nop dword ptr [rax] ; mov rsi, rbp ; mov rdi, r12 ; call 0x83c8c
read: ebx r12 r13 rbp rbx rdi rip rsi rsp 
write: ebx r12 r13 rbp rdi rflags rsi rsp 
00104d90: CLP; push rbp ; xor eax, eax ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbx ; sub rsp, 0x18 ; mov qword ptr [rbp - 0x38], rsi ; mov esi, 1 ; cmp dword ptr [rip + 0x2699ba], 0 ; je 0x104dc4
read: eax r12 r13 r14 r15 rbp rbx rdi rflags rsi rsp 
00104fa0: CLP; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi] ; call 0x104d8c
read: r12 r13 rbp rbx rcx rdi rdx rip rsi rsp 
write: r12 r13 rbp rbx rdi rflags rsp 
00105070: CLP; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; test r9d, r9d ; je 0x10511c
read: r12 r13 r9d rbp rbx rcx rdi rdx rflags rsi rsp 
00105170: CLP; sub rsp, 8 ; lea rsi, [rip + 0x37161] ; mov byte ptr [rip + 0x268cb2], 1 ; xor rdi, qword ptr fs:[0x30] ; rol rdi, 0x11 ; mov qword ptr [rip + 0x268c96], rdi ; lea rdi, [rip + 0x322de] ; call 0x104bec
read: rdi rip rsp 
write: rdi rflags rsi rsp 
00105230: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, r8 ; push rbx ; mov rbx, r9 ; sub rsp, 0x28 ; mov rsi, qword ptr [rdx] ; test rsi, rsi ; je 0x105307
read: r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rflags rsi rsp 
001053e0: CLP; push r15 ; mov r15, rdi ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x28 ; mov eax, dword ptr [rsp + 0x68] ; mov dword ptr [rsp + 0xc], r9d ; mov rbp, qword ptr [rsp + 0x60]
read: r12 r13 r14 r15 r8 r9d rbp rbx rcx rdi rdx rsi rsp 
00105510: CLP; push r15 ; mov r15, rcx ; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, r8 ; push rbx ; mov rbx, rdx ; sub rsp, 0x18 ; test r9d, r9d ; je 0x105551
read: r12 r13 r14 r15 r8 r9d rbp rbx rcx rdi rdx rflags rsi rsp 
00105600: CLP; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdx ; sub rsp, 0x58 ; mov edx, dword ptr [rsp + 0x98] ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x18], r9 ; test edx, edx ; je 0x105655
read: edx r12 r13 r14 r15 r9 rbp rbx rcx rdi rdx rflags rsi rsp 
001058e0: CLP; push r15 ; mov r15, r9 ; push r14 ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; mov rbp, rcx ; push rbx ; mov rbx, rdi ; sub rsp, 0x38 ; mov r12, qword ptr [rip + 0x2636eb] ; mov qword ptr [rsp + 8], rsi ; xor esi, esi ; mov qword ptr [rsp + 0x10], r8
read: esi r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
00105e50: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268987] ; test rax, rax ; je 0x105e9c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00105ed0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x26890f] ; test rax, rax ; je 0x105f1c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00105f50: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268897] ; test rax, rax ; je 0x105f9c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00105fe0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x26880f] ; test rax, rax ; je 0x10602c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106070: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268787] ; test rax, rax ; je 0x1060bc
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106100: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2686ff] ; test rax, rax ; je 0x10614c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106190: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268677] ; test rax, rax ; je 0x1061dc
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106210: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2685ff] ; test rax, rax ; je 0x10625c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106290: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268587] ; test rax, rax ; je 0x1062dc
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106320: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2684ff] ; test rax, rax ; je 0x10636c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
001063a0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268487] ; test rax, rax ; je 0x1063ec
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106430: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x2683ff] ; test rax, rax ; je 0x10647c
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
001064b0: CLP; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rax, qword ptr [rip + 0x268387] ; test rax, rax ; je 0x1064fc
read: r12 r13 rax rbp rbx rcx rdi rdx rflags rsi rsp 
00106540: CLP; xor eax, eax ; test rdi, rdi ; je 0x106567
read: eax rdi rflags 
001065b0: CLP; push rbx ; lea rsi, [rip + 0x26790c] ; sub rsp, 0x30 ; mov rax, qword ptr [rip + 0x267939] ; mov rcx, qword ptr [rip + 0x267922] ; mov rdx, qword ptr [rip + 0x267923] ; mov rdi, rsp ; mov qword ptr [rip + 0x2678c9], rax ; mov qword ptr [rip + 0x2678aa], rax ; lea rax, [rip + 0x260053] ; mov qword ptr [rip + 0x2678a4], rcx ; mov qword ptr [rip + 0x2678a5], rdx ; mov qword ptr [rip + 0x26787e], rcx ; mov qword ptr [rip + 0x26787f], rdx ; xor ecx, ecx
write: ecx rax rcx rdi rdx rflags rsi rsp 
00106710: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113a7c
read: rbp rbx rdi rip rsi rsp 
00106a90: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; mov r13d, 0x10 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0xc8 ; mov qword ptr [rsp + 0x38], rsi ; mov qword ptr [rsp + 0x10], rcx ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x28], r9 ; call 0x1113bc
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rip rsi rsp 
00106cf0: CLP; push r13 ; mov r13, rdi ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; sub rsp, 0x68 ; call 0x1113bc
read: r12 r13 rbp rbx rdi rip rsi rsp 
00106e40: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; mov rbx, rdi ; sub rsp, 0x88 ; mov qword ptr [rbp - 0x80], rsi ; mov qword ptr [rbp - 0x88], rdx ; mov qword ptr [rbp - 0x90], rcx ; mov qword ptr [rbp - 0x98], r8 ; mov qword ptr [rbp - 0xa0], r9 ; call 0x1113bc
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rip rsi rsp 
001071b0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; lea r14, [rbp - 0x6c] ; push r13 ; lea r13, [rbp - 0x68] ; push r12 ; lea r12, [rbp - 0x50] ; push rbx ; mov ebx, 0x400 ; sub rsp, 0x68 ; mov qword ptr [rbp - 0x80], rdx ; mov qword ptr [rbp - 0x78], rsi
read: r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
001072d0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; lea rdi, [rsp + 8] ; call 0xffa3c
read: rbx rdi rip rsp 
write: rbx rdi rflags rsp 
001073a0: CLP; push r14 ; mov r14, rdi ; push r13 ; mov r13, rsi ; push r12 ; movsxd r12, edx ; push rbp ; movzx ebp, cx ; push rbx ; sub rsp, 0x50 ; lea rbx, [rsp + 0x20] ; mov dword ptr [rsp + 0x18], 0xffffffff ; mov rdi, rbx ; call 0x1072cc
read: cx edx r12 r13 r14 rbp rbx rdi rip rsi rsp 
write: ebp r12 r13 r14 rbx rdi rflags rsp 
001074f0: CLP; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x50 ; lea rbx, [rsp + 0x20] ; mov dword ptr [rsp + 0x18], 0xffffffff ; mov rdi, rbx ; call 0x1072cc
read: r12 rbp rbx rdi rip rsi rsp 
write: r12 rbp rbx rdi rflags rsp 
001075f0: CLP; push r12 ; mov edx, 0x6f00 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x20 ; mov word ptr [rdi + 2], dx ; mov qword ptr [rsp + 0x18], 0 ; call 0x11111c
read: dx r12 rbp rbx rdi rip rsp 
00107700: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x113a7c
read: rbp rbx rdi rip rsi rsp 
00107770: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov r13d, dword ptr [rdi] ; lea r12, [rsp + 4] ; mov qword ptr [rsp + 8], 0 ; nop dword ptr [rax] ; xor eax, eax ; cmp qword ptr [rbx], 0 ; mov rsi, r12 ; mov rdi, rbp
read: eax r12 r13 rbp rbx rdi rsi rsp 
write: eax r12 r13d rbp rbx rdi rflags rsi rsp 
00107850: CLP; push rbp ; lea rcx, [rip + 0xc224] ; mov edx, 8 ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; mov rax, qword ptr [rsi] ; lea rsi, [rsp + 8] ; mov qword ptr [rsp + 8], rax ; call 0x11495c
read: rax rbp rbx rdi rip rsi rsp 
001078d0: CLP; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; call 0x113a7c
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
001079f0: CLP; push r15 ; mov r15, rsi ; mov esi, 0x186a0 ; push r14 ; mov r14, rdx ; mov edx, 2 ; push r13 ; mov r13, rcx ; mov ecx, 0x6f00 ; push r12 ; mov r12, r9 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x88
read: r12 r13 r14 r15 r9 rbp rbx rcx rdi rdx rsi rsp 
00107b20: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0x29c8 ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 8], r9 ; call 0x10e1dc
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rip rsi rsp 
001081f0: CLP; push r12 ; xor r12d, r12d ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; call 0x113eec
read: r12 r12d rbp rbx rdi rip rsi rsp 
00108270: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113eec
read: rbp rbx rdi rip rsi rsp 
001082c0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x10826c
read: rbp rbx rdi rip rsi rsp 
00108380: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113a7c
read: rbp rbx rdi rip rsi rsp 
001083f0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; mov qword ptr [rsi + 0x10], 2 ; mov eax, dword ptr [rdi] ; mov dword ptr [rsi + 8], 0 ; test eax, eax ; je 0x10841c
read: eax rbp rbx rdi rflags rsi rsp 
00108480: CLP; mov eax, dword ptr [rdi + 0x10] ; test eax, eax ; je 0x1084bc
001085a0: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; mov eax, dword ptr [rdi] ; mov rbx, rsi ; test eax, eax ; jne 0x1085e4
read: eax r12 rbp rbx rdi rflags rsi rsp 
001089b0: CLP; mov rax, qword ptr [rsi + 0x30] ; mov edx, dword ptr [rip + 0x265532] ; mov qword ptr [rdi + 0x18], rax ; mov rax, qword ptr [rsi + 0x38] ; mov qword ptr [rdi + 0x20], rax ; mov rax, qword ptr [rsi + 0x40] ; mov qword ptr [rdi + 0x28], rax ; mov rax, qword ptr [rdi + 0x38] ; mov dword ptr [rax + 0x28], edx ; movsxd rdx, dword ptr [rdi + 0x18] ; mov dword ptr [rax + 0x38], 0 ; mov eax, 2 ; cmp edx, 3 ; jbe 0x1089ec
00108a10: CLP; push r15 ; mov r15, rsi ; mov ecx, 1 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x48 ; mov rbx, qword ptr [rdi + 0x30] ; lea rbp, [rsp + 0x10] ; lea rax, [rbx + 0x28] ; mov rdi, rbp ; mov qword ptr [rbx + 8], rax
read: r12 r13 r14 r15 rax rbp rbx rdi rsi rsp 
write: ecx r13 r15 rax rbp rbx rdi rflags rsp 
00108e20: CLP; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x2270 ; mov r12, qword ptr [rdi + 0x10] ; mov qword ptr [rsp + 8], 0 ; test r12, r12 ; je 0x108f84
00109220: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x109244
00109290: CLP; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x1092bc
read: eax r12 rbp rbx rdi rflags rsi rsp 
00109360: CLP; mov eax, dword ptr [rdi] ; mov rdx, qword ptr [rdi + 0x18] ; test eax, eax ; je 0x1093a4
001093c0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdx, qword ptr [rdi + 0x60] ; mov eax, dword ptr [rdi + 0x48] ; and edx, 3 ; mov rbp, rdx ; add rbp, qword ptr [rdi + 0x50] ; sub eax, edx ; mov edx, eax ; mov rdi, qword ptr [rdi] ; mov rsi, rbp ; call qword ptr [rbx + 0x40]
read: eax edx rbp rbx rdi rdx rsp 
write: eax edx rbp rbx rdi rdx rflags rsi rsp 
00109420: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; test rbx, rbx ; jle 0x109458
read: rbp rbx rdi rflags rsi rsp 
00109490: CLP; push rbx ; mov rbx, qword ptr [rdi + 0x18] ; mov rdi, qword ptr [rbx + 8] ; call 0x1f46c
write: rbx rdi rsp 
001094c0: CLP; push rbp ; mov rbp, rdi ; mov edx, 1 ; xor esi, esi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x18] ; mov edi, dword ptr [rbx] ; call 0xe35bc
read: esi rbp rbx rdi rip rsp 
00109530: CLP; push r12 ; mov r12d, esi ; push rbp ; mov rbp, qword ptr [rdi + 0x18] ; push rbx ; mov rbx, rdi ; call 0x1094bc
read: esi r12 rbp rbx rdi rip rsp 
001095c0: CLP; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rdi ; test ebp, ebp ; jle 0x10962d
read: ebp edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
00109640: CLP; push rbx ; mov edx, 4 ; mov rbx, rdi ; sub rsp, 0x10 ; lea rsi, [rsp + 0xc] ; call 0x1095bc
read: rbx rdi rip rsp 
001096a0: CLP; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov ebp, edx ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x18] ; test ebp, ebp ; je 0x10971c
00109730: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov rax, qword ptr [rdi + 0x18] ; mov rcx, qword ptr [rax + 0x68] ; mov r8, qword ptr [rax + 0x58] ; cmp rcx, 3 ; jle 0x109757
001097c0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov rax, qword ptr [rdi + 0x18] ; cmp qword ptr [rax + 0x68], 3 ; mov rcx, qword ptr [rax + 0x58] ; jle 0x1097e4
00109850: CLP; push rbp ; mov edx, 0 ; mov eax, 0x80000000 ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp esi, 1 ; mov rbp, qword ptr [rdi + 0x20] ; cmovne eax, edx ; mov rdx, qword ptr [rdi + 0x30] ; mov rsi, qword ptr [rdi + 0x18] ; mov rdi, qword ptr [rdi] ; mov rcx, rbp ; sub rcx, rdx ; sub rbp, rsi
read: eax edx esi rbp rbx rcx rdi rdx rflags rsi rsp 
write: eax edx rbp rbx rcx rdi rdx rflags rsi rsp 
001098c0: CLP; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x18] ; mov rdx, qword ptr [rbx + 0x20] ; lea rax, [rdx + 4] ; cmp rax, qword ptr [rbx + 0x28] ; mov qword ptr [rbx + 0x20], rax ; ja 0x1098fc
00109930: CLP; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x18] ; mov rax, qword ptr [rbx + 0x20] ; lea rdx, [rax + 4] ; cmp rdx, qword ptr [rbx + 0x28] ; mov qword ptr [rbx + 0x20], rdx ; ja 0x10996c
001099a0: CLP; push r14 ; test edx, edx ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; mov ebx, edx ; mov r12, qword ptr [rdi + 0x18] ; je 0x109a05
00109a50: CLP; push r15 ; mov r15, rcx ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; mov edi, 0x80 ; push rbp ; mov ebp, esi ; push rbx ; sub rsp, 0x28 ; mov dword ptr [rsp + 0xc], edx ; mov qword ptr [rsp + 0x10], r8 ; mov qword ptr [rsp + 0x18], r9 ; call 0x1f3cc
read: edx esi r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rip rsp 
00109be0: CLP; push rbx ; mov rbx, qword ptr [rdi + 0x18] ; mov rsi, qword ptr [rbx + 0x68] ; test rsi, rsi ; jg 0x109c0c
00109c50: CLP; push rbx ; mov rbx, qword ptr [rdi + 0x18] ; mov rsi, qword ptr [rbx + 0x68] ; test rsi, rsi ; jg 0x109c7e
00109cd0: CLP; sub rsp, 8 ; test esi, esi ; mov rdi, qword ptr [rdi + 0x18] ; jne 0x109d24
write: rdi rflags rsp 
00109d50: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x18 ; mov rdx, qword ptr [rip + 0x2641b1] ; test rdx, rdx ; je 0x109dfa
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00109e50: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x28 ; mov rdx, qword ptr [rip + 0x26409e] ; test rdx, rdx ; je 0x109f10
read: r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00109f70: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113eec
read: rbp rbx rdi rip rsi rsp 
0010a010: CLP; push rbp ; mov edx, 8 ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x113f6c
read: rbp rbx rdi rip rsi rsp 
0010a280: CLP; mov rcx, qword ptr [rdi + 8] ; mov r9, qword ptr [rdi] ; push rbx ; mov rax, rcx ; shr rax, 4 ; xor rax, r9 ; and eax, 0xf0f0f0f ; xor r9, rax ; shl rax, 4 ; xor rax, rcx ; mov rcx, r9 ; shr rcx, 0x10 ; xor rcx, rax ; movzx ecx, cx ; xor rax, rcx
0010ad80: CLP; lea rcx, [rdi + 8] ; lea rdx, [rip + 0x290f1] ; nop ; movzx eax, byte ptr [rdi] ; add rdi, 1 ; and eax, 0x7f ; movzx eax, byte ptr [rdx + rax] ; mov byte ptr [rdi - 1], al ; cmp rdi, rcx ; jne 0x10ad8c
read: al eax rcx rdi rflags 
write: eax rcx rdi rdx rflags 
0010ae30: CLP; push rbp ; mov edx, 0xff ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x11418c
read: rbp rbx rdi rip rsi rsp 
0010ae80: CLP; push rbp ; mov edx, 0xff ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x11418c
read: rbp rbx rdi rip rsi rsp 
0010aee0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113eec
read: rbp rbx rdi rip rsi rsp 
0010af40: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x11399c
read: rbp rbx rdi rip rsi rsp 
0010afc0: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113eec
read: rbp rbx rdi rip rsi rsp 
0010b020: CLP; push rbp ; mov edx, 0x30 ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x113f6c
read: rbp rbx rdi rip rsi rsp 
0010b090: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call 0x113eec
read: rbp rbx rdi rip rsi rsp 
0010b0f0: CLP; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov rdi, rsp ; call 0xd721c
read: r12 r13 rbp rbx rdi rdx rip rsi rsp 
write: r12 r13 rbp rdi rflags rsp 
0010b2a0: CLP; push r15 ; push r14 ; mov r14, rsi ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; mov edi, 2 ; push rbp ; push rbx ; sub rsp, 0x38 ; cmp rdx, 1 ; sbb ebx, ebx ; xor edx, edx ; add ebx, 2
read: ebx edx r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
0010b4b0: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x458 ; call 0x1113bc
read: r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
0010bb60: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov ebx, dword ptr [rdi + 0x20] ; cmp ebx, 0x3f ; ja 0x10bc64
read: ebx r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0010bdc0: CLP; mov rax, qword ptr [rdi + 0x10] ; mov rdx, qword ptr [rax + 0x90] ; mov qword ptr [rsi], rdx ; mov rdx, qword ptr [rax + 0x98] ; mov qword ptr [rsi + 8], rdx ; mov rax, qword ptr [rax + 0xa0] ; mov qword ptr [rsi + 0x10], rax ; ret
0010bdf0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x10] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0xc8], 2 ; add rdi, 0xc8 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
0010be30: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x10] ; mov eax, dword ptr [rbx + 4] ; test eax, eax ; jne 0x10be84
read: eax rbp rbx rdi rflags rsp 
0010bea0: CLP; cmp esi, 0xf ; mov r8, rdx ; mov rcx, qword ptr [rdi + 0x10] ; ja 0x10c07c
0010c090: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0xb8 ; mov rbx, qword ptr [rdi + 0x10] ; mov qword ptr [rsp + 0x28], rcx ; mov qword ptr [rsp + 0x48], rsi ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x18], r8 ; mov ecx, dword ptr [rbx + 0x18] ; mov qword ptr [rsp + 0x40], r9
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
0010c510: CLP; push r13 ; mov r13d, edx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; mov ebx, edx ; sub rsp, 8 ; test edx, edx ; jg 0x10c53b
read: edx r12 r13 rbp rbx rdi rflags rsi rsp 
0010c5a0: CLP; push r14 ; xor eax, eax ; push r13 ; mov r13, rsi ; push r12 ; movsxd r12, edx ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x70 ; test r12d, r12d ; mov rdi, qword ptr [rdi + 8] ; mov rsi, qword ptr [rbx + 0x10] ; je 0x10c6fb
read: eax edx r12 r12d r13 r14 rbp rbx rdi rflags rsi rsp 
write: eax r12 r13 rbx rdi rflags rsi rsp 
0010c780: CLP; push r15 ; mov r15, rdi ; mov edi, 0xf8 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x78 ; mov dword ptr [rsp + 4], r8d ; mov dword ptr [rsp + 8], r9d ; call 0x1f3cc
read: r12 r13 r14 r15 r8d r9d rbp rbx rcx rdi rdx rip rsi rsp 
0010cac0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
0010caf0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x10], 2 ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
0010cb20: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 0x40] ; call 0x11173c
read: rbp rbx rdi rip rsp 
0010ccc0: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x98 ; mov r13, qword ptr [rdi + 0x40] ; lea r12, [rsp + 0x20] ; lea rbp, [rsp + 0xc] ; jmp 0x10ccf1
read: r12 r13 rbp rbx rdi rsp 
0010cd90: CLP; push rbp ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x40] ; lea rbx, [rax + 0x10] ; mov dword ptr [rax + 0x10], 0 ; mov rax, qword ptr [rax + 8] ; mov rdi, rbx ; mov qword ptr [rsi], rax ; call 0x10837c
write: rax rbx rdi rflags rsp 
0010cde0: CLP; mov rdi, qword ptr [rdi + 0x40] ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0x10cdec
write: eax rdi rflags 
0010ce10: CLP; push r12 ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, qword ptr [rdi + 0x40] ; lea r12, [rbx + 0x10] ; mov dword ptr [rbx + 0x10], 1 ; mov rdi, r12 ; call 0x109bdc
write: r12 rbp rbx rdi rsp 
0010ce90: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x78 ; test edx, edx ; mov qword ptr [rsp + 8], rdi ; mov dword ptr [rsp + 0x1c], edx ; jle 0x10cfaf
read: edx r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0010d000: CLP; push r14 ; mov r14, rsi ; push r13 ; movsxd r13, edx ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x70 ; mov ebx, dword ptr [rdi] ; lea rbp, [rsp + 0x10] ; mov esi, 1 ; mov edx, 0x88b8 ; mov rdi, rbp ; mov word ptr [rsp + 0x14], si
read: edx r12 r13 r14 rbp rbx rdi rsi rsp si 
write: ebx edx esi r12 r13 r14 rbp rdi rflags rsp 
0010d4f0: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x40] ; mov rdi, qword ptr [rbx] ; call 0x1f46c
read: rbp rbx rdi rip rsp 
write: rbp rbx rdi rflags rsp 
0010d540: CLP; push rbp ; push rbx ; sub rsp, 0x18 ; cmp dword ptr [rsi + 0x10], 0xc ; mov rbx, qword ptr [rdi + 0x40] ; je 0x10d55c
0010d5e0: CLP; push r12 ; mov r12, rsi ; xor esi, esi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x40 ; mov rbx, qword ptr [rdi + 0x40] ; lea rdi, [rsp + 0x30] ; call 0x1f38c
read: esi r12 rbp rbx rdi rip rsi rsp 
write: esi r12 rbp rbx rdi rflags rsp 
0010d820: CLP; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x20 ; mov rbx, qword ptr [rdi + 0x40] ; lea r12, [rsp + 0x10] ; mov ecx, dword ptr [rbx + 0x20] ; test ecx, ecx ; jne 0x10d8a4
read: ecx r12 rbp rbx rdi rflags rsp 
0010d940: CLP; push r15 ; mov r15, rsi ; push r14 ; push r13 ; mov r13, rdi ; mov edi, 0x48 ; push r12 ; mov r12, r8 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x128 ; mov dword ptr [rsp + 4], edx ; call 0x1f3cc
read: edx r12 r13 r14 r15 r8 rbp rbx rcx rdi rip rsi rsp 
0010dbb0: CLP; push r14 ; mov r14, rdi ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov ebp, esi ; push rbx ; sub rsp, 0x410 ; lea rbx, [rsp + 0x10] ; mov rsi, rbx ; call 0x109d4c
read: esi r12 r13 r14 rbp rbx rcx rdi rdx rip rsp 
0010dc70: CLP; mov rax, rsi ; sub rsp, 8 ; mov rsi, qword ptr [rdi + 0x40] ; mov rcx, qword ptr [rax + 8] ; mov rdi, rax ; mov edx, dword ptr [rsi + 0x1c8] ; add rsi, 0x38 ; call qword ptr [rcx + 0x18]
write: edx rax rcx rdi rflags rsi rsp 
0010dca0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 0x40] ; mov rdi, qword ptr [rbp + 8] ; call 0x1f46c
read: rbp rbx rdi rip rsp 
write: rbp rbx rdi rflags rsp 
0010dd10: CLP; push r12 ; xor ecx, ecx ; mov edx, 0x190 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x30 ; mov r12, qword ptr [rdi + 0x40] ; mov rdi, rsp ; mov rbx, rsp ; lea rsi, [r12 + 0x38] ; call 0x11493c
read: ecx r12 rbp rbx rdi rip rsp 
write: ecx edx r12 rbp rbx rdi rflags rsi rsp 
0010dde0: CLP; push r14 ; push r13 ; xor r13d, r13d ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x70 ; mov rbx, qword ptr [rdi + 0x40] ; mov rsi, qword ptr [rbx + 8] ; cmp qword ptr [rdi + 8], rsi ; je 0x10de79
read: r12 r13 r13d r14 rbp rbx rdi rflags rsi rsp 
0010dff0: CLP; push r15 ; mov r15, rdi ; mov edi, 0x48 ; push r14 ; mov r14d, esi ; push r13 ; push r12 ; mov r12d, ecx ; push rbp ; mov rbp, r8 ; push rbx ; sub rsp, 0x218 ; mov dword ptr [rsp + 0xc], edx ; call 0x1f3cc
read: ecx edx esi r12 r13 r14 r15 r8 rbp rbx rdi rip rsp 
0010e1e0: CLP; push rbp ; mov esi, 0xff ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; lea r13, [rbp - 0x130] ; push r12 ; mov rdi, r13 ; push rbx ; sub rsp, 0x118 ; call 0xdcb9c
write: esi r13 rbp rdi rflags rsp 
0010e380: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; lea rdi, [rip + 0x2928c] ; push rbx ; sub rsp, 0xe8 ; mov qword ptr [rbp - 0x100], rsi ; mov qword ptr [rbp - 0xf8], rcx ; mov rsi, rcx ; mov qword ptr [rbp - 0x108], rdx ; mov ecx, 5
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: ecx r12 rbp rdi rflags rsi rsp 
0010e710: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; sub rsp, 0x438 ; mov rax, qword ptr [rdi + 8] ; lea rsi, [rsp + 0x10] ; call qword ptr [rax + 0x10]
0010e9f0: CLP; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x410 ; call 0x1114ac
read: r12 rbp rbx rdi rip rsp 
0010eb20: CLP; mov rax, qword ptr [rdi + 0x10] ; mov rdx, qword ptr [rax + 0x30] ; mov qword ptr [rsi], rdx ; mov rdx, qword ptr [rax + 0x38] ; mov qword ptr [rsi + 8], rdx ; mov rax, qword ptr [rax + 0x40] ; mov qword ptr [rsi + 0x10], rax ; ret
0010eb40: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x10] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x68], 2 ; add rdi, 0x68 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
0010eb80: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x10] ; mov eax, dword ptr [rbx + 4] ; test eax, eax ; jne 0x10ebcc
read: eax rbp rbx rdi rflags rsp 
0010ebe0: CLP; cmp esi, 0xf ; mov rcx, qword ptr [rdi + 0x10] ; ja 0x10ed34
0010ed40: CLP; push r15 ; push r14 ; push r13 ; mov r13, rdi ; push r12 ; push rbp ; push rbx ; sub rsp, 0xb8 ; mov rbx, qword ptr [rdi + 0x10] ; mov qword ptr [rsp + 0x28], rcx ; mov qword ptr [rsp + 0x48], rsi ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x18], r8 ; mov ecx, dword ptr [rbx + 0x18] ; mov qword ptr [rsp + 0x40], r9
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
0010f060: CLP; push r13 ; mov r13d, edx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; mov ebx, edx ; sub rsp, 8 ; test edx, edx ; jg 0x10f087
read: edx r12 r13 rbp rbx rdi rflags rsi rsp 
0010f0e0: CLP; push r14 ; xor eax, eax ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; test edx, edx ; mov rsi, qword ptr [rdi + 8] ; mov rdi, qword ptr [rdi + 0x10] ; je 0x10f164
read: eax edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
write: eax ebp r12 rbx rdi rflags rsi rsp 
0010f200: CLP; push r15 ; mov r15, rdi ; mov edi, 0x18 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x78 ; mov dword ptr [rsp + 8], r8d ; mov dword ptr [rsp + 0xc], r9d ; call 0x1f3cc
read: r12 r13 r14 r15 r8d r9d rbp rbx rcx rdi rdx rip rsi rsp 
0010f4e0: CLP; mov rax, qword ptr [rdi + 0x10] ; mov rdx, qword ptr [rax + 0x40] ; mov qword ptr [rsi], rdx ; mov rdx, qword ptr [rax + 0x48] ; mov qword ptr [rsi + 8], rdx ; mov rax, qword ptr [rax + 0x50] ; mov qword ptr [rsi + 0x10], rax ; ret
0010f500: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x10] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x58], 2 ; add rdi, 0x58 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
0010f540: CLP; cmp esi, 0xf ; mov rdi, qword ptr [rdi + 0x10] ; ja 0x10f70c
write: rdi rflags 
0010f720: CLP; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x10] ; mov eax, dword ptr [rbx + 4] ; test eax, eax ; jne 0x10f76c
read: eax rbp rbx rdi rflags rsp 
0010f780: CLP; push rbp ; mov rbp, rsp ; push r15 ; push r14 ; mov r14, rdi ; push r13 ; push r12 ; push rbx ; sub rsp, 0x1b8 ; mov r15, qword ptr [r14 + 0x10] ; mov qword ptr [rbp - 0x188], rcx ; mov qword ptr [rbp - 0x168], rdx ; movabs rdx, 0x20c49ba5e353f7cf ; mov qword ptr [rbp - 0x158], rsi ; mov qword ptr [rbp - 0x1a0], r8
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp 
0010ff50: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; mov edi, 0x18 ; push rbx ; sub rsp, 0xa8 ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x10], rdx ; mov qword ptr [rsp + 0x18], rcx ; mov qword ptr [rsp + 0x20], r8 ; mov qword ptr [rsp + 0x28], r9 ; call 0x1f3cc
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rip rsi rsp 
001102c0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; lea rdi, [rsp + 8] ; call 0xffa3c
read: rbx rdi rip rsp 
write: rbx rdi rflags rsp 
001105e0: CLP; push r14 ; xor eax, eax ; mov r14, r8 ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rcx ; push rbp ; mov rbp, rsi ; mov esi, 1 ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; cmp dword ptr [rip + 0x25e167], 0 ; je 0x110617
read: eax r12 r13 r14 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00110700: CLP; sub rsp, 0x18 ; lea rcx, [rip - 0x595f] ; lea rsi, [rip - 0x5946] ; lea r8, [rsp + 0xc] ; mov rdx, rdi ; mov edi, 1 ; call 0x1105dc
read: rdi rip rsp 
00110750: CLP; sub rsp, 0x78 ; xor eax, eax ; mov ecx, 0xe ; mov rdi, rsp ; lea rsi, [rip + 0x31a7] ; xor edx, edx ; rep stosq qword ptr [rdi], rax ; lea rcx, [rip - 0x56e5] ; mov r8, rsp ; mov edi, 9 ; call 0x1105dc
read: eax edx rax rcx rdi rflags rip rsp 
write: eax ecx edi edx r8 rcx rdi rflags rsi rsp 
001107b0: CLP; push rbx ; lea rcx, [rip - 0x58dc] ; mov rbx, rsi ; sub rsp, 0x20 ; mov rax, qword ptr [rsi] ; lea rsi, [rip - 0x599d] ; lea rdx, [rsp + 0x10] ; mov qword ptr [rsp + 0x10], rdi ; mov r8, rsp ; mov edi, 2 ; mov qword ptr [rsp + 0x18], rax ; call 0x1105dc
read: rax rbx rdi rip rsi rsp 
00110820: CLP; push rbx ; lea rcx, [rip - 0x594c] ; mov rbx, rsi ; sub rsp, 0x20 ; mov rax, qword ptr [rsi] ; lea rsi, [rip - 0x5a0d] ; lea rdx, [rsp + 0x10] ; mov qword ptr [rsp + 0x10], rdi ; mov r8, rsp ; mov edi, 3 ; mov qword ptr [rsp + 0x18], rax ; call 0x1105dc
read: rax rbx rdi rip rsi rsp 
00110890: CLP; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x38 ; mov rax, qword ptr [rsi] ; mov rdx, qword ptr [rsi + 8] ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rbx] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rip + 0x258506] ; mov rbp, qword ptr [rax] ; test rbp, rbp ; je 0x11090c
read: rax rbp rbx rdi rdx rflags rsp 
00110940: CLP; push rbp ; push rbx ; mov rbx, rdx ; sub rsp, 0x38 ; mov rax, qword ptr [rsi] ; mov rdx, qword ptr [rsi + 8] ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rbx] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rip + 0x25859e] ; mov rbp, qword ptr [rax] ; test rbp, rbp ; je 0x1109bc
read: rax rbp rbx rdi rdx rflags rsp 
001109f0: CLP; push rbp ; mov rbp, rdi ; xor r11d, r11d ; mov r10d, 2 ; mov edx, 1 ; mov esi, 0x186bd ; push rbx ; sub rsp, 0x38 ; mov rcx, qword ptr [rip + 0x2cb29] ; mov r8, qword ptr [rip + 0x2cb2a] ; lea rdi, [rsp + 0x20] ; lea r9, [rsp + 0x1c] ; mov dword ptr [rsp + 8], 0x190 ; mov dword ptr [rsp], 0x190 ; mov word ptr [rsp + 0x20], r10w
read: r10w r11d rbp rbx rdi rsp 
write: edx esi r10d r11d r8 r9 rbp rcx rdi rflags rsp 
00110af0: CLP; sub rsp, 0x18 ; lea rcx, [rip - 0x5d4f] ; lea rsi, [rip - 0x5ae6] ; lea r8, [rsp + 0xc] ; mov rdx, rdi ; mov edi, 8 ; call 0x1105dc
read: rdi rip rsp 
00110b40: CLP; push rbx ; lea rcx, [rip - 0x5c6c] ; mov rbx, rsi ; lea rsi, [rip - 0x5d86] ; mov rdx, rdi ; mov edi, 0xa ; sub rsp, 0x10 ; mov r8, rsp ; call 0x1105dc
read: rbx rdi rip rsi rsp 
00110c00: CLP; push r12 ; mov r12d, esi ; mov rsi, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x100 ; test rdx, rdx ; mov rbx, rsp ; je 0x110ce4
read: esi r12 rbp rbx rdi rdx rflags rsp 
00110d10: CLP; push r14 ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0xa0 ; test rsi, rsi ; mov byte ptr [rdi], 0 ; mov rbp, rsp ; je 0x110ef4
read: r12 r13 r14 rbp rbx rdi rdx rflags rsi rsp 
00110f30: CLP; push rbx ; mov rbx, rdi ; call 0xb3dcc
read: rbx rdi rip rsp 
00110f80: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov rdx, qword ptr [rip + 0x25d018] ; test rdx, rdx ; je 0x11103c
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rflags rsi rsp 
00111120: CLP; push rbp ; mov edx, 6 ; mov rbp, rdi ; mov esi, 1 ; mov edi, 2 ; push rbx ; sub rsp, 0x18 ; call 0xe483c
read: rbp rbx rdi rip rsp 
001111c0: CLP; push r15 ; mov r15, rsi ; xor esi, esi ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; push rbp ; mov ebp, ecx ; push rbx ; mov rbx, rdi ; mov edi, 0x6f00 ; sub rsp, 0x58 ; cmp ecx, 6 ; mov word ptr [rbx + 2], di
read: di ecx esi r12 r13 r14 r15 rbp rbx rdi rdx rsi rsp 
00111570: CLP; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; call 0x1113bc
read: r12 rbp rbx rdi rdx rip rsi rsp 
001115d0: CLP; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 8 ; mov ebp, dword ptr [rdi] ; call 0x1113bc
read: r12 r13 rbp rbx rdi rip rsp 
00111740: CLP; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov ebp, dword ptr [rdi] ; call 0x10717c
read: r12 r13 rbp rbx rdi rip rsp 
00111820: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; mov rsi, r12 ; mov rdi, rbp ; push rbx ; sub rsp, 0x18 ; lea rdx, [rsp + 8]
read: r12 r13 r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp 
write: r12 r13 r14 r15 rbp rdi rdx rflags rsi rsp 
00111900: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; sub rsp, 0x28 ; lea rdx, [rsp + 0x10] ; call 0x11156c
read: r12 rbp rdi rip rsi rsp 
001119a0: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov qword ptr [rsp + 0x40], rsi ; mov dword ptr [rsp + 8], 1 ; mov rsi, rsp ; mov dword ptr [rsp + 0x10], 0 ; mov dword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x38], rdx ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111a00: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp + 0x10], 0 ; mov rsi, rsp ; mov dword ptr [rsp + 0x30], 3 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111a50: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp + 0x10], 0 ; mov rsi, rsp ; mov dword ptr [rsp + 0x30], 4 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111aa0: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp + 0x10], 0 ; mov rsi, rsp ; mov dword ptr [rsp + 0x30], 5 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111af0: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 8] ; mov dword ptr [rsp + 0x20], esi ; mov dword ptr [rsp + 8], 1 ; mov rsi, rsp ; mov dword ptr [rsp + 0x10], 1 ; mov dword ptr [rsp + 0x18], 1 ; call qword ptr [rax + 0x18]
00111b30: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 8] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp + 0x10], 1 ; mov rsi, rsp ; mov dword ptr [rsp + 0x18], 1 ; mov dword ptr [rsp + 0x20], 5 ; call qword ptr [rax + 0x18]
00111b70: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp + 0x10], 0 ; mov rsi, rsp ; mov dword ptr [rsp + 0x30], 1 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111bc0: CLP; sub rsp, 0x68 ; mov rax, qword ptr [rdi + 0x28] ; mov qword ptr [rsp + 0x38], rsi ; mov dword ptr [rsp + 8], 1 ; mov rsi, rsp ; mov dword ptr [rsp + 0x10], 0 ; mov dword ptr [rsp + 0x30], 2 ; mov qword ptr [rsp + 0x18], rax ; mov rax, qword ptr [rdi + 0x30] ; mov qword ptr [rsp + 0x40], rdx ; mov qword ptr [rsp + 0x20], rax ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsp + 0x28], rax ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x18]
00111e60: CLP; push r15 ; mov r15d, 0x400 ; push r14 ; mov r14, rdi ; push r13 ; mov r13, -1 ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; call 0x10717c
read: r12 r13 r14 r15 rbp rbx rdi rip rsp 
00111f00: CLP; sub rsp, 0x88 ; movsxd rsi, edi ; mov ecx, 0x10 ; mov rdi, rsp ; xor eax, eax ; cld ; rep stosq qword ptr [rdi], rax ; mov rdi, rsp ; mov qword ptr [rsp], rsi ; call 0x111e5c
read: eax edi rax rcx rdi rflags rip rsi rsp 
write: eax ecx rcx rdi rflags rsi rsp 
00112080: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
001120b0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x40] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x10], 2 ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
001120e0: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 0x40] ; call 0x11173c
read: rbp rbx rdi rip rsp 
00112280: CLP; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov r13, qword ptr [rdi + 0x40] ; lea rbx, [rsp + 0x10] ; lea r12, [rsp + 0xc] ; jmp 0x1122b1
read: r12 r13 rbp rbx rdi rsp 
00112330: CLP; push rbp ; push rbx ; sub rsp, 8 ; mov rax, qword ptr [rdi + 0x40] ; lea rbx, [rax + 0x10] ; mov dword ptr [rax + 0x10], 0 ; mov rax, qword ptr [rax + 8] ; mov rdi, rbx ; mov qword ptr [rsi], rax ; call 0x10837c
write: rax rbx rdi rflags rsp 
00112380: CLP; mov rdi, qword ptr [rdi + 0x40] ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0x11238c
write: eax rdi rflags 
001123b0: CLP; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, qword ptr [rdi + 0x40] ; lea rbp, [rbx + 0x10] ; mov dword ptr [rbx + 0x10], 1 ; mov rdi, rbp ; call 0x109bdc
write: r12 rbp rbx rdi rsp 
00112420: CLP; push r13 ; mov r13d, edx ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; mov ebx, edx ; sub rsp, 8 ; test edx, edx ; jg 0x112447
read: edx r12 r13 rbp rbx rdi rflags rsi rsp 
00112490: CLP; push r14 ; mov r14d, edx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x10 ; mov ebx, dword ptr [rdi] ; mov rbp, rsp ; mov ecx, 1 ; mov edx, 0x88b8 ; mov esi, 1 ; mov rdi, rbp
read: edx r12 r13 r14 rbp rbx rdi rsi rsp 
write: ebx ecx edx esi r12 r13 r14d rbp rdi rflags rsp 
001127e0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x48] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
00112810: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x48] ; mov rcx, rsi ; xor eax, eax ; mov rsi, rdx ; mov dword ptr [rdi + 0x10], 2 ; add rdi, 0x10 ; call rcx
read: eax rcx rdi rdx rsi rsp 
write: eax rcx rdi rflags rsi rsp 
00112840: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rbp, qword ptr [rdi + 0x48] ; call 0x11173c
read: rbp rbx rdi rip rsp 
001128b0: CLP; push r15 ; lea rax, [rdi + 0x60] ; lea r15, [rdi + 0x50] ; push r14 ; push r13 ; lea r13, [rdi + 0x98] ; push r12 ; mov r12, rdi ; push rbp ; lea rbp, [rdi + 0x14] ; push rbx ; sub rsp, 0x28 ; mov rbx, qword ptr [rdi + 0x48] ; lea r14, [rsp + 0x1c] ; mov qword ptr [rsp + 8], rsi
read: r12 r13 r14 r15 rbp rbx rdi rsi rsp 
00112c10: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; xor esi, esi ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rbx, qword ptr [rdi + 0x48] ; mov rax, qword ptr [rbx + 0x18] ; lea r12, [rbx + 0x10] ; mov dword ptr [rbx + 0x10], 0 ; mov rdi, r12
read: esi r12 r13 r14 r15 rbp rbx rdi rsi rsp 
write: esi r12 r13 rax rbp rbx rdi rflags rsp 
00113200: CLP; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; mov rbx, qword ptr [rdi + 0x48] ; cmp qword ptr [rbx + 0x1d0], 0 ; je 0x11325c
00113430: CLP; sub rsp, 8 ; mov qword ptr [rsi], 0 ; movzx edx, byte ptr [rdi] ; xor eax, eax ; test dl, dl ; je 0x113464
00113480: CLP; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x20 ; call 0x856dc
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
00113550: CLP; push r14 ; mov r14, rsi ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; push rbx ; sub rsp, 0x20 ; call 0x856dc
read: r12 r13 r14 rbp rbx rdi rip rsi rsp 
00113620: CLP; push r15 ; mov r15d, ecx ; push r14 ; mov r14d, r8d ; push r13 ; mov r13, r9 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x18 ; mov rbx, qword ptr [rsi] ; mov qword ptr [rsp], rsi ; mov rsi, rdx
read: ecx r12 r13 r14 r15 r8d r9 rbp rbx rdi rdx rsi rsp 
00113790: CLP; push r15 ; mov r15d, ecx ; push r14 ; mov r14, rdi ; push r13 ; mov r13, r8 ; push r12 ; mov r12d, edx ; push rbp ; xor ebp, ebp ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; test edx, edx ; jne 0x1137c7
read: ebp ecx edx r12 r13 r14 r15 r8 rbp rbx rdi rflags rsi rsp 
00113810: CLP; push rbp ; mov ebp, edx ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; and ebp, 3 ; je 0x113829
read: ebp edx rbp rbx rdi rflags rsp 
001138e0: CLP; sub rsp, 0x38 ; mov rdx, rdi ; xor eax, eax ; mov dword ptr [rsp], 2 ; mov rdi, rsp ; call rdx
read: eax rdi rdx rsp 
write: eax rdi rdx rflags rsp 
00113920: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113944
001139a0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x1139c4
00113a20: CLP; sub rsp, 8 ; mov eax, dword ptr [rdi] ; test eax, eax ; jne 0x113a4c
00113a80: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113aa4
00113b00: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov edx, dword ptr [rdi] ; test edx, edx ; je 0x113b2c
read: edx rbp rbx rdi rflags rsi rsp 
00113bd0: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov edx, dword ptr [rdi] ; test edx, edx ; je 0x113bfc
read: edx rbp rbx rdi rflags rsi rsp 
00113ce0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113d04
00113d60: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113d84
00113e60: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113e84
00113ef0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x113f14
00113f90: CLP; push r15 ; mov r15d, ecx ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; xor r12d, r12d ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov r14, qword ptr [rsi] ; mov rsi, rdx ; call 0x11399c
read: ecx r12 r12d r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
001140f0: CLP; push r14 ; mov r14, rdi ; push r13 ; mov r13, r8 ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rcx ; call 0x113eec
read: r12 r13 r14 r8 rbp rbx rcx rdi rdx rip rsi rsp 
00114190: CLP; push r14 ; mov r14d, edx ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov ecx, dword ptr [rdi] ; mov rbp, qword ptr [rsi] ; mov dword ptr [rsp + 0xc], 0 ; test ecx, ecx ; je 0x114234
read: ecx edx r12 r13 r14 rbp rbx rdi rflags rsi rsp 
00114310: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x11433c
read: eax rbp rbx rdi rflags rsi rsp 
00114400: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x11442c
read: eax rbp rbx rdi rflags rsi rsp 
001144f0: CLP; sub rsp, 8 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x11450c
00114530: CLP; sub rsp, 8 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x11454c
00114570: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x114594
001145f0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x114614
00114670: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x114694
001146f0: CLP; push rbx ; mov rbx, rsi ; sub rsp, 0x10 ; mov eax, dword ptr [rdi] ; cmp eax, 1 ; je 0x114714
00114780: CLP; mov rax, qword ptr [rdi + 0x18] ; sub rax, qword ptr [rdi + 0x20] ; ret
00114790: CLP; mov edx, dword ptr [rdi + 0x28] ; mov rcx, qword ptr [rdi + 0x20] ; mov esi, esi ; add rdx, qword ptr [rdi + 0x18] ; xor eax, eax ; add rsi, rcx ; cmp rsi, rdx ; ja 0x1147b6
001147d0: CLP; mov eax, dword ptr [rdi + 0x28] ; cmp eax, esi ; jb 0x1147ec
00114800: CLP; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; cmp edx, 3 ; jbe 0x114827
00114830: CLP; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; cmp edx, 3 ; jbe 0x114857
00114860: CLP; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; cmp edx, 3 ; jbe 0x114889
00114890: CLP; mov edx, dword ptr [rdi + 0x28] ; xor eax, eax ; cmp edx, 3 ; jbe 0x1148ba
001148c0: CLP; push rbp ; xor eax, eax ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jb 0x1148f2
read: eax ecx edx rbp rbx rdi rflags rsp 
00114900: CLP; push rbp ; xor eax, eax ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov ecx, dword ptr [rdi + 0x28] ; cmp ecx, edx ; jb 0x114935
read: eax ecx edx rbp rbx rdi rflags rsp 
00114940: CLP; lea rax, [rip + 0x252095] ; mov dword ptr [rdi], ecx ; mov qword ptr [rdi + 0x20], rsi ; mov qword ptr [rdi + 0x18], rsi ; mov dword ptr [rdi + 0x28], edx ; mov qword ptr [rdi + 8], rax ; ret
00114960: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x10 ; mov rbx, qword ptr [rsi] ; test rbx, rbx ; je 0x11499c
read: r12 rbp rbx rdi rflags rsi rsp 
00114a60: CLP; push r13 ; xor eax, eax ; mov r13, rcx ; push r12 ; mov r12d, edx ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 0x18 ; cmp qword ptr [rsi], 0 ; lea rsi, [rsp + 0xc] ; setne al ; mov dword ptr [rsp + 0xc], eax ; call 0x113e5c
read: eax edx r12 r13 rbp rbx rcx rdi rflags rip rsi rsp 
00114af0: CLP; add dword ptr [rdi + 0x28], 4 ; mov eax, 1 ; ret
00114b00: CLP; add dword ptr [rdi + 0x28], edx ; mov eax, 1 ; ret
00114b10: CLP; mov eax, dword ptr [rdi + 0x28] ; ret
00114b40: CLP; add dword ptr [rdi + 0x28], 4 ; mov eax, 1 ; ret
00114b50: CLP; push rbx ; mov rbx, rdi ; mov dword ptr [rdi + 0x28], 0 ; mov qword ptr [rdi + 0x20], 0 ; mov rdi, qword ptr [rdi + 0x18] ; test rdi, rdi ; je 0x114b7d
read: rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
00114c10: CLP; push rbx ; lea rax, [rip - 0x12c] ; mov rdx, rdi ; add rsp, -0x80 ; mov qword ptr [rsp + 0x38], rax ; lea rax, [rip - 0x12f] ; mov rdi, rsp ; mov dword ptr [rsp], 0 ; mov dword ptr [rsp + 0x28], 0 ; mov qword ptr [rsp + 0x48], rax ; lea rax, [rip - 0xbd] ; mov qword ptr [rsp + 0x18], 0 ; mov qword ptr [rsp + 0x20], 0 ; mov qword ptr [rsp + 0x60], rax ; lea rax, [rip - 0x15b]
read: rax rbx rdi rsp 
write: rax rdi rdx rflags rsp 
00114d00: CLP; sub rsp, 0x18 ; mov eax, dword ptr [rsi] ; mov rcx, qword ptr [rdi + 0x18] ; lea rdi, [rsp + 0xc] ; mov edx, 1 ; mov esi, 4 ; bswap eax ; mov dword ptr [rsp + 0xc], eax ; call 0x6d45c
write: eax edx esi rcx rdi rflags rsp 
00114d40: CLP; sub rsp, 0x18 ; mov rax, qword ptr [rsi] ; mov rcx, qword ptr [rdi + 0x18] ; lea rdi, [rsp + 0xc] ; mov edx, 1 ; mov esi, 4 ; bswap eax ; mov dword ptr [rsp + 0xc], eax ; call 0x6d45c
write: eax edx esi rax rcx rdi rflags rsp 
00114d80: CLP; push rbx ; mov edx, 1 ; mov rbx, rsi ; mov esi, 4 ; sub rsp, 0x10 ; mov rcx, qword ptr [rdi + 0x18] ; lea rdi, [rsp + 0xc] ; call 0x6ceec
write: edx esi rbx rcx rdi rflags rsp 
00114dd0: CLP; push rbx ; mov edx, 1 ; mov rbx, rsi ; mov esi, 4 ; sub rsp, 0x10 ; mov rcx, qword ptr [rdi + 0x18] ; lea rdi, [rsp + 0xc] ; call 0x6ceec
write: edx esi rbx rcx rdi rflags rsp 
00114e20: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x18] ; call 0x6c45c
write: rdi rflags rsp 
00114e40: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x18] ; mov esi, esi ; xor edx, edx ; call 0x7487c
write: edx esi rdi rflags rsp 
00114e70: CLP; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x18] ; call 0x6d20c
write: rdi rflags rsp 
00114f10: CLP; lea rax, [rip + 0x251b25] ; mov dword ptr [rdi], edx ; mov qword ptr [rdi + 0x18], rsi ; mov dword ptr [rdi + 0x28], 0 ; mov qword ptr [rdi + 0x20], 0 ; mov qword ptr [rdi + 8], rax ; ret
00115620: CLP; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; test rdi, rdi ; je 0x11567c
read: r12 r13 r14 rbp rbx rdi rflags rsp 
00115de0: CLP; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; call 0x856dc
read: r12 r13 r14 r8 rbp rbx rcx rdi rdx rip rsi rsp 
00115eb0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rcx ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0xe8 ; mov eax, dword ptr [rip + 0x258ab3] ; mov qword ptr [rbp - 0xb0], rdi ; mov qword ptr [rbp - 0xb8], rsi ; mov dword ptr [rbp - 0xa4], edx ; mov qword ptr [rbp - 0xd8], r8 ; mov qword ptr [rbp - 0xe8], r9
read: edx r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp 
001166f0: CLP; push r15 ; mov r15, r8 ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rdx ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov rax, qword ptr [rip + 0x2528d8] ; mov qword ptr [rsp + 0x18], r9 ; mov rax, qword ptr fs:[rax]
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp 
00116780: CLP; push r15 ; mov r15, r9 ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rdi ; push rbx ; xor ebx, ebx ; sub rsp, 0x18 ; cmp esi, 0xa ; sete bl
read: ebx esi r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rflags rsp 
00116930: CLP; push r15 ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x68 ; mov eax, dword ptr [rip + 0x258036] ; mov qword ptr [rsp], rdx ; test eax, eax ; jns 0x116d55
read: eax r12 r13 r14 r15 rbp rbx rdi rdx rflags rsi rsp 
00116db0: CLP; push r15 ; push r14 ; mov r14, rdx ; push r13 ; push r12 ; mov r12d, esi ; push rbp ; mov rbp, rcx ; push rbx ; xor ebx, ebx ; sub rsp, 0x58 ; mov qword ptr [rsp + 0x10], rdi ; call 0x856dc
read: ebx esi r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsp 
00117a20: CLP; push r15 ; mov r15, r9 ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; push r12 ; mov r12, rdx ; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 0x18 ; call 0x856dc
read: r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rdx rip rsi rsp 
00117a90: CLP; push r15 ; movsxd rdi, edi ; mov r15, r9 ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rcx ; xor ecx, ecx ; push r12 ; mov r12, rdx ; mov edx, 0xa ; push rbp ; mov rbp, rsi ; push rbx ; sub rsp, 0x28
write: ecx edx r12 r13 r14 r15 rbp rdi rflags rsp 
00117b10: CLP; cmp rdi, -1 ; je 0x117b27
read: rdi rflags 
00117b50: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rdi ; push rbp ; mov rbp, rsi ; push rbx ; xor ebx, ebx ; sub rsp, 0x58 ; lea r14, [rsp + 0x3c] ; call 0x856dc
read: ebx r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
00117de0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; push r14 ; mov r14, rcx ; push r13 ; push r12 ; mov r12, rdx ; push rbx ; mov rbx, rsi ; sub rsp, 0x48 ; call 0x856dc
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rip rsi rsp 
00118180: CLP; push r15 ; mov ecx, 0x19 ; mov edx, esi ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; mov rbx, rsi ; mov esi, 1 ; sub rsp, 0x28 ; mov dword ptr [rsp], edi ; mov rdi, rsp ; mov word ptr [rsp + 4], cx ; call 0xdae7c
write: ecx edx esi rbx rdi rflags rsp 
00118710: CLP; push rbx ; mov rbx, rdi ; mov edi, dword ptr [rdi + 0x18] ; test edi, edi ; jne 0x118739
read: edi rbx rdi rflags rsp 
00118760: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdx ; push r14 ; push r13 ; mov r13, rsi ; push r12 ; push rbx ; mov ebx, edi ; mov rdi, rsi ; sub rsp, 0x158 ; mov qword ptr [rbp - 0x170], rsi ; call 0x856dc
write: ebx r13 r15 rbp rdi rflags rsp 
00118c70: CLP; push r15 ; mov r15d, edi ; mov rdi, rsi ; push r14 ; mov r14, r8 ; push r13 ; mov r13, rdx ; push r12 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0x38 ; mov qword ptr [rsp + 8], rsi ; mov rsi, rdx ; call 0x1150ec
write: r13 r14 r15d rbp rdi rflags rsi rsp 
001190b0: CLP; lea rdi, [rip + 0x255085] ; sub rsp, 8 ; mov esi, 0x21 ; call 0x1192ac
write: esi rdi rflags rsp 
00119100: CLP; push r14 ; mov edx, 0x200 ; mov r14, rdi ; xor edi, edi ; push r13 ; mov r13, rsi ; push r12 ; push rbp ; push rbx ; sub rsp, 0x510 ; lea r12, [rsp + 0x310] ; mov rsi, r12 ; call 0xd7f3c
read: edi r12 r13 r14 rbp rbx rdi rip rsi rsp 
001192b0: CLP; push rbp ; xor eax, eax ; mov rbp, rsp ; push r15 ; push r14 ; push r13 ; push r12 ; push rbx ; sub rsp, 0x78 ; mov qword ptr [rbp - 0x98], rdi ; lea rdi, [rip + 0x1e59a] ; mov qword ptr [rbp - 0x90], rsi ; xor esi, esi ; call 0xd6819
read: eax esi r12 r13 r14 r15 rbp rbx rdi rip rsi rsp 
write: eax esi rbp rdi rflags rsp 
00119540: CLP; push rbp ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; call 0x1192ac
read: rbp rbx rdi rip rsi rsp 
001195d0: CLP; sub rsp, 0x18 ; mov rdi, qword ptr [rip + 0x2512e1] ; test rdi, rdi ; je 0x1195fc
read: rdi rflags rsp 
write: rdi rflags rsp 
00119660: CLP; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rsi ; sub rsp, 8 ; call qword ptr [rip + 0x24d46a]
read: rbp rbx rdi rsi rsp 
001196c0: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; call qword ptr [rip + 0x24d409]
read: r12 rbp rbx rdi rdx rsi rsp 
00119720: CLP; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; mov rbx, rdx ; call qword ptr [rip + 0x24d3a9]
read: r12 rbp rbx rdi rdx rsi rsp 
00119780: CLP; push rbx ; mov rbx, rdi ; call qword ptr [rip + 0x24d352]
read: rbx rdi rsp 
00119870: CLP; mov r9, rsi ; sub rsp, 8 ; mov r8, rdi ; mov esi, 1 ; xor eax, eax ; cmp dword ptr [rip + 0x254ee8], 0 ; je 0x119896
read: eax rdi rflags rsi rsp 
00119920: CLP; sub rsp, 8 ; mov rdx, rdi ; mov esi, 1 ; xor eax, eax ; cmp dword ptr [rip + 0x254e3b], 0 ; je 0x119943
read: eax rdi rflags rsp 
00119a80: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rsi, qword ptr [rip + 0x250e35] ; test rsi, rsi ; je 0x119abc
read: rbx rdi rflags rsi rsp 
00119af0: CLP; push rbx ; mov rbx, rdi ; sub rsp, 0x10 ; mov rsi, qword ptr [rip + 0x250dcd] ; test rsi, rsi ; je 0x119b2c
read: rbx rdi rflags rsi rsp 
00119b60: CLP; movzx eax, word ptr [rdi] ; mov r9, rdi ; sub eax, 1 ; cmp ax, 7 ; jbe 0x119b8c
read: ax eax rdi rflags 
00119c40: CLP; mov r10, rsi ; sub rsp, 8 ; mov r9, rdi ; mov esi, 1 ; xor eax, eax ; cmp dword ptr [rip + 0x254b18], 0 ; je 0x119c66
read: eax rdi rflags rsi rsp 
0011a0d0: CLP; push rbx ; movzx eax, word ptr [rdi] ; xor ebx, ebx ; sub eax, 5 ; cmp ax, 3 ; ja 0x11a114
0011a6f0: CLP; movsxd rdi, dword ptr [rip + 0x24ebf5] ; test edi, edi ; js 0x11a70d
write: rdi rflags 
0011a740: CLP; push r15 ; mov r15, rdx ; push r14 ; push r13 ; push r12 ; push rbp ; mov rbp, rdi ; xor edi, edi ; push rbx ; mov rbx, rsi ; sub rsp, 0x168 ; call 0xb2b3c
read: edi r12 r13 r14 r15 rbp rbx rdi rdx rip rsi rsp 
0011b050: CLP; push r13 ; mov esi, 1 ; xor eax, eax ; push r12 ; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; cmp dword ptr [rip + 0x253705], 0 ; je 0x11b079
read: eax r12 r13 rbp rbx rdi rflags rsp 
0011b190: CLP; push rbp ; mov ecx, 0xe ; mov rbp, rsi ; push rbx ; mov rbx, rdi ; lea rdi, [rip + 0x1c6f9] ; mov rsi, rbx ; sub rsp, 8 ; repe cmpsb byte ptr [rsi], byte ptr [rdi] ; je 0x11b20c
read: rbp rbx rcx rdi rflags rsi rsp 
write: ecx rbp rbx rcx rdi rflags rsi rsp 
0011bbb0: CLP; mov rax, rsi ; mov edx, 0x180 ; mov rsi, rdi ; test al, 1 ; jne 0x11bc0c
read: al rdi rflags rsi 
0011bc70: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 0x68 ; mov r12, qword ptr [rip + 0x24d15f] ; mov qword ptr [rsp + 0x10], rdi ; mov qword ptr [rsp + 0x18], rsi ; lea rdi, [r12 + 0x930] ; call qword ptr [r12 + 0xf08]
read: r12 r13 r14 r15 rbp rbx rdi rsi rsp 
write: r12 rdi rflags rsp 
0011be60: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, rsi ; push rbp ; mov rbp, rdi ; push rbx ; sub rsp, 0x28 ; mov rax, qword ptr [rip + 0x24cf69] ; mov qword ptr [rsp + 8], rdx ; mov qword ptr [rsp + 0x10], rcx ; lea rdi, [rax + 0x908] ; call qword ptr [rax + 0xf08]
read: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp 
write: r12 rax rbp rdi rflags rsp 
0011c150: CLP; movzx eax, word ptr [rdi + 0x2b0] ; sub rsi, qword ptr [rdi] ; lea rdx, [rax*8] ; shl rax, 6 ; sub rax, rdx ; sub rax, 0x38 ; jmp 0x11c178
0011c1b0: CLP; sub rsp, 8 ; mov rax, qword ptr [rip + 0x24cca1] ; mov rsi, rdi ; mov rdi, qword ptr [rsp + 8] ; call qword ptr [rax + 0xe0]
read: rdi rsp 
write: rax rdi rflags rsi rsp 
0011c220: CLP; push rbx ; mov rbx, rdi ; mov rcx, -2 ; sub rsp, 0x10 ; mov rax, qword ptr [rip + 0x24cc6e] ; mov rdx, qword ptr [rdi + 0x10] ; mov esi, dword ptr [rdi + 8] ; mov r9, qword ptr [rip + 0x252108] ; mov r8d, dword ptr [rip + 0x252109] ; mov rax, qword ptr [rax] ; mov qword ptr [rsp], rax ; mov rax, qword ptr [rip + 0x24cc03] ; mov rdi, qword ptr [rdi] ; call qword ptr [rax + 0xf8]
read: rax rbx rdi rsp 
write: esi r8d r9 rax rbx rcx rdi rdx rflags rsp 
0011c280: CLP; push rbx ; mov rbx, rdi ; lea rdx, [rdi + 0x18] ; xor r9d, r9d ; xor r8d, r8d ; sub rsp, 0x10 ; mov rsi, qword ptr [rdi] ; mov rax, qword ptr [rip + 0x24cbc0] ; mov qword ptr [rdi + 0x18], 0 ; mov rdi, qword ptr [rdi + 8] ; mov qword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 2 ; lea rcx, [rsi + 0x388] ; call qword ptr [rax + 0xe8]
read: r8d r9d rbx rdi rsp 
write: r8d r9d rax rbx rcx rdi rdx rflags rsi rsp 
0011c300: CLP; sub rsp, 0x38 ; mov rax, qword ptr [rip + 0x24cb51] ; mov rcx, rdi ; mov r8, rsi ; mov qword ptr [rsp + 0x28], 0 ; lea rdx, [rsp + 0x1f] ; lea rsi, [rsp + 0x28] ; lea rdi, [rsp + 0x20] ; call qword ptr [rax + 0xd0]
read: rdi rsi rsp 
write: r8 rax rcx rdi rdx rflags rsi rsp 
0011c380: CLP; sub rsp, 0x28 ; mov rax, qword ptr [rsp + 0x28] ; mov qword ptr [rsp], rdi ; mov dword ptr [rsp + 8], esi ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rip + 0x251f9f] ; test rax, rax ; jne 0x11c3c7
read: esi rax rdi rflags rsp 
0011c3e0: CLP; sub rsp, 0x28 ; mov rax, qword ptr [rip + 0x251f51] ; mov qword ptr [rsp], rdi ; mov qword ptr [rsp + 8], rsi ; test rax, rax ; jne 0x11c438
read: rax rdi rflags rsi rsp 
0011c490: CLP; push rbx ; mov rbx, rdi ; xor r9d, r9d ; sub rsp, 0x10 ; mov rsi, qword ptr [rdi] ; mov eax, dword ptr [rbx + 0x18] ; mov rdx, qword ptr [rdi + 0x28] ; mov rdi, qword ptr [rdi + 8] ; mov r8, qword ptr [rbx + 0x10] ; mov rcx, qword ptr [rsi + 0x380] ; mov dword ptr [rsp], eax ; mov rax, qword ptr [rip + 0x24c99e] ; mov qword ptr [rsp + 8], 0 ; call qword ptr [rax + 0xe8]
read: eax r9d rbx rdi rsp 
write: eax r8 r9d rax rbx rcx rdi rdx rflags rsi rsp 
0011c4e0: CLP; push rbp ; mov rbp, rsp ; push r15 ; mov r15, rdi ; mov rdi, rdx ; push r14 ; mov r14, rcx ; push r13 ; mov r13, rsi ; push r12 ; mov r12, rdx ; push rbx ; sub rsp, 0x88 ; mov dword ptr [rbp - 0x88], r8d ; mov qword ptr [rbp - 0x78], 0
read: r12 r13 r14 r15 r8d rbp rbx rcx rdi rdx rsi rsp 
write: r12 r13 r14 r15 rbp rdi rflags rsp 
0011cc50: CLP; push r15 ; push r14 ; push r13 ; push r12 ; mov r12, r8 ; push rbp ; mov rbp, rdx ; push rbx ; mov rbx, rdi ; sub rsp, 0xc8 ; mov qword ptr [rsp + 8], rdi ; mov qword ptr [rsp + 0x28], rsi ; mov dword ptr [rsp + 0x24], ecx ; call 0x856dc
read: ecx r12 r13 r14 r15 r8 rbp rbx rdi rdx rip rsi rsp 
0011cea0: CLP; push r15 ; mov r15, rdi ; push r14 ; push r13 ; push r12 ; mov r12, r9 ; push rbp ; mov rbp, rcx ; push rbx ; sub rsp, 0xc8 ; mov qword ptr [rsp + 8], rsi ; mov qword ptr [rsp + 0x28], rdx ; mov dword ptr [rsp + 0x24], r8d ; call 0x856dc
read: r12 r13 r14 r15 r8d r9 rbp rbx rcx rdi rdx rip rsi rsp 
0011d230: CLP; sub rsp, 8 ; mov r10d, dword ptr [rip + 0x251531] ; mov rdx, rdi ; test r10d, r10d ; jne 0x11d259
read: r10d rdi rflags rsp 
0011d430: CLP; push r13 ; mov r13, rdi ; push r12 ; xor r12d, r12d ; push rbp ; push rbx ; xor ebx, ebx ; sub rsp, 8 ; cmp qword ptr [rdi + 0x18], 0 ; mov rdx, qword ptr [rdi + 0x10] ; je 0x11d4aa
read: ebx r12 r12d r13 rbp rbx rdi rflags rsp 
0011d530: CLP; push rbp ; push rbx ; mov rbx, rdi ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0x20] ; test rdi, rdi ; je 0x11d54b
read: rbp rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
0011d610: CLP; mov rdi, qword ptr [rip + 0x250d6d] ; test rdi, rdi ; je 0x11d639
read: rdi rflags 
write: rdi rflags 
0011d640: CLP; sub rsp, 8 ; mov eax, dword ptr [rip + 0x24d2c2] ; mov rdi, qword ptr [rip + 0x24d2cb] ; test eax, eax ; jne 0x11d674
write: eax rdi rflags rsp 
0011d690: CLP; push rbx ; mov rbx, rdi ; mov rdi, qword ptr [rdi + 0x10] ; test rdi, rdi ; je 0x11d6a6
read: rbx rdi rflags rsp 
write: rbx rdi rflags rsp 
0011d6c0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x24d261] ; lea rsi, [rip - 0x46] ; call 0xe1a4c
write: rdi rflags rsi rsp 
0011daa0: CLP; push r13 ; mov r13, rdi ; lea rax, [rip + 0x247e70] ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; mov rdi, qword ptr [rdi + 0xb8] ; cmp rdi, rax ; je 0x11dac9
read: r12 r13 rax rbp rbx rdi rflags rsp 
write: r13 rax rdi rflags rsp 
0011dbe0: CLP; mov rdi, qword ptr [rip + 0x24ba05] ; test rdi, rdi ; je 0x11dc18
read: rdi rflags 
write: rdi rflags 
0011ddc0: CLP; mov rdi, qword ptr [rip + 0x24dd0d] ; push rbx ; test rdi, rdi ; jne 0x11ddd7
read: rbx rdi rflags rsp 
write: rdi rflags rsp 
0011de10: CLP; lea rdi, [rip + 0x24e0c5] ; sub rsp, 8 ; call 0xca02c
write: rdi rflags rsp 
0011de30: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x24e151] ; lea rax, [rip + 0x144fa] ; cmp rdi, rax ; je 0x11de57
read: rax rdi rflags rsp 
write: rax rdi rflags rsp 
0011deb0: CLP; sub rsp, 8 ; mov rdi, qword ptr [rip + 0x24e129] ; call 0x1f46c
write: rdi rflags rsp 
0011dfe0: CLP; mov rdi, qword ptr [rip + 0x24f1ad] ; mov qword ptr [rip + 0x24f1ba], 0 ; test rdi, rdi ; je 0x11e010
read: rdi rflags 
write: rdi rflags 
0011e020: CLP; mov rdi, qword ptr [rip + 0x24f1a5] ; cmp rdi, 1 ; ja 0x11e034
read: rdi rflags 
write: rdi rflags 
0011e060: CLP; mov rdi, qword ptr [rip + 0x24f8cd] ; test rdi, rdi ; je 0x11e081
read: rdi rflags 
write: rdi rflags 
0011e090: CLP; mov rdi, qword ptr [rip + 0x24fda5] ; test rdi, rdi ; je 0x11e0b8
read: rdi rflags 
write: rdi rflags 
0011e180: CLP; mov rdi, qword ptr [rip + 0x24ff8d] ; cmp rdi, -1 ; je 0x11e1a9
read: rdi rflags 
write: rdi rflags 
0011e1b0: CLP; mov rdi, qword ptr [rip + 0x2507ad] ; cmp rdi, -1 ; je 0x11e1d9
read: rdi rflags 
write: rdi rflags 
0011e1e0: CLP; mov rdi, qword ptr [rip + 0x2507ad] ; cmp rdi, -1 ; je 0x11e209
read: rdi rflags 
write: rdi rflags 
0011e210: CLP; mov rdi, qword ptr [rip + 0x25078d] ; cmp rdi, -1 ; je 0x11e239
read: rdi rflags 
write: rdi rflags 
0011e240: CLP; mov rdi, qword ptr [rip + 0x24fedd] ; cmp rdi, -1 ; je 0x11e269
read: rdi rflags 
write: rdi rflags 
0011e270: CLP; push rbx ; mov eax, 1 ; mov rbx, rdi ; sub rsp, 0x10 ; mov rdx, qword ptr [rdi] ; test rdx, rdx ; je 0x11e2e0
read: rbx rdi rdx rflags rsp 
0011e300: CLP; push r15 ; push r14 ; push r13 ; push r12 ; push rbp ; push rbx ; sub rsp, 8 ; mov r13, qword ptr [rip + 0x24aacf] ; mov r14, qword ptr [rip + 0x24ab40] ; mov rdi, qword ptr [r13 + 0x988] ; mov rbp, qword ptr [r14 + 0xa8] ; cmp rdi, rbp ; jne 0x11e337
read: r12 r13 r14 r15 rbp rbx rdi rflags rsp 
write: r13 r14 rbp rdi rflags rsp 
0011e5a0: CLP; sub rsp, 8 ; lea rdi, [rip + 0x24a7e1] ; call 0x1f3ec
write: rdi rflags rsp 
0011e5d0: CLP; push rbx ; mov rbx, qword ptr [rip + 0x24aa14] ; mov rdi, qword ptr fs:[rbx] ; mov eax, dword ptr [rdi + 0x10] ; test eax, eax ; jne 0x11e5ec
write: eax rbx rdi rflags rsp 
00020db9: JLP; lea rdx, [rbp - 0x90] ; mov ecx, 8 ; or eax, 0xffffffff ; mov rdi, rdx ; rep stosd dword ptr [rdi], eax ; jmp 0x20df2
read: eax rcx rdi rdx rflags 
write: eax ecx rcx rdi rdx rflags 
00022560: JLP; lea rcx, [rip + 0x111f15] ; lea rsi, [rip + 0x111f06] ; lea rdi, [rip + 0x115447] ; mov edx, 0x5b ; call 0x2eaac
write: edx rcx rdi rsi rsp 
0004c2db: JLP; lea r10, [rbp - 0x470] ; xor eax, eax ; mov ecx, 5 ; mov esi, dword ptr [rbp - 0x53c] ; movzx edx, byte ptr [rbp - 0x510] ; mov rdi, r10 ; rep stosd dword ptr [rdi], eax ; mov eax, dword ptr [rbp - 0x508] ; movzx ecx, byte ptr [rbp - 0x538] ; and edx, 1 ; shl edx, 2 ; mov dword ptr [rbp - 0x470], eax ; mov eax, dword ptr [rbp - 0x500] ; and ecx, 1 ; add ecx, ecx
read: eax ecx edx r10 rcx rdi rflags 
write: eax ecx edx esi r10 rcx rdi rflags 
0004c4c1: JLP; lea r10, [rbp - 0x470] ; xor eax, eax ; mov ecx, 5 ; mov esi, dword ptr [rbp - 0x53c] ; movzx edx, byte ptr [rbp - 0x510] ; mov rdi, r10 ; rep stosd dword ptr [rdi], eax ; mov eax, dword ptr [rbp - 0x508] ; movzx ecx, byte ptr [rbp - 0x538] ; and edx, 1 ; shl edx, 2 ; mov dword ptr [rbp - 0x470], eax ; mov eax, dword ptr [rbp - 0x500] ; and ecx, 1 ; add ecx, ecx
read: eax ecx edx r10 rcx rdi rflags 
write: eax ecx edx esi r10 rcx rdi rflags 
0004ca47: JLP; mov rdi, qword ptr [rbp - 0x578] ; call 0x1f597
write: rdi rsp 
00052f6e: JLP; mov rdi, qword ptr [rbp - 0x1178] ; mov qword ptr [rbp - 0x1188], r10 ; call 0x1fb69
write: rdi rsp 
0005365e: JLP; lea rsi, [rbp - 0x1000] ; xor eax, eax ; mov ecx, 5 ; movzx edx, byte ptr [rbp - 0x10e0] ; mov rdi, rsi ; rep stosd dword ptr [rdi], eax ; mov eax, dword ptr [rbp - 0x10d8] ; movzx ecx, byte ptr [rbp - 0x1100] ; mov edi, dword ptr [rbp - 0x1104] ; and edx, 1 ; shl edx, 2 ; mov dword ptr [rbp - 0x1000], eax ; mov eax, dword ptr [rbp - 0x10d0] ; and ecx, 1 ; add ecx, ecx
read: eax ecx edx rcx rdi rflags rsi 
write: eax ecx edi edx rcx rdi rflags rsi 
000537a6: JLP; lea rsi, [rbp - 0x1000] ; xor eax, eax ; mov ecx, 5 ; movzx edx, byte ptr [rbp - 0x10e0] ; mov rdi, rsi ; rep stosd dword ptr [rdi], eax ; mov eax, dword ptr [rbp - 0x10d8] ; movzx ecx, byte ptr [rbp - 0x1100] ; mov edi, dword ptr [rbp - 0x1104] ; and edx, 1 ; mov byte ptr [rbp - 0xff3], 4 ; shl edx, 2 ; mov dword ptr [rbp - 0x1000], eax ; mov eax, dword ptr [rbp - 0x10d0] ; and ecx, 1
read: eax ecx edx rcx rdi rflags rsi 
write: eax ecx edi edx rcx rdi rflags rsi 
0006a9f8: JLP; lea rdi, [rip + 0xc5900] ; lea rsi, [rip + 0xc5916] ; mov ecx, 8 ; nop ; mov edx, dword ptr [rbp + 8] ; test edx, edx ; jle 0x6ab8c
write: ecx edx rdi rflags rsi 
0006aac0: JLP; mov ecx, 2 ; lea rdi, [rip + 0xc57e6] ; lea rsi, [rip + 0xc57e9] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006aae0: JLP; mov ecx, 6 ; lea rdi, [rip + 0xc5632] ; lea rsi, [rip + 0xc5649] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006ab00: JLP; mov ecx, 6 ; lea rdi, [rip + 0xc5578] ; lea rsi, [rip + 0xc5589] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006ab20: JLP; mov ecx, 8 ; lea rdi, [rip + 0xc58bd] ; lea rsi, [rip + 0xc58c9] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006ab40: JLP; mov ecx, 2 ; lea rdi, [rip + 0xc56bf] ; lea rsi, [rip + 0xc56c9] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006ab60: JLP; mov ecx, 3 ; lea rdi, [rip + 0xc56d6] ; lea rsi, [rip + 0xc56e9] ; jmp 0x6aa0c
write: ecx rdi rsi 
0006af38: JLP; or byte ptr [rbx + 0xd], 8 ; lea rdi, [rdx + 1] ; mov qword ptr [rsp + 8], rdi ; movzx eax, byte ptr [rdx + 1] ; mov rdx, rdi ; test al, al ; jne 0x6af1c
read: al rdi rflags 
write: eax rdi rdx rflags 
0006b6bd: JLP; mov qword ptr [rsp + 8], rdi ; test byte ptr [rbx + 0xc], 0x20 ; je 0x6b6cf
read: rdi rflags 
00080ae3: JLP; lea rsi, [rip + 0xb50e5] ; mov edx, 6 ; mov rdi, r14 ; add rbp, 0xe ; call 0x88bbc
write: edx rbp rdi rflags rsi rsp 
0008e870: JLP; mov rax, qword ptr [rsi] ; sub rdi, 0x18 ; sub rsi, 0x10 ; mov rcx, qword ptr [rsi + 0x18] ; add rdx, 2 ; mov qword ptr [rdi + 0x18], rax ; nop dword ptr [rax + rax] ; mov rax, qword ptr [rsi + 0x20] ; mov qword ptr [rdi + 0x20], rcx ; mov rcx, qword ptr [rsi + 0x28] ; mov qword ptr [rdi + 0x28], rax ; mov rax, qword ptr [rsi + 0x30] ; mov qword ptr [rdi + 0x30], rcx ; mov rcx, qword ptr [rsi + 0x38] ; add rdi, 0x40
read: rax rcx rdi rdx rsi 
write: rax rcx rdi rdx rflags rsi 
0008e920: JLP; mov rax, qword ptr [rsi] ; add rdx, 6 ; sub rsi, 0x30 ; sub rdi, 0x38 ; jmp 0x8e8a4
read: rdi rdx rsi 
write: rax rdi rdx rflags rsi 
0008e940: JLP; mov rcx, qword ptr [rsi] ; add rdx, 5 ; sub rsi, 0x28 ; sub rdi, 0x30 ; jmp 0x8e89c
read: rdi rdx rsi 
write: rcx rdi rdx rflags rsi 
0008e960: JLP; mov rax, qword ptr [rsi] ; add rdx, 4 ; sub rsi, 0x20 ; sub rdi, 0x28 ; jmp 0x8e894
read: rdi rdx rsi 
write: rax rdi rdx rflags rsi 
0008e980: JLP; mov rcx, qword ptr [rsi] ; add rdx, 3 ; sub rsi, 0x18 ; sub rdi, 0x20 ; jmp 0x8e88c
read: rdi rdx rsi 
write: rcx rdi rdx rflags rsi 
0008e9a0: JLP; mov rcx, qword ptr [rsi] ; add rdx, 1 ; sub rsi, 8 ; sub rdi, 0x10 ; jmp 0x8e8cc
read: rdi rdx rsi 
write: rcx rdi rdx rflags rsi 
0008eb30: JLP; lea r8, [rsi - 0x30] ; mov rsi, qword ptr [rsi - 8] ; sub rdi, 0x28 ; mov rcx, rdi ; add rdx, 2 ; mov rax, r8 ; mov r9, qword ptr [rax + 0x20] ; mov qword ptr [rcx + 0x20], rsi ; nop word ptr [rax + rax] ; mov rsi, qword ptr [rax + 0x18] ; mov qword ptr [rcx + 0x18], r9 ; mov r9, qword ptr [rax + 0x10] ; mov qword ptr [rcx + 0x10], rsi ; mov rsi, qword ptr [rax + 8] ; sub rdx, 8
read: r8 r9 rdi rdx rsi 
write: r8 r9 rax rcx rdi rdx rflags rsi 
0008ebd0: JLP; sub rdi, 0x40 ; sub rdx, 1 ; mov r9, qword ptr [rsi - 8] ; je 0x8ec1c
read: rdi rdx rflags 
write: r9 rdi rdx rflags 
0008ebf0: JLP; lea rax, [rsi - 0x10] ; lea rcx, [rdi - 8] ; mov rsi, qword ptr [rsi - 8] ; add rdx, 6 ; mov rdi, rcx ; mov r8, rax ; sub rdx, 8 ; mov r9, qword ptr [r8] ; mov qword ptr [rdi], rsi ; lea rdi, [rcx - 0x40] ; jne 0x8eb80
write: r8 r9 rax rcx rdi rdx rflags rsi 
0008ec30: JLP; lea r8, [rsi - 0x18] ; sub rdi, 0x10 ; mov r9, qword ptr [rsi - 8] ; add rdx, 5 ; mov rcx, rdi ; mov rax, r8 ; jmp 0x8eb64
read: r8 rdi rdx 
write: r8 r9 rax rcx rdi rdx rflags 
0008ec50: JLP; lea r8, [rsi - 0x20] ; sub rdi, 0x18 ; mov rsi, qword ptr [rsi - 8] ; add rdx, 4 ; mov rcx, rdi ; mov rax, r8 ; jmp 0x8eb5c
read: r8 rdi rdx 
write: r8 rax rcx rdi rdx rflags rsi 
0008ec70: JLP; lea r8, [rsi - 0x28] ; sub rdi, 0x20 ; mov r9, qword ptr [rsi - 8] ; add rdx, 3 ; mov rcx, rdi ; mov rax, r8 ; jmp 0x8eb54
read: r8 rdi rdx 
write: r8 r9 rax rcx rdi rdx rflags 
0008ec90: JLP; lea r8, [rsi - 0x38] ; sub rdi, 0x30 ; mov r9, qword ptr [rsi - 8] ; add rdx, 1 ; mov rcx, rdi ; mov rax, r8 ; jmp 0x8eb9a
read: r8 rdi rdx 
write: r8 r9 rax rcx rdi rdx rflags 
0008eda4: JLP; mov ecx, eax ; mov rsi, rbx ; mov r13, qword ptr [r10 + 0x18] ; shl r11, cl ; mov ecx, r8d ; mov r12, rdi ; shr rsi, cl ; mov rbp, r10 ; or r11, rsi ; mov qword ptr [rdi + 0x18], r11 ; nop dword ptr [rax - 0x45] ; mov ecx, eax ; mov r11, r13 ; mov rsi, qword ptr [rbp + 0x10] ; shl rbx, cl
read: cl eax r10 r11 r13 r8d rbx rdi rsi 
0008edf0: JLP; lea rbp, [rsi - 0x10] ; lea r12, [rdi - 8] ; mov rsi, qword ptr [rsi] ; mov r11, qword ptr [r9 - 8] ; add rdx, 2 ; mov r10, rbp ; mov rdi, r12 ; jmp 0x8ed7a
write: r10 r11 r12 rbp rdi rdx rflags rsi 
000934c0: JLP; mov byte ptr [rdi], sil ; add rdi, 1 ; nop dword ptr [rax - 0x45] ; mov rax, rdi ; ret
read: rdi sil 
write: rax rdi rflags 
000934cb: JLP; mov rax, rdi ; ret
read: rdi 
000934d8: JLP; mov eax, dword ptr [rsp + 0x10] ; add rdi, 8 ; mov dword ptr [rdi - 8], eax ; mov eax, dword ptr [rsp + 0x18] ; mov dword ptr [rdi - 4], eax ; mov rax, rdi ; ret
read: eax rdi 
write: eax rax rdi rflags 
000934f8: JLP; mov word ptr [rdi], r9w ; add rdi, 2 ; mov rax, rdi ; ret
read: r9w rdi 
write: rax rdi rflags 
00093510: JLP; mov word ptr [rdi], r9w ; mov byte ptr [rdi + 2], dl ; add rdi, 3 ; mov rax, rdi ; ret
read: dl r9w rdi 
write: rax rdi rflags 
00093528: JLP; mov eax, dword ptr [rsp + 0x10] ; add rdi, 4 ; mov dword ptr [rdi - 4], eax ; mov rax, rdi ; ret
read: eax rdi 
write: eax rax rdi rflags 
00093540: JLP; mov eax, dword ptr [rsp + 0x10] ; mov byte ptr [rdi + 4], cl ; add rdi, 5 ; mov dword ptr [rdi - 5], eax ; mov rax, rdi ; ret
read: cl eax rdi 
write: eax rax rdi rflags 
00093560: JLP; mov eax, dword ptr [rsp + 0x10] ; mov word ptr [rdi + 4], r11w ; add rdi, 6 ; mov dword ptr [rdi - 6], eax ; mov rax, rdi ; ret
read: eax r11w rdi 
write: eax rax rdi rflags 
00093580: JLP; mov eax, dword ptr [rsp + 0x10] ; mov word ptr [rdi + 4], r11w ; add rdi, 7 ; mov byte ptr [rdi - 1], r8b ; mov dword ptr [rdi - 7], eax ; mov rax, rdi ; ret
read: eax r11w r8b rdi 
write: eax rax rdi rflags 
000935c0: JLP; mov byte ptr [rdi], 0 ; nop dword ptr [rax - 0x45] ; mov rax, rdi ; ret
read: rdi 
000935c7: JLP; mov rax, rdi ; ret
read: rdi 
000935d0: JLP; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 4], r8d ; mov rax, rdi ; ret
read: ecx r8d rdi 
000935e0: JLP; mov word ptr [rdi], si ; mov rax, rdi ; ret
read: rdi si 
000935f0: JLP; mov word ptr [rdi], si ; mov byte ptr [rdi + 2], 0 ; mov rax, rdi ; ret
read: rdi si 
00093600: JLP; mov dword ptr [rdi], ecx ; mov rax, rdi ; ret
read: ecx rdi 
00093610: JLP; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], 0 ; mov rax, rdi ; ret
read: ecx rdi 
00093620: JLP; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; mov rax, rdi ; ret
read: dx ecx rdi 
00093630: JLP; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; mov rax, rdi ; mov byte ptr [rdi + 6], 0 ; ret
read: dx ecx rdi 
00093670: JLP; mov byte ptr [rdi], 0 ; mov rax, rdi ; ret
read: rdi 
00093680: JLP; mov dword ptr [rdi], ecx ; mov dword ptr [rdi + 4], r8d ; lea rax, [rdi + 7] ; ret
00093690: JLP; mov word ptr [rdi], si ; lea rax, [rdi + 1] ; ret
000936a0: JLP; mov word ptr [rdi], si ; mov byte ptr [rdi + 2], 0 ; lea rax, [rdi + 2] ; ret
000936b0: JLP; mov dword ptr [rdi], ecx ; lea rax, [rdi + 3] ; ret
000936c0: JLP; mov dword ptr [rdi], ecx ; mov byte ptr [rdi + 4], 0 ; lea rax, [rdi + 4] ; ret
000936d0: JLP; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; lea rax, [rdi + 5] ; ret
000936e0: JLP; mov dword ptr [rdi], ecx ; mov word ptr [rdi + 4], dx ; lea rax, [rdi + 6] ; mov byte ptr [rdi + 6], 0 ; ret
000a71fa: JLP; mov rcx, qword ptr [rsp + 8] ; lea rsi, [rip + 0x8ef0d] ; mov r8, rbp ; mov rdx, r13 ; mov rdi, r15 ; call 0xa69fc
write: r8 rcx rdi rdx rsi rsp 
000a7230: JLP; movzx edx, byte ptr [r15] ; lea rax, [r15 + 1] ; mov rdi, r15 ; movsx rsi, dl ; test byte ptr [rcx + rsi*2 + 1], 0x20 ; je 0xa7260
write: edx rax rdi rflags rsi 
000a7d1e: JLP; mov rcx, qword ptr [rsp + 8] ; lea rsi, [rip + 0x8e3f2] ; mov r8, rbp ; mov rdx, r13 ; mov rdi, r15 ; call 0xa69fc
write: r8 rcx rdi rdx rsi rsp 
000aa0b8: JLP; mov r14d, 1 ; mov eax, dword ptr [rsp + 0x10] ; xor esi, esi ; test edx, edx ; mov rdi, qword ptr [rsp + 0x30] ; mov qword ptr [rsp + 0x58], r11 ; mov dword ptr [rsp + 0x50], esi ; mov dword ptr [rsp + 0x68], r10d ; cmovne eax, esi ; mov dword ptr [rsp + 0x10], eax ; mov eax, 1 ; cmovne r14d, eax ; mov rax, qword ptr [rsp + 0x20] ; mov edx, dword ptr [rax + 8] ; cmp edx, 0xb
write: eax edx esi r14d rax rdi rflags 
000aa49b: JLP; mov rdi, qword ptr [rsp + 0x20] ; mov qword ptr [rsp + 0x58], r11 ; mov dword ptr [rsp + 0x50], r10d ; mov rax, qword ptr [rdi] ; mov qword ptr [rsp + 0x90], rax ; mov rax, qword ptr [rdi + 8] ; mov qword ptr [rsp + 0x98], rax ; mov rax, qword ptr [rdi + 0x10] ; mov qword ptr [rsp + 0xa0], rax ; mov rax, qword ptr [rdi + 0x18] ; mov qword ptr [rsp + 0xa8], rax ; mov rax, qword ptr [rdi + 0x20] ; mov qword ptr [rsp + 0xb0], rax ; mov rax, qword ptr [rdi + 0x28] ; mov qword ptr [rsp + 0xb8], rax
write: rax rdi 
000ac965: JLP; mov rdi, qword ptr [rbp - 0xe8] ; mov dword ptr [rbp - 0x128], r11d ; mov dword ptr [rbp - 0x120], r10d ; mov rax, qword ptr [rdi] ; mov qword ptr [rbp - 0xd0], rax ; mov rax, qword ptr [rdi + 8] ; mov qword ptr [rbp - 0xc8], rax ; mov rax, qword ptr [rdi + 0x10] ; mov qword ptr [rbp - 0xc0], rax ; mov rax, qword ptr [rdi + 0x18] ; mov qword ptr [rbp - 0xb8], rax ; mov rax, qword ptr [rdi + 0x20] ; mov qword ptr [rbp - 0xb0], rax ; mov rax, qword ptr [rdi + 0x28] ; mov qword ptr [rbp - 0xa8], rax
write: rax rdi 
000b4a00: JLP; mov rsi, rsp ; mov rdi, rbx ; call 0xd660c
write: rdi rsi rsp 
000b4a70: JLP; mov rsi, rsp ; mov rdi, rbx ; call 0xd660c
write: rdi rsi rsp 
000b4aa0: JLP; mov rbp, qword ptr [rip + 0x2b43bd] ; mov rsi, rsp ; mov rdi, rbx ; mov r12d, dword ptr fs:[rbp] ; call 0xd660c
write: r12d rbp rdi rsi rsp 
000b4e06: JLP; lea rdi, [rip + 0x81514] ; call 0xb4b0c
write: rdi rsp 
000b4e2d: JLP; lea rdi, [rip + 0x814e1] ; call 0xb4b0c
write: rdi rsp 
000b4f50: JLP; lea rdi, [rip + 0x813ca] ; call 0xb4b0c
write: rdi rsp 
000b5049: JLP; lea rdi, [rip + 0x812c5] ; call 0xb4b0c
write: rdi rsp 
000b51b9: JLP; lea rdi, [rip + 0x81161] ; call 0xb4b0c
write: rdi rsp 
000b51d2: JLP; lea rdi, [rip + 0x8113c] ; call 0xb4b0c
write: rdi rsp 
000bc240: JLP; mov rax, qword ptr [rsi + 8] ; or byte ptr [rdi + 0xa0], 1 ; test rax, rax ; je 0xbc3ac
000bc2d8: JLP; mov rax, qword ptr [rsi + 0x20] ; mov rdx, qword ptr [rdi + 0x18] ; mov eax, dword ptr [rax + 0x38] ; mov dword ptr [rdx + r8*4], eax ; cmp byte ptr [rsi + 0x30], 4 ; jne 0xbc22b
000bc310: JLP; mov rax, qword ptr [rsi + 0x20] ; shl r8, 4 ; add r8, qword ptr [rdi + 0x28] ; mov esi, dword ptr [rax + 0x38] ; mov rdi, r8 ; call 0xbbf1c
write: esi r8 rax rdi rflags rsp 
000bd148: JLP; mov rdi, qword ptr [rdi] ; call 0xbd09c
write: rdi rsp 
000bd6db: JLP; lea eax, [rdx + rsi] ; mov edi, eax ; shr edi, 0x1f ; add eax, edi ; sar eax, 1 ; movsxd rdi, eax ; mov r14d, eax ; mov edi, dword ptr [rcx + rdi*4] ; cmp ebp, edi ; jge 0xbd6c6
write: eax edi r14d rdi rflags 
000be327: JLP; lea edi, [rax + 1] ; shl rax, 6 ; mov dword ptr [rsi], edi ; lea rsi, [r9 + rax] ; lea rax, [rsi + 8] ; mov qword ptr [rsi + 8], 0 ; mov qword ptr [rax + 8], rdx ; mov qword ptr [rax + 0x10], rcx ; mov rdi, qword ptr [r8 + 8] ; mov rsi, qword ptr [r8] ; mov qword ptr [rax + 0x18], 0 ; mov qword ptr [rax + 0x20], 0 ; mov dword ptr [rax + 0x38], 0xffffffff ; mov qword ptr [rax + 0x30], rdi ; and byte ptr [rax + 0x32], 0xf3
read: edi rax rcx rdi rdx 
write: edi rax rdi rflags rsi 
000c43c0: JLP; mov edx, dword ptr [rsp + 0x220] ; mov esi, ebx ; mov rdi, r12 ; call 0xbd59c
write: edx esi rdi rsp 
000c5ae0: JLP; mov rax, qword ptr [rbx + 8] ; mov rdi, rbp ; movsxd rsi, dword ptr [rax + r13] ; shl rsi, 4 ; add rsi, qword ptr [r15 + 0x38] ; call 0xbec4c
write: rax rdi rflags rsi rsp 
000c65e9: JLP; mov rdx, qword ptr [rsp + 0x20] ; mov rax, qword ptr [rsp + 0x28] ; xor ecx, ecx ; lea rsi, [rdx + 0x80] ; lea rdi, [rdx + 0x70] ; mov byte ptr [rax + 8], 1 ; xor edx, edx ; mov r8, rax ; call 0xbe30c
write: ecx edx r8 rax rdi rdx rflags rsi rsp 
000c6b52: JLP; mov rbx, qword ptr [rsp + 0x48] ; mov r14, qword ptr [rsp + 0x58] ; cmp al, 0x21 ; sete r8b ; lea rcx, [rip + 0x6f07d] ; lea rdx, [rip + 0x6f935] ; movzx r8d, r8b ; mov rsi, qword ptr [rbx + 0x50] ; mov r9, r14 ; mov rdi, qword ptr [rsp + 0x20] ; call 0xc0b5c
write: r14 r8b r8d r9 rbx rcx rdi rdx rflags rsi rsp 
000c6bd5: JLP; mov rbx, qword ptr [rsi + 0x30] ; mov r15, qword ptr [rsp + 0x50] ; lea r13d, [r8 + 1] ; mov r14, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x28] ; lea rax, [rbx + 1] ; mov rdx, r15 ; or rdx, 0x800000 ; mov ebp, dword ptr [r14 + 0x38] ; mov qword ptr [rsi + 0x30], rax ; mov rsi, r14 ; call 0xc5d8c
write: ebp r13d r14 r15 rax rbx rdi rdx rflags rsi rsp 
000c6d46: JLP; mov rbx, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x28] ; xor ecx, ecx ; xor edx, edx ; lea rsi, [rbx + 0x80] ; lea rdi, [rbx + 0x70] ; call 0xbe30c
write: ecx edx r8 rbx rdi rflags rsi rsp 
000c6ea1: JLP; mov rax, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x28] ; xor ecx, ecx ; xor edx, edx ; lea rbx, [rax + 0x70] ; lea rbp, [rax + 0x80] ; mov rdi, rbx ; mov rsi, rbp ; call 0xbe30c
write: ecx edx r8 rax rbp rbx rdi rflags rsi rsp 
000c71c7: JLP; mov r14, qword ptr [rsp + 0xe8] ; mov rdi, r14 ; call 0x856dc
write: r14 rdi rsp 
000c73b2: JLP; mov rax, qword ptr [rsp + 0x48] ; mov r9, qword ptr [rsp + 0xe8] ; lea rdx, [r13 + 0x28] ; mov r8, qword ptr [rsp + 0xb8] ; lea rcx, [r13 + 0x44] ; mov rsi, r15 ; mov rdi, qword ptr [rax + 0x50] ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call 0xc033c
write: r8 r9 rax rcx rdi rdx rsi rsp 
000c8f70: JLP; mov rax, qword ptr [r12 + 0x68] ; mov rdi, qword ptr [rsp + 0x18] ; mov rax, qword ptr [rax + 0x18] ; movsxd rsi, dword ptr [rax + 0x38] ; mov dword ptr [r12 + 0x88], esi ; shl rsi, 4 ; add rsi, qword ptr [r12 + 0x30] ; call 0xbf22c
write: rax rdi rflags rsi rsp 
000c9546: JLP; cmp qword ptr [r12 + 0x10], rcx ; lea rdi, [rcx + 1] ; jbe 0xc94e3
write: rdi rflags 
000d33c0: JLP; lea rcx, [rip + 0x633c7] ; lea rsi, [rip + 0x632f8] ; lea rdi, [rip + 0x63335] ; mov edx, 0x77b ; call 0x2eaac
write: edx rcx rdi rsi rsp 
000dfbab: JLP; lea rdi, [rsp + 0x40] ; mov rbx, rax ; call 0xdf3bc
write: rbx rdi rsp 
000dfbc8: JLP; mov rbp, rax ; mov rdi, rbx ; call 0x1f46c
write: rbp rdi rsp 
00108540: JLP; mov dword ptr [rsi], 9 ; mov rax, qword ptr [rdi + 0x38] ; mov qword ptr [rsi + 8], rax ; mov rax, qword ptr [rdi + 0x40] ; mov qword ptr [rsi + 0x10], rax ; ret
0010e768: JLP; mov r13, qword ptr [rsp + 0x20] ; mov r12, qword ptr [rsp + 0x18] ; lea rsi, [rip + 0x2dd23] ; lea rdi, [rip + 0x2622d] ; mov edx, 5 ; call 0x2f4bc
write: edx r12 r13 rdi rsi rsp 
0010e7f8: JLP; mov r12d, dword ptr [rsp + 0x18] ; lea rax, [rip + 0x25798] ; xor edi, edi ; nop word ptr [rax + rax] ; cmp r12d, dword ptr [rax + rdi*8] ; je 0x10e90c
0010e868: JLP; lea rdi, [rsp + 8] ; lea rsi, [rip + 0x27ecc] ; mov rcx, rbp ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
0010ec40: JLP; mov rsi, qword ptr [rcx + 8] ; mov rdi, qword ptr [rcx + 0x10] ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
read: rdi rsi 
write: eax rdi rsi 
0010ec60: JLP; mov rsi, qword ptr [rcx + 0x1c] ; mov rdi, qword ptr [rcx + 0x24] ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
read: rdi rsi 
write: eax rdi rsi 
0010f568: JLP; mov rdx, qword ptr [rdx] ; mov rax, qword ptr [rdi + 0x90] ; bswap edx ; mov dword ptr [rax + 0xc], edx ; mov eax, 1 ; ret
0010f588: JLP; mov rax, qword ptr [rdx] ; mov rdx, qword ptr [rdx + 8] ; mov qword ptr [rdi + 0x30], rax ; mov qword ptr [rdi + 0x38], rdx ; mov eax, 1 ; ret
0010f5a8: JLP; mov rsi, qword ptr [rdi + 0x30] ; mov rdi, qword ptr [rdi + 0x38] ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
read: rdi rsi 
write: eax rdi rsi 
0010f5c8: JLP; mov rsi, qword ptr [rdi + 8] ; mov rdi, qword ptr [rdi + 0x10] ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
read: rdi rsi 
write: eax rdi rsi 
0010f5e8: JLP; mov rax, qword ptr [rdx] ; mov rdx, qword ptr [rdx + 8] ; mov qword ptr [rdi + 0x20], rax ; mov qword ptr [rdi + 0x28], rdx ; mov eax, 1 ; ret
0010f608: JLP; mov rsi, qword ptr [rdi + 0x20] ; mov rdi, qword ptr [rdi + 0x28] ; mov eax, 1 ; mov qword ptr [rdx], rsi ; mov qword ptr [rdx + 8], rdi ; ret
read: rdi rsi 
write: eax rdi rsi 
0010f628: JLP; mov eax, dword ptr [rdi] ; mov dword ptr [rdx], eax ; mov eax, 1 ; ret
0010f640: JLP; mov dword ptr [rdi + 4], 1 ; mov eax, 1 ; ret
0010f658: JLP; mov dword ptr [rdi + 4], 0 ; mov eax, 1 ; ret
0010f670: JLP; mov rax, qword ptr [rdi + 0x90] ; mov eax, dword ptr [rax] ; bswap eax ; mov eax, eax ; mov qword ptr [rdx], rax ; mov eax, 1 ; ret
0010f690: JLP; mov rax, qword ptr [rdx] ; mov rdx, qword ptr [rdi + 0x90] ; sub eax, 1 ; bswap eax ; mov dword ptr [rdx], eax ; mov eax, 1 ; ret
0010f6b0: JLP; mov rax, qword ptr [rdi + 0x90] ; mov eax, dword ptr [rax + 0x10] ; bswap eax ; mov eax, eax ; mov qword ptr [rdx], rax ; mov eax, 1 ; ret
0010f6d0: JLP; mov rdx, qword ptr [rdx] ; mov rax, qword ptr [rdi + 0x90] ; bswap edx ; mov dword ptr [rax + 0x10], edx ; mov eax, 1 ; ret
0010f6f0: JLP; mov rax, qword ptr [rdi + 0x90] ; mov eax, dword ptr [rax + 0xc] ; bswap eax ; mov eax, eax ; mov qword ptr [rdx], rax ; mov eax, 1 ; ret
00115128: JLP; movzx esi, byte ptr [rdi] ; xor ecx, ecx ; lea rax, [rdi + 1] ; add ecx, esi ; imul ecx, ecx, 0x1003f ; lea rdi, [rax + 1] ; movzx eax, byte ptr [rax] ; add ecx, eax ; imul ecx, ecx, 0x1003f ; movzx esi, byte ptr [rdi] ; lea rax, [rdi + 1] ; add ecx, esi ; imul ecx, ecx, 0x1003f ; lea rdi, [rax + 1] ; movzx eax, byte ptr [rax]
write: eax ecx esi rax rdi rflags 
001151d0: JLP; mov rcx, rdi ; xor eax, eax ; jmp 0x115175
read: eax rdi 
001151f0: JLP; mov rax, rdi ; xor ecx, ecx ; jmp 0x115157
read: ecx rdi 
00115210: JLP; mov rax, rdi ; xor ecx, ecx ; jmp 0x115139
read: ecx rdi 
0001f658: RLP; mov r9, qword ptr [rbp - 0x38] ; movsxd rdi, r12d ; mov rsi, r14 ; add rdi, r9 ; cmp rax, r13 ; jbe 0x1f6ca
read: r12d r13 r14 r9 rax rdi rflags 
write: r9 rdi rflags rsi 
0001fe3d: RLP; lea esi, [rbp - 1] ; lea rdi, [rsp + 8] ; mov edx, r12d ; lea rbp, [rsp + 0x200] ; call 0xf14fc
write: edx esi rbp rdi rsp 
0001fe71: RLP; lea rdi, [rip + 0x115b41] ; xor esi, esi ; xor eax, eax ; call 0xd6819
write: eax esi rdi rflags rsp 
0001ff2d: RLP; mov byte ptr [rax], 0x2f ; inc rax ; mov rsi, r13 ; mov rdi, rax ; mov rcx, rbx ; rep movsb byte ptr [rdi], byte ptr [rsi] ; lea rsi, [rbp - 0xb0] ; mov rdi, r12 ; call qword ptr [r14]
read: r12 r13 rax rbx rcx rdi rflags rsi rsp 
write: rax rcx rdi rflags rsi rsp 
00020492: RLP; mov ecx, dword ptr [rbp - 0x44] ; mov rdx, qword ptr [rbp - 0x50] ; xor r9d, r9d ; mov qword ptr [rsp], r12 ; mov r8d, r13d ; mov rsi, r15 ; mov rdi, rax ; call 0xb841c
write: ecx r8d r9d rdi rdx rflags rsi rsp 
00020ac7: RLP; mov ecx, dword ptr [rbp - 0x44] ; mov rdx, qword ptr [rbp - 0x50] ; xor r9d, r9d ; mov qword ptr [rsp], r12 ; mov r8d, r13d ; mov rsi, r15 ; mov rdi, rax ; call 0xb9c2c
write: ecx r8d r9d rdi rdx rflags rsi rsp 
000213b8: RLP; mov rdi, qword ptr [rbp - 0x68] ; xor ebx, ebx ; call 0x1f46c
write: ebx rdi rflags rsp 
000213c7: RLP; mov rcx, qword ptr [rbp - 0xc0] ; mov rax, rbx ; inc rbx ; shl rax, 4 ; mov rdi, qword ptr [rcx + rax + 8] ; call 0x1f46c
write: rax rbx rcx rdi rflags rsp 
00021451: RLP; mov rdi, qword ptr [rbp - 0xa0] ; mov rcx, qword ptr [rbp - 0x98] ; test rax, rax ; mov qword ptr [rdi + rcx*8], rax ; jne 0x21475
write: rcx rdi rflags 
0002149a: RLP; mov rcx, qword ptr [rbp - 0xd0] ; mov rdi, qword ptr [rbp - 0x98] ; test rax, rax ; mov qword ptr [rcx + rdi*8], rax ; jne 0x214be
write: rcx rdi rflags 
00021507: RLP; mov rcx, qword ptr [rbp - 0xd8] ; mov rdi, qword ptr [rbp - 0x98] ; test rax, rax ; mov qword ptr [rcx + rdi*8], rax ; jne 0x21554
write: rcx rdi rflags 
00021751: RLP; mov rdi, qword ptr [rbp - 0x68] ; xor ebx, ebx ; call 0x1f46c
write: ebx rdi rflags rsp 
00021760: RLP; mov r12, qword ptr [rbp - 0xc0] ; mov rax, rbx ; inc rbx ; shl rax, 4 ; mov rdi, qword ptr [r12 + rax + 8] ; call 0x1f46c
write: r12 rax rbx rdi rflags rsp 
00022060: RLP; mov rax, qword ptr [rip + 0x348885] ; mov rdi, qword ptr [rsp + 8] ; call rax
write: rax rdi rsp 
000226f3: RLP; lea rcx, [rax + 0x21] ; mov rsi, rbx ; mov rdx, rax ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea rcx, [rsp + 0xf] ; mov qword ptr [rbp - 0x60], rcx ; and qword ptr [rbp - 0x60], 0xfffffffffffffff0 ; mov rdi, qword ptr [rbp - 0x60] ; call 0x892cc
write: rcx rdi rdx rflags rsi rsp 
000229db: RLP; lea rcx, [rax + 0x21] ; mov rdx, rax ; mov rsi, rbx ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea rcx, [rsp + 0xf] ; mov qword ptr [rbp - 0x58], rcx ; and qword ptr [rbp - 0x58], 0xfffffffffffffff0 ; mov rdi, qword ptr [rbp - 0x58] ; call 0x892cc
write: rcx rdi rdx rflags rsi rsp 
00022b1d: RLP; mov rdi, rbx ; mov qword ptr [rbp - 0x60], rax ; call 0x856dc
write: rdi rsp 
00022b2d: RLP; lea rdx, [rax + 1] ; add rax, 0x1f ; mov rsi, rbx ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: rax rbx rdi rip rsp 
write: rax rdi rdx rflags rsi rsp 
00022f34: RLP; xor r8d, r8d ; mov rdi, qword ptr [r15 + 8] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; mov r9, r14 ; mov rcx, r12 ; mov rdx, rbp ; mov rsi, qword ptr [rsp + 0x18] ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
00022fc8: RLP; mov rax, qword ptr [rsp + 0x28] ; lea rsi, [r15 + 0x10] ; mov rdi, qword ptr [r15 + 8] ; mov r9, r14 ; lea rdx, [rax*8] ; shl rax, 6 ; sub rax, rdx ; add rax, r15 ; cmp qword ptr [rax + 0x10], 1 ; mov dword ptr [rsp + 8], 0 ; sbb eax, eax ; xor r8d, r8d ; xor ecx, ecx ; not eax ; xor edx, edx
write: eax ecx edx r8d r9 rax rdi rdx rflags rsi 
00023138: RLP; mov rsi, r15 ; mov rdi, r14 ; call 0x241ac
write: rdi rsi rsp 
00023279: RLP; mov rdi, rbx ; call rbp
write: rdi rsp 
00023282: RLP; mov rdi, qword ptr [rbx] ; call 0x2bb9c
write: rdi rsp 
000233d8: RLP; mov rdi, rbx ; call r15
write: rdi rsp 
00023483: RLP; sub rsp, 0x40 ; mov qword ptr [r15 + 8], rax ; mov rax, qword ptr [rbp - 0x98] ; lea rbx, [rsp + 0xf] ; mov dword ptr [r15 + 0x14], 0 ; mov dword ptr [r15 + 0x10], 0 ; mov qword ptr [r15 + 0x18], 0 ; mov qword ptr [r15 + 0x20], 0 ; and rbx, 0xfffffffffffffff0 ; mov qword ptr [r15 + 0x28], 0 ; mov rdi, rax ; mov qword ptr [rbx], rax ; call 0x856dc
write: rax rbx rdi rflags rsp 
00023ac5: RLP; mov rdi, r14 ; mov rax, qword ptr [rbp - 0x60] ; call rax
write: rax rdi rsp 
00023b4b: RLP; mov rdi, r14 ; lea r15, [rax + 1] ; mov qword ptr [rbp - 0x58], r14 ; call 0x856dc
write: r15 rdi rsp 
00023b5f: RLP; add rax, 1 ; lea rdi, [r15 + rax + 0x20] ; mov qword ptr [rbp - 0x60], rax ; call 0x1f3cc
write: rax rdi rflags rsp 
00023b9e: RLP; mov rdx, qword ptr [rbp - 0x60] ; mov rsi, qword ptr [rbp - 0x58] ; mov rdi, rax ; call 0x8e3dc
write: rdi rdx rsi rsp 
00023bb2: RLP; lea rdx, [rip - 0x9dd] ; lea rsi, [rip + 0x346d3c] ; mov qword ptr [r14 + 8], rax ; mov qword ptr [r14 + 0x10], rbx ; mov qword ptr [r14 + 0x18], r12 ; mov rdi, r14 ; call 0xe13dc
write: rdi rdx rsi rsp 
00023e28: RLP; mov rdi, rbx ; test rax, rax ; cmovne rbp, rax ; call 0x2318c
write: rbp rdi rflags rsp 
00023e3b: RLP; test rax, rax ; mov rsi, rbp ; cmove rax, rbx ; mov rdi, rax ; call 0x83c8c
write: rax rdi rflags rsi rsp 
00023f29: RLP; add rsp, 0x80 ; mov rdx, r12 ; mov r8d, r14d ; mov rcx, r13 ; mov rsi, rbp ; mov rdi, rbx ; call 0x2b60c
write: r8d rcx rdi rdx rflags rsi rsp 
00023fb6: RLP; mov rdi, rbx ; mov qword ptr [rsp + 8], rax ; call 0x2318c
write: rdi rsp 
000245ae: RLP; cmp eax, 1 ; mov ecx, dword ptr [rbp - 0x58] ; mov r9, qword ptr [rbp - 0x50] ; sbb r15d, r15d ; not r15d ; and r15d, 3 ; mov rax, r14 ; mov rdi, rbx ; mov qword ptr [rbp - 0x50], r9 ; sub rax, rbx ; mov dword ptr [rbp - 0x58], ecx ; mov rsi, rax ; mov qword ptr [rbp - 0x70], rax ; call 0x858ac
write: ecx r15d r9 rax rdi rflags rsi rsp 
000245e2: RLP; lea rdx, [rax + 0x1f] ; mov rsi, rbx ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; mov rdx, rax ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; mov byte ptr [rdi + rax], 0 ; call 0x8e3dc
read: rax rbx rdi rdx rip rsp 
write: rdi rdx rflags rsi rsp 
00024609: RLP; lea rdi, [rbp - 0x40] ; lea rdx, [rip - 0x14a8] ; lea rsi, [rip + 0x349d41] ; mov qword ptr [rbp - 0x40], rax ; call 0xe152c
write: rdi rdx rsi rsp 
00024674: RLP; mov rdx, qword ptr [rbp - 0x48] ; mov qword ptr [r13 + 8], rax ; mov rsi, r14 ; mov rdi, rax ; sub rdx, r14 ; call 0x892cc
write: rdi rdx rflags rsi rsp 
000246bb: RLP; mov rdx, qword ptr [rbp - 0x68] ; mov rsi, qword ptr [rbp - 0x48] ; mov rdi, rax ; call 0x892cc
write: rdi rdx rsi rsp 
00024791: RLP; lea rdx, [rip - 0x162c] ; lea rsi, [rip + 0x349bbd] ; mov qword ptr [rbx], rax ; mov rdi, rbx ; add rax, r13 ; mov qword ptr [rbx + 8], rax ; call 0xe13dc
write: rax rdi rdx rflags rsi rsp 
000248a3: RLP; lea rdx, [rax + 0x30] ; lea rcx, [rax + 0x12] ; mov rsi, rbx ; and rdx, 0xfffffffffffffff0 ; mov qword ptr [rbp - 0x40], rcx ; sub rsp, rdx ; mov rdx, rax ; lea r13, [rsp + 0xf] ; and r13, 0xfffffffffffffff0 ; mov rdi, r13 ; call 0x892cc
write: r13 rcx rdi rdx rflags rsi rsp 
00024905: RLP; mov rdi, rax ; mov rbx, rax ; call 0x856dc
write: rbx rdi rsp 
00024914: RLP; lea r15, [rax + 1] ; mov qword ptr [rbp - 0x38], rax ; mov esi, 0x3a ; mov rdi, r13 ; call 0x83a5c
write: esi r15 rdi rsp 
00024a5f: RLP; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x2f ; mov rsi, r13 ; call 0x898ec
write: rdi rsi rsp 
00024c8b: RLP; movabs rcx, 0x6f6d2d766e6f6367 ; mov edx, 0x73 ; lea rsi, [rip + 0x10f853] ; mov rdi, rbx ; mov qword ptr [rax], rcx ; mov dword ptr [rax + 8], 0x656c7564 ; mov word ptr [rax + 0xc], dx ; call 0x6ca9c
write: edx rcx rdi rsi rsp 
00024db1: RLP; mov rdi, rbx ; call 0x6bf5c
write: rdi rsp 
00024dbd: RLP; mov rax, qword ptr [rbp - 0x68] ; add rax, qword ptr [rip + 0x3495bc] ; add qword ptr [rbp - 0x68], 0x10 ; mov rdi, qword ptr [rax] ; test rdi, rdi ; mov qword ptr [rbp - 0x60], rdi ; jne 0x24c5c
read: rax rdi rflags 
write: rax rdi rflags 
00024e3d: RLP; lea r13, [rax + 1] ; xor esi, esi ; mov rdi, r13 ; call 0x9023c
write: esi r13 rdi rflags rsp 
00024e4f: RLP; mov rdi, rbx ; mov r12, rax ; lea r14, [rax + 1] ; call 0x2438c
write: r12 r14 rdi rsp 
0002532e: RLP; mov rdi, qword ptr [r15 + 0x18] ; mov r8, r12 ; mov rcx, rbx ; mov rdx, qword ptr [r13] ; mov rsi, rbp ; call qword ptr [r15 + 8]
write: r8 rcx rdi rdx rsi rsp 
0002537e: RLP; mov eax, dword ptr [rsp + 0xb8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x50] ; mov rcx, r12 ; mov rdx, qword ptr [rsp + 0x58] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00025480: RLP; mov eax, dword ptr [rsp + 0xb8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x50] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
0002571e: RLP; mov rdi, qword ptr [r14 + 0x18] ; mov r8, r15 ; mov rcx, rbx ; mov rdx, qword ptr [r12] ; mov rsi, rbp ; call qword ptr [r14 + 8]
write: r8 rcx rdi rdx rsi rsp 
0002576f: RLP; mov eax, dword ptr [rsp + 0xb8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x38] ; mov rcx, r15 ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00025a0c: RLP; mov eax, dword ptr [rsp + 0xb8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; xor ecx, ecx ; mov rdi, qword ptr [rsp + 0x40] ; xor edx, edx ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
00025c0e: RLP; mov rdi, qword ptr [r15 + 0x18] ; mov r8, rbx ; mov rcx, rbp ; mov rdx, qword ptr [r13] ; mov rsi, r12 ; call qword ptr [r15 + 8]
write: r8 rcx rdi rdx rsi rsp 
00025c5e: RLP; mov eax, dword ptr [rsp + 0xb8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x50] ; mov rcx, rbx ; mov rdx, qword ptr [rsp + 0x58] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r15
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00025dda: RLP; mov eax, dword ptr [rsp + 0xb8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x50] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
0002608e: RLP; mov rdi, qword ptr [r14 + 0x18] ; mov r8, r15 ; mov rcx, rbx ; mov rdx, qword ptr [r12] ; mov rsi, rbp ; call qword ptr [r14 + 8]
write: r8 rcx rdi rdx rsi rsp 
000260e3: RLP; mov eax, dword ptr [rsp + 0xb8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x38] ; mov rcx, r15 ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
0002637d: RLP; mov eax, dword ptr [rsp + 0xb8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x38] ; mov rsi, qword ptr [rsp + 0x48] ; xor ecx, ecx ; mov rdi, qword ptr [rsp + 0x40] ; xor edx, edx ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
000265b7: RLP; mov rdi, qword ptr [r12 + 0x18] ; mov r8, rbx ; mov rcx, rbp ; mov rdx, qword ptr [r13] ; mov rsi, r14 ; call qword ptr [r12 + 8]
write: r8 rcx rdi rdx rsi rsp 
0002661b: RLP; mov eax, dword ptr [rsp + 0xb8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x38] ; mov rcx, rbx ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
0002674c: RLP; mov eax, dword ptr [rsp + 0xb8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x38] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
000269de: RLP; mov rdi, qword ptr [rbx + 0x18] ; mov r8, r12 ; mov rcx, rbp ; mov rdx, qword ptr [r14] ; mov rsi, r13 ; call qword ptr [rbx + 8]
write: r8 rcx rdi rdx rsi rsp 
00026a40: RLP; mov eax, dword ptr [rsp + 0xe8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x48] ; mov rcx, r12 ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call rbp
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00026b24: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [rbp + 0x18] ; mov r9, rbx ; mov r8, qword ptr [rsp + 0x78] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [rbp]
write: r8 r9 rax rcx rdi rdx rsi rsp 
00026e52: RLP; mov eax, dword ptr [rsp + 0xe8] ; mov dword ptr [rsp], ebp ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x48] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
00026f14: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [r13 + 0x18] ; mov r9, rbx ; mov r8, qword ptr [rsp + 0x30] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [r13]
write: r8 r9 rax rcx rdi rdx rsi rsp 
0002737e: RLP; mov rdi, qword ptr [rbx + 0x18] ; mov r8, r12 ; mov rcx, rbp ; mov rdx, qword ptr [r14] ; mov rsi, r13 ; call qword ptr [rbx + 8]
write: r8 rcx rdi rdx rsi rsp 
000273e2: RLP; mov edi, dword ptr [rsp + 0xf8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x40] ; mov rcx, r12 ; mov rdx, qword ptr [rsp + 0x58] ; mov rsi, qword ptr [rsp + 0x50] ; mov rax, qword ptr [rsp + 0x20] ; mov dword ptr [rsp + 8], edi ; mov rdi, qword ptr [rsp + 0x48] ; call rax
write: edi r8d r9 rax rcx rdi rdx rflags rsi rsp 
000277f6: RLP; mov rax, qword ptr [rsp + 0x60] ; mov rdx, qword ptr [r13 + 0x18] ; mov r9, rbx ; mov r8, qword ptr [rsp + 0x30] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 0x68] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x58] ; mov qword ptr [rsp], rax ; call qword ptr [r13]
write: r8 r9 rax rcx rdi rdx rsi rsp 
000279f3: RLP; mov eax, dword ptr [rsp + 0xf8] ; mov dword ptr [rsp], ebp ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x40] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x50] ; mov rdi, qword ptr [rsp + 0x48] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
00027b0c: RLP; mov rax, qword ptr [rsp + 0x60] ; mov rdx, qword ptr [rbx + 0x18] ; mov r9, rbp ; mov r8, qword ptr [rsp + 0x70] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 0x68] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x78] ; mov qword ptr [rsp], rax ; call qword ptr [rbx]
write: r8 r9 rax rcx rdi rdx rsi rsp 
00027d47: RLP; mov rax, qword ptr [rsp + 0x78] ; mov rdx, qword ptr [r13 + 0x18] ; mov r9, rbx ; mov qword ptr [rsp + 8], r12 ; mov r8, qword ptr [rsp + 0x70] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x10] ; mov qword ptr [rsp], rax ; mov rdi, qword ptr [rsp + 0x68] ; call qword ptr [r13]
write: r8 r9 rax rcx rdi rdx rsi rsp 
000280ee: RLP; mov rdi, qword ptr [r14 + 0x18] ; mov r8, rbx ; mov rcx, rbp ; mov rdx, qword ptr [r13] ; mov rsi, r12 ; call qword ptr [r14 + 8]
write: r8 rcx rdi rdx rsi rsp 
00028152: RLP; mov eax, dword ptr [rsp + 0xd8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x48] ; mov rcx, rbx ; mov rdx, qword ptr [rsp + 0x60] ; mov rsi, qword ptr [rsp + 0x58] ; mov rdi, qword ptr [rsp + 0x50] ; mov dword ptr [rsp + 8], eax ; call r12
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00028929: RLP; mov eax, dword ptr [rsp + 0xd8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x48] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x58] ; mov rdi, qword ptr [rsp + 0x50] ; mov dword ptr [rsp + 8], eax ; call r15
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
00028e2e: RLP; mov rdi, qword ptr [r14 + 0x18] ; mov r8, rbx ; mov rcx, rbp ; mov rdx, qword ptr [r13] ; mov rsi, r12 ; call qword ptr [r14 + 8]
write: r8 rcx rdi rdx rsi rsp 
00028e8f: RLP; mov eax, dword ptr [rsp + 0xc8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x38] ; mov rcx, rbx ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call rbp
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00029178: RLP; mov eax, dword ptr [rsp + 0xc8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x38] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
0002948e: RLP; mov rdi, qword ptr [rbx + 0x18] ; mov r8, r12 ; mov rcx, rbp ; mov rdx, qword ptr [r14] ; mov rsi, r15 ; call qword ptr [rbx + 8]
write: r8 rcx rdi rdx rsi rsp 
000294f0: RLP; mov eax, dword ptr [rsp + 0xe8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x48] ; mov rcx, r12 ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call r15
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
00029612: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [rbp + 0x18] ; mov r9, rbx ; mov r8, qword ptr [rsp + 0x78] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [rbp]
write: r8 r9 rax rcx rdi rdx rsi rsp 
0002991e: RLP; mov eax, dword ptr [rsp + 0xe8] ; mov dword ptr [rsp], ebp ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x48] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
00029a6b: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [rbx + 0x18] ; mov rsi, r15 ; mov r9, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x30] ; mov rcx, qword ptr [r14] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [rbx]
write: r8 r9 rax rcx rdi rdx rsi rsp 
00029e46: RLP; mov rdi, qword ptr [r14 + 0x18] ; mov r8, rbx ; mov rcx, rbp ; mov rdx, qword ptr [r13] ; mov rsi, r12 ; call qword ptr [r14 + 8]
write: r8 rcx rdi rdx rsi rsp 
00029ea7: RLP; mov eax, dword ptr [rsp + 0xc8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x38] ; mov rcx, rbx ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call rbp
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
0002a18b: RLP; mov eax, dword ptr [rsp + 0xc8] ; mov dword ptr [rsp], ebx ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x38] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x40] ; mov dword ptr [rsp + 8], eax ; call r14
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
0002a4b6: RLP; mov rdi, qword ptr [rbx + 0x18] ; mov r8, r12 ; mov rcx, rbp ; mov rdx, qword ptr [r14] ; mov rsi, r15 ; call qword ptr [rbx + 8]
write: r8 rcx rdi rdx rsi rsp 
0002a518: RLP; mov eax, dword ptr [rsp + 0xe8] ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; mov r9, qword ptr [rsp + 0x48] ; mov rcx, r12 ; mov rdx, qword ptr [rsp + 0x50] ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call r15
write: eax r8d r9 rcx rdi rdx rflags rsi rsp 
0002a63a: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [rbp + 0x18] ; mov r9, rbx ; mov r8, qword ptr [rsp + 0x78] ; mov rcx, qword ptr [r14] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [rbp]
write: r8 r9 rax rcx rdi rdx rsi rsp 
0002a940: RLP; mov eax, dword ptr [rsp + 0xe8] ; mov dword ptr [rsp], ebp ; xor r8d, r8d ; mov r9, qword ptr [rsp + 0x48] ; xor ecx, ecx ; xor edx, edx ; mov rsi, qword ptr [rsp + 0x60] ; mov rdi, qword ptr [rsp + 0x58] ; mov dword ptr [rsp + 8], eax ; call rbx
write: eax ecx edx r8d r9 rdi rflags rsi rsp 
0002aa8d: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdx, qword ptr [rbx + 0x18] ; mov rsi, r15 ; mov r9, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x30] ; mov rcx, qword ptr [r14] ; mov rdi, qword ptr [rsp + 0x70] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0x50] ; mov qword ptr [rsp], rax ; call qword ptr [rbx]
write: r8 r9 rax rcx rdi rdx rsi rsp 
0002afc5: RLP; xor r9d, r9d ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; mov r8, qword ptr [rsp + 0x28] ; mov rcx, r15 ; mov rdx, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x18] ; call rbp
write: r8 r9d rcx rdi rdx rflags rsi rsp 
0002b0b1: RLP; xor r9d, r9d ; lea rcx, [r13 + rbp*4] ; lea rdx, [rsp + 0x90] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; lea r8, [rsp + 0x98] ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x18] ; call r15
write: r8 r9d rcx rdi rdx rflags rsi rsp 
0002b263: RLP; mov rdi, r12 ; mov r15, rax ; call 0x856dc
write: r15 rdi rsp 
0002b272: RLP; lea r13, [rax + 1] ; mov rdx, r15 ; mov rsi, r14 ; lea rcx, [r13 + r15 + 0xf] ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; mov rdi, rsp ; call 0x892cc
write: r13 rcx rdi rdx rflags rsi rsp 
0002b294: RLP; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rax ; call 0x8e3dc
write: rdi rdx rsi rsp 
0002b2a6: RLP; mov rdi, rsp ; call 0x2bbcc
write: rdi rsp 
0002b30e: RLP; mov rdi, rbx ; call r12
write: rdi rsp 
0002b495: RLP; mov qword ptr [rip + 0x33f47c], 0 ; nop dword ptr [rax] ; mov rdi, rbp ; mov eax, 3 ; syscall ; nop word ptr [rax + rax] ; add rsp, 0x90 ; mov eax, 0xffffffff ; pop rbx ; pop rbp ; pop r12 ; ret
write: eax r12 rbp rbx rdi rflags rsp 
0002b8ef: RLP; mov eax, dword ptr [rsp] ; mov rdi, r13 ; mov dword ptr [rsp], eax ; call 0x1f46c
write: eax rdi rsp 
0002bc79: RLP; mov rdi, qword ptr [rbx + 0x10] ; lea rsi, [rip + 0x108adc] ; mov qword ptr [rbx + 0x20], rax ; call 0x11c3dc
write: rdi rsi rsp 
0002bd35: RLP; lea rdi, [rax + 0x31] ; mov r13, rax ; call 0x1f3cc
write: r13 rdi rsp 
0002bd64: RLP; lea rdx, [rip - 0x27f] ; lea rsi, [rip + 0x33ebba] ; mov rdi, rbp ; mov qword ptr [rbp], rax ; mov dword ptr [rbp + 8], 0xfffffffd ; mov qword ptr [rbp + 0x10], 0 ; call 0xe13dc
write: rdi rdx rsi rsp 
0002bf89: RLP; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x3d ; mov rsi, rbx ; call 0x898ec
write: rdi rsi rsp 
0002bf9c: RLP; cmp r12d, 0xd ; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x3b ; je 0x2bfcc
write: rdi rflags 
0002c1cc: RLP; mov r14, qword ptr [rsp + 0xb0] ; mov rdi, qword ptr [r13 + rbx*8 + 0x80] ; cmp r14, rdi ; je 0x2c1f7
read: r14 rdi rflags 
write: r14 rdi rflags 
0002c1ef: RLP; mov qword ptr [r13 + rbx*8 + 0x80], r14 ; mov rdi, qword ptr [rip + 0x33ddce] ; cmp r12, rdi ; je 0x2c218
read: r12 r14 rdi rflags 
write: rdi rflags 
0002c3b8: RLP; mov rdi, qword ptr [rsp + 0x10] ; call 0x1f46c
write: rdi rsp 
0002c59b: RLP; mov r13, qword ptr [rbx + r15*8] ; mov rdi, qword ptr [r14] ; cmp r13, rdi ; je 0x2c5bf
read: r13 rdi rflags 
write: r13 rdi rflags 
0002ca05: RLP; lea rcx, [rbp - 0x48] ; lea rdx, [rbp - 0x50] ; lea rsi, [rbp - 0x58] ; lea r9, [rbp - 0x38] ; lea r8, [rbp - 0x40] ; mov rdi, rax ; call 0x337bc
write: r8 r9 rcx rdi rdx rsi rsp 
0002cb44: RLP; mov rsi, qword ptr [rbp - 0x40] ; mov eax, r13d ; mov rcx, r12 ; mov rdi, rsi ; repne scasb al, byte ptr [rdi] ; not rcx ; add rcx, 0x20 ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea r12, [rsp + 0x37] ; and r12, 0xfffffffffffffff0 ; mov rdi, r12 ; call 0x1f521
read: al r12 r13d rcx rdi rflags rip rsi rsp 
write: eax r12 rcx rdi rflags rsi rsp 
0002cc63: RLP; cmp byte ptr [rax - 2], 0x2f ; lea rdi, [rax - 1] ; je 0x2cc77
write: rdi rflags 
0002ce64: RLP; mov rdi, rax ; xor eax, eax ; test rdi, rdi ; jne 0x2ce84
read: eax rax rdi rflags 
write: eax rdi rflags 
0002d425: RLP; mov r8, qword ptr [rbp - 0xc8] ; lea rdi, [rax + 5] ; mov rsi, r13 ; mov dword ptr [rax], 0x5359532f ; mov byte ptr [rax + 4], 0x5f ; lea rdx, [r8 + 1] ; call 0x8e3dc
write: r8 rdi rdx rsi rsp 
0002d44a: RLP; mov rdi, r12 ; xor eax, eax ; mov esi, 0x80000 ; call 0xd6819
write: eax esi rdi rflags rsp 
0002d4e0: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0002d870: RLP; movsxd rdi, r15d ; mov eax, 3 ; syscall ; nop ; lea rsp, [rbp - 0x28] ; xor eax, eax ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
write: eax r12 r13 r14 r15 rbp rbx rdi rflags rsp 
0002d8b4: RLP; mov r15, rax ; mov rdi, r14 ; mov r13, rax ; sub r15, r14 ; mov rsi, r15 ; call 0x3368c
write: r13 r15 rdi rflags rsi rsp 
0002d901: RLP; mov rdi, r13 ; mov r15, rax ; call 0x856dc
write: r15 rdi rsp 
0002d910: RLP; mov rdx, r14 ; lea r8, [rax + 1] ; mov rsi, rbx ; sub rdx, rbx ; lea rax, [r15 + rdx] ; mov qword ptr [rbp - 0x108], r8 ; lea rax, [r8 + rax + 0x1e] ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea r14, [rsp + 0xf] ; and r14, 0xfffffffffffffff0 ; mov rdi, r14 ; mov rbx, r14 ; call 0x892cc
write: r14 r8 rax rbx rdi rdx rflags rsi rsp 
0002d94c: RLP; mov rdx, r15 ; mov rsi, r12 ; mov rdi, rax ; call 0x892cc
write: rdi rdx rsi rsp 
0002d95e: RLP; mov r8, qword ptr [rbp - 0x108] ; mov rsi, r13 ; mov rdi, rax ; mov rdx, r8 ; call 0x8e3dc
write: r8 rdi rdx rsi rsp 
0002d977: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
0002df77: RLP; lea rdx, [rax + 1] ; add rax, 0x1f ; mov rsi, r12 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: r12 rax rdi rip rsp 
write: rax rdi rdx rflags rsi rsp 
0002df9b: RLP; mov dword ptr [rbp - 0x1b0], 0 ; mov qword ptr [rbp - 0x1a8], rax ; mov rbx, qword ptr [rbp - 0x1a8] ; mov esi, 0x3d ; mov rdi, rbx ; call 0x83a5c
write: esi rbx rdi rsp 
0002e3eb: RLP; lea rdi, [rax + 1] ; add r12, 1 ; cmp r12, 0xd ; jne 0x2e3c4
write: r12 rdi rflags 
0002e997: RLP; mov rax, qword ptr [rip + 0x33a3fe] ; mov rdi, qword ptr [rax] ; call 0x6c45c
write: rax rdi rsp 
0002ea05: RLP; mov rdi, rbx ; xchg qword ptr [rip + 0x33c1ed], rdi ; test rdi, rdi ; je 0x2ea1f
read: rbx rdi rflags 
write: rdi rflags 
0002ea1f: RLP; mov rdi, qword ptr [rsp + 0x48] ; call 0x1f46c
write: rdi rsp 
0002eae2: RLP; mov r8, r13 ; mov ecx, r12d ; mov rdx, rbp ; mov rsi, rbx ; mov rdi, rax ; call 0x2e8ec
write: ecx r8 rdi rdx rsi rsp 
0002eb27: RLP; lea rsi, [rip + 0x109516] ; lea rdi, [rip + 0x105e78] ; mov rbx, rax ; mov edx, 5 ; call 0x2f4bc
write: edx rbx rdi rsi rsp 
0002eb46: RLP; mov r8, r13 ; mov ecx, r12d ; mov rdx, rbp ; mov rsi, rbx ; mov rdi, rax ; call 0x2e8ec
write: ecx r8 rdi rdx rsi rsp 
0002f1fc: RLP; lea rdi, [rax + 0x19] ; lea rbx, [rax + 1] ; call 0x1f3cc
write: rbx rdi rsp 
0002f55f: RLP; cmp rax, 1 ; mov rsi, rbp ; sbb eax, eax ; not eax ; add eax, 2 ; cdqe ; mov rdi, qword ptr [rbx + rax*8 + 8] ; call 0x2f51c
write: eax rax rdi rflags rsi rsp 
0002f805: RLP; cmp rax, qword ptr [r13 + 0xc0] ; mov rdi, r12 ; cmovb rbx, rax ; add rbp, r12 ; jmp 0x2f834
write: rbp rbx rdi rflags 
0002f82b: RLP; lea rdi, [rax + 1] ; cmp rdi, rbp ; jae 0x2f84c
read: rbp rdi rflags 
write: rdi rflags 
0002f8e3: RLP; mov rdi, rbx ; mov r12, rax ; mov dword ptr [rbp - 0x68], eax ; call 0x344fc
write: r12 rdi rsp 
0003032d: RLP; lea r14, [rax + 1] ; mov rdi, r14 ; call 0x1f3cc
write: r14 rdi rsp 
00030484: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
000305ce: RLP; mov rdi, rax ; mov rbx, rax ; call 0x856dc
write: rbx rdi rsp 
000305dd: RLP; lea rcx, [rax + 0x1f] ; lea rdx, [rax + 1] ; mov rsi, rbx ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: rbx rcx rdi rip rsp 
write: rcx rdi rdx rflags rsi rsp 
0003076d: RLP; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x2f ; mov rsi, r12 ; call 0x8510c
write: rdi rsi rsp 
00030780: RLP; movsxd rax, dword ptr [rbp - 0xac] ; lea rdx, [rip + 0xee3bb] ; lea rdi, [rip + 0x10424a] ; movzx r12d, byte ptr [rdx + rax] ; lea rax, [rip + 0xee3bb] ; add r12, rax ; call 0x3819c
write: r12 r12d rax rdi rdx rflags rsp 
000307f7: RLP; mov rdi, r12 ; mov r14, rax ; mov qword ptr [rbp - 0xf0], rax ; call 0x856dc
write: r14 rdi rsp 
0003080d: RLP; lea rax, [r14 + rax + 0x23] ; mov rsi, r12 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rax, [rsp + 0xf] ; mov qword ptr [rbp - 0x90], rax ; and qword ptr [rbp - 0x90], 0xfffffffffffffff0 ; mov rdi, qword ptr [rbp - 0x90] ; call 0x898ec
write: rax rdi rflags rsi rsp 
00030840: RLP; mov edx, 0x2f ; lea rdi, [rax + 1] ; mov rsi, r13 ; mov word ptr [rax], dx ; mov rdx, r14 ; call 0x892cc
write: edx rdi rdx rsi rsp 
0003085b: RLP; mov rdi, r15 ; mov dword ptr [rax], 0x6f6d2e ; call 0x856dc
write: rdi rsp 
00030db1: RLP; mov rsi, qword ptr [rbp - 0xa8] ; mov rbx, rax ; mov rax, r14 ; add rax, 1 ; mov rdi, rbx ; mov r14, rax ; mov rdx, rax ; call 0x8e3dc
write: r14 rax rbx rdi rdx rflags rsi rsp 
00030dd4: RLP; lea rcx, [rbx + r14] ; mov rsi, qword ptr [rbp - 0xe8] ; lea rdx, [r15 + 1] ; mov rdi, rcx ; call 0x8e3dc
write: rcx rdi rdx rsi rsp 
00030fc9: RLP; lea rdi, [rip + 0x339be4] ; lea rdx, [rax + 1] ; xor r9d, r9d ; xor ecx, ecx ; mov dword ptr [rsp + 0x20], 0 ; mov qword ptr [rsp + 0x18], r15 ; mov qword ptr [rsp + 0x10], 0 ; mov qword ptr [rsp + 8], 0 ; mov r8, r13 ; mov qword ptr [rsp], 0 ; mov rsi, r12 ; call 0x331cc
write: ecx r8 r9d rdi rdx rflags rsi rsp 
00031124: RLP; lea rdx, [rax + 1] ; add rax, 0x1f ; mov rsi, rbx ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0x37] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: rax rbx rdi rip rsp 
write: rax rdi rdx rflags rsi rsp 
00031148: RLP; mov r13, rax ; lea rcx, [rbp - 0x48] ; lea rdx, [rbp - 0x50] ; lea rsi, [rbp - 0x58] ; lea r9, [rbp - 0x38] ; lea r8, [rbp - 0x40] ; mov rdi, r13 ; call 0x337bc
write: r13 r8 r9 rcx rdi rdx rsi rsp 
000311a2: RLP; mov rdi, r12 ; call 0x856dc
write: rdi rsp 
000311ae: RLP; lea rdx, [rax + 1] ; mov rax, qword ptr [rbp - 0x50] ; mov r9, qword ptr [rbp - 0x48] ; mov r8, qword ptr [rbp - 0x58] ; lea rdi, [rip + 0x3399ef] ; mov ecx, r13d ; mov dword ptr [rsp + 0x20], 1 ; mov qword ptr [rsp + 0x18], r15 ; mov rsi, r12 ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rbp - 0x38] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rbp - 0x40] ; mov qword ptr [rsp], rax ; call 0x331cc
write: ecx r8 r9 rax rdi rdx rsi rsp 
0003160a: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
00031e8f: RLP; mov rbx, rax ; mov rdi, r12 ; mov rdx, rax ; mov rsi, r15 ; add r12, rbx ; call 0x8e3dc
write: r12 rbx rdi rdx rflags rsi rsp 
00032a0a: RLP; movabs rdi, 0x2e656c61636f6c2f ; mov edx, 0x73 ; lea rsi, [rip + 0x101ad4] ; mov qword ptr [rax], rdi ; mov dword ptr [rax + 8], 0x61696c61 ; mov rdi, rbx ; mov word ptr [rax + 0xc], dx ; call 0x6ca9c
read: dx rbx rdi rip rsp 
write: edx rdi rsi rsp 
00032ba1: RLP; lea rdx, [rax + 1] ; mov rdi, rbx ; mov qword ptr [rbp - 0x1d0], rdx ; call 0x856dc
write: rdi rdx rsp 
00032bb8: RLP; mov rdx, qword ptr [rbp - 0x1d0] ; mov r11, qword ptr [rip + 0x33801e] ; lea r9, [rax + 1] ; mov rcx, qword ptr [rbp - 0x1e0] ; lea rax, [rdx + r11] ; mov qword ptr [rbp - 0x1d0], rax ; add rax, r9 ; mov rdi, rax ; mov qword ptr [rbp - 0x1d8], rax ; mov rax, qword ptr [rip + 0x337fec] ; cmp rdi, rax ; ja 0x32d0c
read: r9 rax rdi rflags 
write: r11 r9 rax rcx rdi rdx rflags 
00032c33: RLP; mov rdi, qword ptr [rbp - 0x1d0] ; mov r10, qword ptr [rbp - 0x1e0] ; mov rsi, rbx ; mov r9, qword ptr [rbp - 0x1e8] ; mov qword ptr [r14], rax ; add rdi, r10 ; mov rdx, r9 ; call 0x8e3dc
read: r10 r9 rax rbx rdi rip rsp 
write: r10 r9 rdi rdx rflags rsi rsp 
00032c5d: RLP; mov qword ptr [r14 + 8], rax ; mov rax, qword ptr [rbp - 0x1c8] ; mov rdi, qword ptr [rbp - 0x1d8] ; add qword ptr [rbp - 0x1f0], 1 ; add rax, 1 ; mov qword ptr [rip + 0x337f62], rdi ; mov qword ptr [rip + 0x337f4b], rax ; nop dword ptr [rax] ; test r12, r12 ; je 0x32ce2
read: r12 rax rdi rflags 
write: rax rdi rflags 
00033297: RLP; lea rdx, [rax + 1] ; mov rdi, r14 ; mov qword ptr [rsp + 0x58], rdx ; call 0x856dc
write: rdi rdx rsp 
000332ac: RLP; mov rcx, qword ptr [rsp + 0x48] ; mov rdx, qword ptr [rsp + 0x58] ; lea rcx, [rcx + r15 + 2] ; add rbx, rcx ; add rbx, r13 ; add rbp, rbx ; add rdx, rbp ; lea rdi, [rdx + rax] ; call 0x1f3cc
write: rbp rbx rcx rdi rdx rflags rsp 
000332f9: RLP; mov edx, 0x3a ; mov rsi, r15 ; mov rdi, rbx ; call 0x90b9c
write: edx rdi rsi rsp 
0003330d: RLP; lea rax, [rbx + r15 - 1] ; mov rsi, qword ptr [rsp + 0x38] ; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x2f ; call 0x898ec
write: rax rdi rsi rsp 
0003352d: RLP; lea rdx, [rax + 1] ; mov rax, qword ptr [rsp + 0xc0] ; mov r9, qword ptr [rsp + 0x40] ; mov r8, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x30] ; mov ecx, ebp ; mov dword ptr [rsp + 0x20], 1 ; mov qword ptr [rsp + 0x18], r14 ; mov rsi, r15 ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rsp + 0xb8] ; mov qword ptr [rsp + 8], rax ; mov rax, qword ptr [rsp + 0xb0] ; mov qword ptr [rsp], rax ; call 0x331cc
write: ecx r8 r9 rax rdi rdx rsi rsp 
00033ab9: RLP; mov rdi, qword ptr [rbx + 0x10] ; call 0x33a7c
write: rdi rsp 
00033ac6: RLP; mov rdi, qword ptr [rbx + 8] ; call 0x33a7c
write: rdi rsp 
00033cdd: RLP; lea r10, [rbx + r15*2] ; mov rsi, qword ptr [rsp + 8] ; lea rax, [r15 + r15] ; mov rdx, r12 ; mov rdi, r10 ; mov qword ptr [rsp + 0x20], rax ; call 0x8e3dc
write: r10 rax rdi rdx rsi rsp 
00034428: RLP; lea rsi, [rip + 0x1005e8] ; mov rdi, rbx ; mov r13, rax ; call 0x8817c
write: r13 rdi rsi rsp 
00034577: RLP; test rax, rax ; mov rbx, rax ; mov rdi, -1 ; je 0x345a2
write: rbx rdi rflags 
0003459b: RLP; test eax, eax ; mov rdi, rbx ; jne 0x345bc
write: rdi rflags 
000345c5: RLP; lea rsp, [rbp - 0x20] ; mov rdi, -1 ; mov rax, rdi ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop rbp ; ret
read: rdi rsp 
write: r12 r13 r14 rax rbp rbx rdi rsp 
00034655: RLP; add rax, 0x98 ; mov rsi, rbx ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea r14, [rsp + 0xf] ; and r14, 0xfffffffffffffff0 ; mov rdi, r14 ; call 0x898ec
write: r14 rax rdi rflags rsi rsp 
00034862: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
00036282: RLP; mov esi, 8 ; mov r8d, eax ; mov rdi, qword ptr [rsp + 8] ; mov eax, 0x82 ; syscall ; cmp rax, -0x1000 ; ja 0x362b7
write: eax esi r8d rdi rflags 
000363d2: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rsp] ; mov ebx, eax ; call 0x362fc
write: ebx rdi rsi rsp 
00036e38: RLP; mov rdx, qword ptr [rsp + 0x18] ; mov rsi, qword ptr [rsp + 0x10] ; mov ebx, eax ; mov rdi, qword ptr [rsp + 8] ; call 0x36d5c
write: ebx rdi rdx rsi rsp 
00036f42: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rsp] ; mov ebx, eax ; call 0x36e6c
write: ebx rdi rsi rsp 
00036fb3: RLP; mov qword ptr [rsp + 0x18], r13 ; mov dword ptr [rsp + 0x14], eax ; mov rdx, rsp ; movsxd rsi, ebp ; movsxd rdi, r12d ; mov eax, 0x81 ; syscall ; cmp rax, -0x1000 ; ja 0x36fe2
write: eax rdi rdx rflags rsi 
000374cc: RLP; add rsp, 0x80 ; mov qword ptr [rip + 0x33373a], rdx ; add dword ptr [rip + 0x33372f], 1 ; lea rdx, [rsp + 0x80] ; mov ecx, 0x13 ; xor eax, eax ; mov dword ptr [rip + 0x333722], 4 ; mov rdi, rdx ; lea rsi, [rdx + 0x80] ; rep stosq qword ptr [rdi], rax ; mov qword ptr [rsi], -1 ; sub rsi, 8 ; cmp rsi, rdx ; jne 0x37507
read: eax rax rcx rdi rdx rflags rsi rsp 
write: eax ecx rcx rdi rdx rflags rsi rsp 
00037f80: RLP; mov rdi, r13 ; mov rsi, qword ptr [rbp - 0x70] ; jmp 0x37f95
write: rdi rsi 
000380cc: RLP; mov rdi, qword ptr [rbp - 0x88] ; call 0x1f46c
write: rdi rsp 
000382d0: RLP; lea rdx, [rax + 0x1f] ; mov rsi, rbx ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; mov rdx, rax ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; mov byte ptr [rdi + rax], 0 ; call 0x8e3dc
read: rax rbx rdi rdx rip rsp 
write: rdi rdx rflags rsi rsp 
000382f7: RLP; mov ecx, 1 ; mov rdx, rbx ; xor esi, esi ; mov rdi, rax ; call 0x3838c
write: ecx esi rdi rdx rflags rsp 
0003836b: RLP; mov rdi, r12 ; mov ebx, eax ; call 0x1f46c
write: ebx rdi rsp 
000385b5: RLP; mov rdx, qword ptr [rbp - 0x48] ; mov rsi, qword ptr [rbp - 0x50] ; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x3d ; call 0x8e3dc
write: rdi rdx rsi rsp 
000385cd: RLP; lea rdx, [rip + 0x4b6b8] ; lea rsi, [rip + 0x332661] ; mov rdi, rbx ; call 0xe152c
write: rdi rdx rsi rsp 
0003862f: RLP; mov rdi, qword ptr [rbp - 0x38] ; lea rdx, [rip + 0x4b652] ; lea rsi, [rip + 0x3325fb] ; call 0xe13dc
write: rdi rdx rsi rsp 
0003890d: RLP; add rsp, 0x80 ; mov rbx, qword ptr [rip + 0x330589] ; mov rdi, qword ptr [rbx] ; cmp rdi, qword ptr [rip + 0x33230f] ; je 0x3896c
read: rdi rflags rsp 
write: rbx rdi rflags rsp 
00038f96: RLP; mov qword ptr [rax], r12 ; mov qword ptr [rax + 8], rbp ; mov rbx, rax ; lea rdi, [rip + 0x32fde5] ; call 0x1f3ec
write: rbx rdi rsp 
00038fb0: RLP; mov rbp, qword ptr [rip + 0x32fe2d] ; mov r12, rax ; mov rax, qword ptr [rax + 0x40] ; mov qword ptr [r12 + 0x40], rbx ; lea rdi, [rbp + 0x908] ; mov qword ptr [rbx + 0x18], rax ; call qword ptr [rbp + 0xf08]
write: r12 rax rbp rdi rsp 
000390e9: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000390f5: RLP; lea rdi, [rip + 0x32fc90] ; call 0x1f3ec
write: rdi rsp 
00039121: RLP; mov rdx, qword ptr [rbx + 0x18] ; mov rdi, qword ptr [rbx + 8] ; mov qword ptr [rax + 0x40], rdx ; call qword ptr [rbx]
write: rdi rdx rsp 
00039136: RLP; mov rdi, r12 ; call qword ptr [rbp + 0xf08]
write: rdi rsp 
000395f0: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x32ffce] ; lea rsi, [rip + 0x32ffb7] ; mov rdi, rdx ; lea rbx, [rax - 4] ; call 0x3971c
write: rax rbx rdi rflags rsi rsp 
000396b0: RLP; add rsp, 0x80 ; lea rdi, [rip + 0x32fefe] ; lea rsi, [rsp + 0xc] ; call 0x3980c
write: rdi rflags rsi rsp 
0003a9c5: RLP; movzx r10d, byte ptr [r12] ; mov rdi, rax ; mov edx, 0xa ; mov eax, 8 ; mov r8, qword ptr [rsp + 8] ; jmp 0x3a663
write: eax edx r10d r8 rdi 
0003ad2c: RLP; mov r14, qword ptr [r12] ; mov r9d, dword ptr [rsp + 8] ; mov rdi, -0x7f ; sub edi, ebx ; mov esi, r14d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x3ad6c
write: ecx edi edx esi r14 r9d rdi rdx rflags 
0003b995: RLP; mov rdi, qword ptr [rsp + 0x10] ; mov rdx, qword ptr [rsp + 0x60] ; mov ecx, ebx ; mov rsi, rdi ; call 0x45cac
read: ebx rdi rip rsp 
write: ecx rdi rdx rsi rsp 
0003d5cc: RLP; mov r14, qword ptr [r12] ; mov r9d, dword ptr [rsp + 8] ; mov rdi, -0x3ff ; sub edi, ebx ; mov esi, r14d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x3d60c
write: ecx edi edx esi r14 r9d rdi rdx rflags 
0003e25f: RLP; mov rdi, qword ptr [rsp + 8] ; mov rdx, qword ptr [rsp + 0x60] ; mov ecx, ebx ; mov rsi, rdi ; call 0x45cac
read: ebx rdi rip rsp 
write: ecx rdi rdx rsi rsp 
0003f9df: RLP; cmp r12, rax ; mov rdi, rax ; mov r11, qword ptr [rsp + 0x28] ; mov r10, qword ptr [rsp + 0x30] ; mov r8d, dword ptr [rsp + 0x38] ; je 0x3fa81
write: r10 r11 r8d rdi rflags 
0003fe23: RLP; mov r15, qword ptr [rbp] ; mov r9d, dword ptr [rsp] ; mov rdi, -0x3fff ; sub edi, ebx ; mov esi, r15d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x3fe64
write: ecx edi edx esi r15 r9d rdi rdx rflags 
00040ad0: RLP; mov rdi, qword ptr [rsp + 8] ; mov rdx, qword ptr [rsp + 0x60] ; mov ecx, r14d ; mov rsi, rdi ; call 0x45cac
read: r14d rdi rip rsp 
write: ecx rdi rdx rsi rsp 
00041573: RLP; mov ecx, r13d ; mov rax, rbx ; sub ecx, ebp ; shr rax, cl ; or qword ptr [rsp + 0x50], rax ; mov rdi, qword ptr [rsp + 0x68] ; jmp 0x41508
write: ecx rax rdi rflags 
00042104: RLP; cmp r12, rax ; mov rdi, rax ; mov r11, qword ptr [rsp + 0x20] ; mov r10, qword ptr [rsp + 0x30] ; mov r8d, dword ptr [rsp + 0x38] ; je 0x421a6
write: r10 r11 r8d rdi rflags 
000428b7: RLP; mov rax, qword ptr [rip + 0x3265e6] ; lea rdi, [rip + 0xf2281] ; lea rsi, [rsp + 0x30] ; mov dword ptr [rip + 0x328be8], 0 ; mov dword ptr [rip + 0x328be2], 0 ; mov rdx, qword ptr [rax] ; call 0xb31fc
write: rax rdi rdx rsi rsp 
00042def: RLP; mov r14, qword ptr [rbp - 0xd0] ; mov rdi, qword ptr [rbp - 0xe8] ; mov rdx, r13 ; mov rsi, r14 ; call 0x8e3dc
write: r14 rdi rdx rsi rsp 
00043123: RLP; mov qword ptr [rbp], 0 ; mov edx, 1 ; mov rsi, rbx ; mov rdi, r12 ; call 0xc9e5c
write: edx rdi rsi rsp 
00043747: RLP; mov rdx, qword ptr [rsp + 0x18] ; add rdx, qword ptr [rsp + 0x20] ; lea rsi, [rip + 0x325004] ; mov rdi, qword ptr [rsp + 0x38] ; mov rcx, r15 ; mov qword ptr [rsp + 0x1b8], rsi ; mov rsi, r15 ; sub rdx, r15 ; call 0x7aedc
write: rcx rdi rdx rflags rsi rsp 
00043777: RLP; lea edx, [r14 + 1] ; mov r8, qword ptr [rsp + 0x40] ; xor eax, eax ; test r14d, r14d ; mov rdi, qword ptr [rsp + 0x38] ; lea rsi, [rsp + 0xc0] ; cmovne eax, edx ; lea rdx, [rsp + 0xa8] ; add eax, r13d ; mov byte ptr [r8], 0 ; mov qword ptr [rsp + 0xc8], 0 ; mov dword ptr [rsp + 0xc4], eax ; movzx eax, byte ptr [rsp + 0x48] ; mov dword ptr [rsp + 0xc0], r14d ; mov dword ptr [rsp + 0xc8], 0x66
write: eax edx r8 rdi rdx rflags rsi 
00044429: RLP; mov rdx, rax ; mov esi, 0x3d ; mov rdi, rbp ; sub rdx, rbp ; mov rbx, rax ; mov qword ptr [rsp], rax ; call 0x8886c
write: esi rbx rdi rdx rflags rsp 
000446fe: RLP; lea rdi, [rip + 0xf0472] ; mov r14, rax ; call 0x3819c
write: r14 rdi rsp 
00045f85: RLP; mov rdi, qword ptr [rbp - 0x40] ; cmp rbx, 1 ; lea r15, [r12*8] ; mov qword ptr [rdi + r12*8], rax ; lea r13, [rdi + 8] ; jle 0x4608b
write: r13 r15 rdi rflags 
0004604e: RLP; mov rax, qword ptr [rbp - 0x40] ; lea r10, [rbx*8] ; mov r11, r12 ; sub r11, rbx ; lea r9, [rax + r10] ; mov rax, r13 ; add rax, r10 ; cmp rbx, r11 ; mov rdi, rax ; jle 0x461cc
write: r10 r11 r9 rax rdi rflags 
00046124: RLP; mov r9, qword ptr [rbp - 0x38] ; mov rcx, rbx ; mov rdx, r14 ; mov rsi, r9 ; mov rdi, r9 ; call 0x4561c
write: r9 rcx rdi rdx rsi rsp 
00046241: RLP; mov rax, qword ptr [rbp - 0x50] ; mov rdx, qword ptr [rbp - 0x38] ; mov rcx, rbx ; mov rdi, rax ; mov rsi, rax ; call 0x4561c
write: rax rcx rdi rdx rsi rsp 
0004625b: RLP; mov rdx, qword ptr [rbp - 0x68] ; mov rdi, r13 ; mov rcx, qword ptr [rdx] ; lea rdx, [r13 + 8] ; add rax, rcx ; cmp rcx, rax ; mov qword ptr [r13], rax ; mov rcx, qword ptr [rbp - 0x60] ; mov rax, rbx ; ja 0x462ed
write: rax rcx rdi rdx rflags 
0004658e: RLP; mov r13, qword ptr [rsp + 0x10] ; mov r12, qword ptr [rsp + 8] ; lea r15, [rbp + r14*8] ; mov rdx, r14 ; mov rdi, r15 ; mov rcx, qword ptr [r13 + r14*8] ; mov rsi, r12 ; call 0x456cc
write: r12 r13 r15 rcx rdi rdx rsi rsp 
000465b4: RLP; mov rdx, r14 ; mov rsi, r13 ; mov rdi, r15 ; shl rdx, 4 ; mov qword ptr [rbp + rdx], rax ; mov rcx, qword ptr [r12 + r14*8] ; mov rdx, rbx ; add rbx, r14 ; call 0x456cc
write: rbx rcx rdi rdx rflags rsi rsp 
0004664b: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdx, r12 ; mov rdi, r15 ; call 0x457bc
write: rdi rdx rsi rsp 
00046681: RLP; mov rsi, qword ptr [rsp + 0x10] ; mov rdx, r12 ; mov rdi, r14 ; call 0x457bc
write: rdi rdx rsi rsp 
000466ee: RLP; test r12, r12 ; lea rdi, [r12 + rbx] ; jle 0x4671c
write: rdi rflags 
0004678b: RLP; mov rcx, rbx ; mov rdx, r13 ; mov rsi, r14 ; mov rdi, r14 ; call 0x4561c
write: rcx rdi rdx rsi rsp 
00046ad9: RLP; lea r14, [r13*8] ; mov rdx, r13 ; mov rsi, r12 ; lea r15, [r12 + r14] ; add r14, rbp ; mov rdi, r14 ; mov rcx, qword ptr [r15] ; call 0x456cc
write: r14 r15 rcx rdi rdx rflags rsi rsp 
00046afd: RLP; mov rdx, r13 ; mov rsi, r12 ; mov rdi, r14 ; shl rdx, 4 ; mov qword ptr [rbp + rdx], rax ; mov rcx, qword ptr [r15] ; mov rdx, rbx ; add rbx, r13 ; call 0x456cc
write: rbx rcx rdi rdx rflags rsi rsp 
00046b84: RLP; mov rax, qword ptr [rsp + 0x10] ; mov qword ptr [rsp + 0x18], rax ; mov rdx, r14 ; mov rsi, r12 ; mov rdi, r13 ; call 0x457bc
write: rax rdi rdx rsi rsp 
00046c2d: RLP; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rsp + 8] ; mov rcx, rbx ; mov rdx, r15 ; lea r13, [rbp + rax] ; mov rsi, r13 ; mov rdi, r13 ; call 0x46f0c
write: r13 rax rcx rdi rdx rsi rsp 
00046c7a: RLP; mov rcx, rbx ; mov rdx, r15 ; mov rsi, r13 ; mov rdi, r13 ; call 0x4561c
write: rcx rdi rdx rsi rsp 
00046df9: RLP; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rsp + 8] ; mov rcx, rbx ; mov rdx, r15 ; lea r13, [rbp + rax] ; mov rsi, r13 ; mov rdi, r13 ; call 0x46f0c
write: r13 rax rcx rdi rdx rsi rsp 
00046e1d: RLP; sub qword ptr [rsp + 0x10], rax ; nop word ptr cs:[rax + rax] ; mov rdx, r14 ; mov rsi, r12 ; mov rdi, r15 ; call 0x4698c
write: rdi rdx rflags rsi rsp 
000476a2: RLP; mov rdi, rax ; call 0x38aec
write: rdi rsp 
000476ae: RLP; hlt ; nop word ptr cs:[rax + rax] ; nop dword ptr [rax] ; nop dword ptr [rax - 0x56] ; lea rdx, [rip + 0x324029] ; mov rax, rdi ; test rdi, rdi ; movabs rcx, 0x7974742f7665642f ; cmove rax, rdx ; mov qword ptr [rax], rcx ; mov byte ptr [rax + 8], 0 ; ret
read: rax rcx rdi rdx rflags 
0004dc5c: RLP; mov rdi, qword ptr [rbp - 0x60] ; mov r10, qword ptr [rbp - 0xc0] ; movsxd r13, r13d ; mov rdx, qword ptr [rbp - 0x58] ; sub qword ptr [rbp - 0x50], r13 ; lea rsi, [rdi + r10] ; sub rdx, r12 ; mov ecx, r15d ; call 0x45dcc
write: ecx r10 r13 rdi rdx rflags rsi rsp 
0004dd9b: RLP; mov dword ptr [rbp - 0x110], eax ; add eax, 1 ; cdqe ; add qword ptr [rbp - 0x120], rax ; mov rdi, qword ptr [rbp - 0x120] ; movabs rax, 0x3ffffffffffffffc ; cmp rdi, rax ; ja 0x4f449
read: eax rax rdi rflags 
write: eax rax rdi rflags 
0004e325: RLP; mov rdi, qword ptr [rbp - 0xf8] ; mov qword ptr [rbp - 0xd0], rax ; mov r9d, dword ptr [rbp - 0xd8] ; test rdi, rdi ; je 0x4f292
read: rax rdi rflags 
write: r9d rdi rflags 
0004e426: RLP; mov rdi, rax ; jmp 0x4e3fa
write: rdi 
0004e702: RLP; mov rax, qword ptr [rbp - 0xd8] ; mov r8, qword ptr [rbp - 0xc0] ; mov r11, -4 ; mov qword ptr [rbp - 0xc0], r15 ; mov r15d, dword ptr [rbp - 0xb0] ; movsx r9d, byte ptr [rax] ; lea r8, [r12 + r8 - 4] ; mov r10, rax ; nop dword ptr [rax] ; lea edi, [r9 - 1] ; mov rsi, r11 ; mov edx, r13d ; lea rax, [rdi*4] ; sub rsi, rax ; mov rax, r8
0004e90d: RLP; mov rdi, rax ; jmp 0x4e3fa
write: rdi 
0004ee4c: RLP; mov rdi, qword ptr [rbp - 0x60] ; mov rdx, qword ptr [rbp - 0x58] ; mov r8, qword ptr [rbp - 0xc0] ; sub qword ptr [rbp - 0x50], r13 ; sub rdx, r12 ; lea rsi, [rdi + r8] ; jmp 0x4dc79
write: r8 rdi rdx rflags rsi 
0004f259: RLP; mov rdi, qword ptr [rbp - 0x60] ; mov rdx, qword ptr [rbp - 0x58] ; mov ecx, r12d ; mov rsi, rdi ; call 0x45cac
read: r12d rdi rip rsp 
write: ecx rdi rdx rsi rsp 
0004f4dc: RLP; mov rdi, qword ptr [rbp - 0x118] ; call 0x1f46c
write: rdi rsp 
0004f65e: RLP; mov rdi, r14 ; mov rcx, rax ; mov r9d, dword ptr [rbp - 0xd0] ; jmp 0x4e98c
write: r9d rcx rdi 
0004f81b: RLP; cmp byte ptr [rax], 0 ; mov rdi, rax ; je 0x4f907
write: rdi rflags 
0004f8d7: RLP; mov rdi, qword ptr [rsp + 0x30] ; cmp byte ptr [rdi], 0 ; jne 0x4f853
write: rdi rflags 
000500c8: RLP; mov r10, qword ptr [rsp + 0x40] ; mov r9, qword ptr [rsp + 0x48] ; lea rcx, [rsp + 0xb4] ; mov r8, qword ptr [rsp + 0x50] ; lea rdi, [rip + 0xdf296] ; mov r11, rax ; movabs rsi, 0xcccccccccccccccd ; nop word ptr [rax + rax] ; mov rax, r13 ; sub rcx, 4 ; mul rsi ; shr rdx, 3 ; lea rax, [rdx + rdx*4] ; add rax, rax ; sub r13, rax
write: r10 r11 r13 r8 r9 rax rcx rdi rdx rflags rsi 
00052724: RLP; add rsp, 0x80 ; mov rdx, qword ptr [r14 + 0x88] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; mov r12, qword ptr [rbp - 0x1088] ; mov rax, qword ptr [r14 + 0xd8] ; mov rsi, r15 ; mov rdi, r14 ; sub r12, r15 ; mov r13, r12 ; sar r13, 2 ; mov rdx, r13 ; call qword ptr [rax + 0x38]
write: r12 r13 rax rdi rdx rflags rsi rsp 
00056cb1: RLP; lea rsi, [rax*4 + 4] ; mov rdi, r15 ; call 0xf293c
write: rdi rsi rsp 
00057b19: RLP; lea rsi, [rax*4 + 4] ; mov rdi, r15 ; call 0xf293c
write: rdi rsi rsp 
000581df: RLP; lea rdx, [rbp - 0x1c0] ; mov rsi, rax ; mov rdi, r13 ; call 0x9691c
write: rdi rdx rsi rsp 
0005e014: RLP; cmp ebx, dword ptr [rbp - 0x268] ; lea rdi, [rax + 1] ; mov rax, qword ptr [rbp - 0x260] ; mov qword ptr [rax + r12*8], rdi ; jne 0x5e006
read: ebx rdi rflags 
write: rax rdi rflags 
0005ea16: RLP; mov rsi, qword ptr [rbp - 0x2b0] ; mov rdi, qword ptr [rbp - 0x270] ; mov qword ptr [rsi], 0 ; mov rdx, rsi ; mov esi, eax ; call 0x96b8c
write: esi rdi rdx rsi rsp 
0005ea6a: RLP; mov edx, dword ptr [rbp - 0x2b8] ; lea rdi, [rax + 1] ; add edx, 1 ; cmp edx, dword ptr [rbp - 0x260] ; jne 0x5ea59
write: edx rdi rflags 
0005eabd: RLP; mov rsi, qword ptr [rbp - 0x270] ; mov rdx, rbx ; mov rdi, rax ; call 0x892cc
write: rdi rdx rsi rsp 
0005f82c: RLP; lea rsi, [rbp - 0x1a0] ; mov rdi, qword ptr [rbp - 0x298] ; mov dword ptr [rbp - 0x124], eax ; mov qword ptr [rbp - 0x1a0], 0 ; mov qword ptr [rbp - 0x270], rsi ; mov rdx, rsi ; mov esi, eax ; call 0x96b8c
write: esi rdi rdx rsi rsp 
0005f915: RLP; mov rsi, qword ptr [rbp - 0x1d0] ; mov dword ptr [rsi + r12*4], eax ; mov esi, eax ; mov rax, qword ptr [rbp - 0x270] ; mov rdi, qword ptr [rbp - 0x2b8] ; mov qword ptr [rax], 0 ; mov rdx, rax ; call 0x96b8c
write: esi rax rdi rdx rsi rsp 
00063827: RLP; lea rsi, [rax + 1] ; mov byte ptr [rax], 0 ; mov qword ptr [rbp - 0x198], rsi ; mov rbx, qword ptr [rbp - 0x178] ; mov rsi, qword ptr [rbp - 0x198] ; mov rdi, qword ptr [rbx] ; sub rsi, rdi ; cmp rsi, qword ptr [rbp - 0x188] ; jne 0x63900
read: rdi rflags rsi 
write: rbx rdi rflags rsi 
0006527c: RLP; lea rbx, [rax + 1] ; mov byte ptr [rax], 0 ; mov r14, qword ptr [rbp - 0x178] ; mov rsi, rbx ; mov rdi, qword ptr [r14] ; sub rsi, rdi ; cmp rsi, qword ptr [rbp - 0x188] ; je 0x652ad
read: rbx rdi rflags rsi 
write: r14 rbx rdi rflags rsi 
000694b5: RLP; lea rsi, [rip + 0xce1ce] ; mov r8, rax ; mov rcx, rbp ; mov rdx, rbx ; mov rdi, r12 ; xor eax, eax ; call 0x6bcbc
write: eax r8 rcx rdi rdx rflags rsi rsp 
000695da: RLP; mov rdi, qword ptr [rbx] ; mov edx, dword ptr [rsp + 0xc] ; jmp 0x6952b
write: edx rdi 
00069688: RLP; lea rdi, [rsp + 8] ; mov rsi, rax ; mov r8d, ebp ; xor eax, eax ; mov rcx, r12 ; mov rdx, rbx ; call 0x523bc
write: eax r8d rcx rdi rdx rflags rsi rsp 
000696c1: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
00069bb0: RLP; movsxd rdi, eax ; lea rax, [rsp + 0x20] ; xor rdi, rbp ; add rdi, qword ptr [rip + 0x301b72] ; mov ebp, 0x3a2f8 ; mov qword ptr [rsp + 0x10], rax ; mov qword ptr [rip + 0x301b61], rdi ; mov rdx, rdi ; shr rdx, 1 ; mov rax, rdx ; mul r13 ; mov rsi, rdx ; shr rdx, 5 ; shr rsi, 4 ; mov rax, rsi
read: eax r13 rax rbp rdi rdx rsi 
write: ebp rax rdi rdx rflags rsi 
0006a15e: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rcx, qword ptr [r8] ; mov qword ptr [rdx + 8], rbp ; add dword ptr [rdx + 4], 1 ; lea rax, [rsp + 0xf0] ; or dword ptr [rcx + 0x74], 0x10 ; mov rdi, qword ptr [r8] ; lea rdx, [rsp + 8] ; xor ecx, ecx ; mov rsi, r10 ; mov qword ptr [rsp + 0x10], rax ; lea rax, [rsp + 0x20] ; mov dword ptr [rsp + 8], 8 ; mov dword ptr [rsp + 0xc], 0x30
write: ecx rax rcx rdi rdx rflags rsi rsp 
0006a27a: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006a2fa: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [r10] ; mov qword ptr [r8 + 8], r12 ; add dword ptr [r8 + 4], 1 ; or dword ptr [rdi + 0x74], 0x10 ; xor ecx, ecx ; mov rsi, rbp ; call 0x57ecc
write: ecx r8 rdi rflags rsi rsp 
0006a3df: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006a4aa: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r10 ; add dword ptr [rdx + 4], 1 ; lea rax, [rsp + 0xe0] ; or dword ptr [rbx + 0x74], 0x10 ; lea rdx, [rsp + 8] ; xor ecx, ecx ; mov rsi, r9 ; mov rdi, rbx ; mov qword ptr [rsp + 0x10], rax ; lea rax, [rsp + 0x20] ; mov dword ptr [rsp + 8], 0x10 ; mov dword ptr [rsp + 0xc], 0x30 ; mov qword ptr [rsp + 0x18], rax
write: ecx rax rdi rdx rflags rsi rsp 
0006a5b3: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006a62b: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rbp ; add dword ptr [r8 + 4], 1 ; or dword ptr [rbx + 0x74], 0x10 ; xor ecx, ecx ; mov rsi, r10 ; mov rdi, rbx ; call 0x57ecc
write: ecx r8 rdi rflags rsi rsp 
0006a707: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006a7fd: RLP; lea rax, [rip + 0x2fdf58] ; mov rsi, r13 ; mov rdi, rsp ; xor ecx, ecx ; xor edx, edx ; mov qword ptr [rsp + 0xd8], rax ; call 0x7aedc
write: ecx edx rax rdi rflags rsi rsp 
0006a81f: RLP; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rsp ; xor ecx, ecx ; or dword ptr [rsp + 0x74], 0x10 ; call 0x57ecc
write: ecx rdi rdx rflags rsi rsp 
0006a8d2: RLP; lea rsi, [rip + 0xca4b4] ; mov rdx, rax ; mov rdi, rbx ; xor eax, eax ; call 0x5212c
write: eax rdi rdx rflags rsi rsp 
0006a958: RLP; mov edx, r13d ; mov rsi, rax ; mov rdi, rbx ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
0006a96c: RLP; mov rdi, rbx ; call 0x6bf5c
write: rdi rsp 
0006aa46: RLP; lea rsi, [rip + 0xca31e] ; mov rdx, rax ; mov rdi, rbx ; xor eax, eax ; call 0x5212c
write: eax rdi rdx rflags rsi rsp 
0006ad99: RLP; lea rsi, [rip + 0xc9fa4] ; mov rdi, rbx ; mov edx, r13d ; sub edx, eax ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
0006adcf: RLP; sub eax, dword ptr [rbp] ; lea rsi, [rip + 0xc9f84] ; mov rdi, rbx ; mov edx, eax ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
0006c070: RLP; add rsp, 0x80 ; mov rdi, qword ptr [r12 + 0x48] ; call 0x2323c
write: rdi rflags rsp 
0006c085: RLP; mov rdi, qword ptr [r12 + 0x90] ; call 0x2323c
write: rdi rsp 
0006c1e1: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006c319: RLP; lea rax, [rip + 0x2fc37c] ; mov qword ptr [rbx + 0xd8], rax ; mov rdi, rbx ; call 0x77edc
write: rax rdi rsp 
0006c4ba: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rbx + 0xd8] ; mov rdi, rbx ; call qword ptr [rax + 0x60]
write: rax rdi rdx rflags rsp 
0006c5a3: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006c619: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; xor ecx, ecx ; mov edx, 1 ; xor esi, esi ; mov rdi, rbx ; call 0x6e6ac
write: ecx edx esi rdi rdx rflags rsp 
0006c79c: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006c81f: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov ecx, dword ptr [rbx] ; mov qword ptr [r8 + 8], rdx ; add dword ptr [r8 + 4], 1 ; mov r12d, ecx ; sub r9d, 1 ; and ecx, 0xffffffdf ; mov dword ptr [rbx], ecx ; movsxd rdx, r9d ; mov r8d, 1 ; mov ecx, 0xa ; mov rsi, rbp ; mov rdi, rbx ; and r12d, 0x20
write: ecx r12d r8 r8d r9d rdi rdx rflags rsi rsp 
0006c959: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006ca15: RLP; lea rax, [rip + 0x2fbc80] ; mov rdi, rbx ; mov qword ptr [rbx + 0xd8], rax ; call 0x77edc
write: rax rdi rsp 
0006ca2f: RLP; mov ecx, r13d ; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rbx ; call 0x7822c
write: ecx rdi rdx rsi rsp 
0006ca7d: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0006cc07: RLP; lea rax, [rip + 0x2fb14e] ; mov qword ptr [rbx + 0xe0], r12 ; mov rdi, rbx ; mov qword ptr [rbx + 0xd8], rax ; mov rax, qword ptr [rsp + 0x20] ; mov qword ptr [rbx + 0xe8], rax ; mov rax, qword ptr [rsp + 0x28] ; mov qword ptr [rbx + 0xf0], rax ; mov rax, qword ptr [rsp + 0x30] ; mov qword ptr [rbx + 0xf8], rax ; mov rax, qword ptr [rsp + 0x38] ; mov qword ptr [rbx + 0x100], rax ; call 0x77edc
write: rax rdi rsp 
0006ceda: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006cf65: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rdx ; add dword ptr [r8 + 4], 1 ; mov rdx, rbp ; mov rsi, r9 ; mov rdi, rbx ; call 0x7994c
write: r8 rdi rdx rflags rsi rsp 
0006d05b: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006d0c9: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; mov rsi, qword ptr [rbp] ; mov edx, 3 ; mov rdi, rbx ; call 0x6e8cc
write: edx rdi rdx rflags rsi rsp 
0006d1fa: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006d261: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; xor ecx, ecx ; mov edx, 1 ; xor esi, esi ; mov rdi, rbx ; call 0x6e6ac
write: ecx edx esi rdi rdx rflags rsp 
0006d38e: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006d61b: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006d951: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006dbb2: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2fcb4d] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x10] ; jae 0x6dcb4
write: rax rdi rdx rflags rsp 
0006dd25: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006e450: RLP; lea rax, [rip + 0x2f99c5] ; mov rdi, rbx ; mov qword ptr [rbx + 0xd8], rax ; call 0x77edc
write: rax rdi rsp 
0006e46a: RLP; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rbx ; call 0x6e0bc
write: rdi rdx rsi rsp 
0006e4a9: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0006e4d0: RLP; mov rbx, qword ptr [rip + 0x2fc235] ; mov rbp, rax ; mov eax, dword ptr [rbx] ; mov rdi, rbx ; and eax, 0x8000 ; jne 0x6e54e
write: eax rbp rbx rdi rflags 
0006e530: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2fc1c7] ; mov qword ptr [r8 + 8], rdx ; add dword ptr [r8 + 4], 1 ; mov eax, dword ptr [rdi + 0xc0] ; test eax, eax ; jne 0x6e60c
write: eax r8 rdi rflags rsp 
0006e68e: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006e700: RLP; mov ecx, dword ptr [rsp + 0xc] ; mov edx, dword ptr [rsp + 8] ; mov rsi, qword ptr [rsp] ; mov rax, qword ptr [rbx + 0xd8] ; mov rdi, rbx ; call qword ptr [rax + 0x48]
write: ecx edx rax rdi rsi rsp 
0006e7eb: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], r12 ; add dword ptr [r8 + 4], 1 ; mov ecx, ebp ; mov rsi, r10 ; mov rdi, rbx ; call 0x6e6ac
write: ecx r8 rdi rflags rsi rsp 
0006e8bb: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006e8fe: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov ecx, r12d ; mov rsi, rbp ; mov rdi, rbx ; xor edx, edx ; call qword ptr [rax + 0x48]
write: ecx edx rax rdi rflags rsi rsp 
0006e99b: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rbp ; add dword ptr [r8 + 4], 1 ; mov rsi, r10 ; mov rdi, rbx ; call 0x6e8cc
write: r8 rdi rflags rsi rsp 
0006ea6b: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006eadb: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov ecx, dword ptr [rbx] ; mov qword ptr [r8 + 8], r9 ; add dword ptr [r8 + 4], 1 ; mov rax, qword ptr [rbx + 0xd8] ; and ch, 0xfd ; xor ebp, ebp ; test r12, r12 ; mov dword ptr [rbx], ecx ; mov rsi, r12 ; cmovne rbp, rdx ; mov rdi, rbx ; mov rdx, rbp ; call qword ptr [rax + 0x58]
write: ch ebp ecx r8 rax rbp rdi rdx rflags rsi rsp 
0006ebe8: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006edf0: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006ee6d: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; movzx esi, r8b ; mov rdi, rbx ; call 0x79d9c
write: esi rdi rdx rflags rsp 
0006ef3d: RLP; lea rax, [rip + 0x2f9818] ; mov rcx, rbp ; mov rsi, rbp ; mov rdx, -1 ; mov rdi, rsp ; mov qword ptr [rsp + 0xd8], rax ; call 0x7aedc
write: rax rcx rdi rdx rsi rsp 
0006ef65: RLP; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rsp ; call 0x4797c
write: rdi rdx rsi rsp 
0006efed: RLP; lea rax, [rip + 0x2f9768] ; mov rsi, r13 ; mov rdi, rsp ; xor ecx, ecx ; xor edx, edx ; mov qword ptr [rsp + 0xd8], rax ; call 0x7aedc
write: ecx edx rax rdi rflags rsi rsp 
0006f00f: RLP; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rsp ; xor ecx, ecx ; call 0x57ecc
write: ecx rdi rdx rflags rsi rsp 
0006f098: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov esi, 1 ; mov rdi, rbx ; call 0x73bdc
write: esi rdi rdx rflags rsp 
0006f1a7: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006f366: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006f41c: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2fb2e3] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rdi + 0xa0] ; test rax, rax ; je 0x6f4b1
write: rax rdi rdx rflags rsp 
0006f510: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006f5df: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov ecx, dword ptr [rbx] ; mov qword ptr [r8 + 8], rdx ; add dword ptr [r8 + 4], 1 ; mov r12d, ecx ; sub r9d, 1 ; and ecx, 0xffffffdf ; mov dword ptr [rbx], ecx ; movsxd rdx, r9d ; mov r8d, 1 ; mov ecx, 0xa ; mov rsi, rbp ; mov rdi, rbx ; and r12d, 0x20
write: ecx r12d r8 r8d r9d rdi rdx rflags rsi rsp 
0006f71c: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006f825: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rdx ; add dword ptr [r8 + 4], 1 ; mov esi, 1 ; mov rdi, rbx ; call 0x73bdc
write: esi r8 rdi rflags rsp 
0006f925: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006f953: RLP; mov esi, 1 ; mov rdi, rbx ; mov r12, rax ; call 0x73bdc
write: esi r12 rdi rsp 
0006fce8: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov esi, 1 ; mov rdi, rbx ; call 0x73bdc
write: esi rdi rdx rflags rsp 
0006fec2: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0006ff8f: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2fa768] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; mov rdx, qword ptr [rdi + 0xa0] ; test rdx, rdx ; je 0x7002c
write: rdi rdx rflags rsp 
0007008e: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
0007015f: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2fa598] ; mov qword ptr [rdx + 8], r9 ; add dword ptr [rdx + 4], 1 ; mov rdx, qword ptr [rdi + 0x28] ; cmp rdx, qword ptr [rdi + 0x30] ; jae 0x701f1
write: rdi rdx rflags rsp 
00070254: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00070715: RLP; mov rdi, rbx ; mov esi, 1 ; call 0x73bdc
write: esi rdi rsp 
00070726: RLP; lea rdx, [r12 - 1] ; mov rdi, rbx ; mov rcx, rbp ; mov rsi, rbp ; mov dword ptr [rbp], 0 ; call 0x71d5c
write: rcx rdi rdx rsi rsp 
00070744: RLP; mov rdx, r14 ; mov rdi, rbx ; mov rsi, r13 ; call 0x525dc
write: rdi rdx rsi rsp 
000707e4: RLP; mov rdi, rsp ; mov esi, 1 ; call 0x73bdc
write: esi rdi rsp 
000707f5: RLP; mov rsi, r13 ; mov rdi, rsp ; xor ecx, ecx ; xor edx, edx ; call 0x71d5c
write: ecx edx rdi rflags rsi rsp 
00070808: RLP; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rsp ; xor ecx, ecx ; call 0x60fdc
write: ecx rdi rdx rflags rsi rsp 
000709f3: RLP; mov rax, qword ptr [r13] ; mov rdi, qword ptr [rax + 0x40] ; call 0x1f46c
write: rax rdi rsp 
00070a04: RLP; mov rcx, qword ptr [rsp] ; mov rax, qword ptr [r13] ; mov rdx, r12 ; add rcx, r15 ; mov qword ptr [rax + 0x40], r15 ; mov qword ptr [rax + 0x50], rcx ; mov r8, qword ptr [r13] ; mov ecx, 0x190 ; sub rdx, qword ptr [r8 + 0x10] ; mov rdi, qword ptr [r8 + 0x40] ; sar rdx, 2 ; jmp 0x7095f
write: ecx r8 rax rcx rdi rdx rflags 
00070a58: RLP; mov r8, qword ptr [r13] ; mov rdx, r12 ; mov rcx, qword ptr [rsp] ; sub rdx, qword ptr [r8 + 0x10] ; mov rdi, qword ptr [r8 + 0x40] ; sar rdx, 2 ; jmp 0x7095f
write: r8 rcx rdi rdx rflags 
00070ac1: RLP; mov rdi, qword ptr [r13] ; mov rdx, r12 ; mov rsi, qword ptr [rdi + 0x10] ; mov rdi, qword ptr [rdi + 0x40] ; sub rdx, rsi ; lea rdi, [rdi + r15*4] ; sar rdx, 2 ; jmp 0x70a4f
write: rdi rdx rflags rsi 
00070aff: RLP; mov r9, qword ptr [rsp + 8] ; mov rdx, rbp ; mov rdi, rax ; mov rsi, r9 ; call 0x965cc
write: r9 rdi rdx rsi rsp 
00070dbd: RLP; mov rax, qword ptr [rbp + 0xa0] ; mov rdi, qword ptr [rax + 0x10] ; call 0x1f46c
write: rax rdi rsp 
00070e90: RLP; mov qword ptr [rbx + 0x48], 0 ; mov rdi, rbx ; call 0x78cfc
write: rdi rsp 
00070f53: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov esi, ebp ; mov rdi, rbx ; call qword ptr [rax + 0x18]
write: esi rax rdi rsp 
0007138f: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov rdi, rbx ; call qword ptr [rax + 0x28]
write: rax rdi rsp 
000714d7: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov rdi, rbx ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
000719c7: RLP; mov rdi, r14 ; call qword ptr [rbp + 0xe8]
write: rdi rsp 
000719d4: RLP; mov rax, qword ptr [rbp + 0xa0] ; mov rcx, qword ptr [rsp + 8] ; mov qword ptr [rax + 0x30], 0 ; sub rcx, rbx ; lea rdi, [r15 + rbx*4] ; xor esi, esi ; mov rdx, rcx ; call 0x9640c
write: esi rax rcx rdi rdx rflags rsp 
000719fd: RLP; mov rdx, qword ptr [rsp] ; mov ecx, 1 ; mov rsi, r15 ; mov rdi, rbp ; add rdx, r15 ; call 0x70bec
write: ecx rdi rdx rflags rsi rsp 
00071b44: RLP; mov rax, qword ptr [rbx + 0xa0] ; mov rdi, rbx ; mov qword ptr [rax + 0x30], 0 ; xor esi, esi ; call 0x70e3c
write: esi rax rdi rflags rsp 
00071c12: RLP; mov rdi, rbp ; call qword ptr [r13 + 0xe8]
write: rdi rsp 
00071c20: RLP; mov r10, qword ptr [rsp + 0x18] ; mov qword ptr [r14 + 0x30], 0 ; mov rdx, qword ptr [rsp + 0x10] ; sub r15, qword ptr [rsp] ; mov rsi, r10 ; mov ecx, 1 ; mov rdi, r13 ; mov qword ptr [rsp], r10 ; add rdx, r10 ; call 0x70bec
write: ecx r10 r15 rdi rdx rflags rsi rsp 
00071d84: RLP; lea r13, [rbx + rax*4] ; xor ecx, ecx ; mov rdx, r13 ; mov rsi, rbx ; mov rdi, rbp ; call 0x70bec
write: ecx r13 rdi rdx rflags rsi rsp 
00072225: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov rdi, qword ptr [rip + 0x2f84d2] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov edx, dword ptr [rdi] ; and edx, 0x288 ; cmp edx, 0x280 ; je 0x72659
write: edx rdi rdx rflags rsp 
00072279: RLP; mov rax, qword ptr [rbx + 0xa0] ; mov r15, qword ptr [rbx + 0x10] ; xor ebp, ebp ; mov rdx, qword ptr [rax + 0x30] ; mov qword ptr [rax], rdx ; mov qword ptr [rax + 0x10], rdx ; mov qword ptr [rax + 8], rdx ; mov qword ptr [rax + 0x28], rdx ; mov qword ptr [rax + 0x20], rdx ; mov qword ptr [rax + 0x18], rdx ; nop dword ptr [rax] ; mov rdx, qword ptr [rbx + 0x40] ; mov rax, qword ptr [rbx + 0xd8] ; mov rsi, r15 ; mov rdi, rbx
write: ebp r15 rax rdi rdx rflags rsi 
000725ce: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x7109c
write: rdi rflags rsp 
000725fe: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x797dc
write: rdi rflags rsp 
000726c4: RLP; mov rdx, qword ptr [rbx + 0xa0] ; mov r8, qword ptr [rsp + 0x18] ; mov rdi, r12 ; lea rcx, [rdx + 8] ; mov r9, qword ptr [rdx + 8] ; lea rsi, [rdx + 0x58] ; add rbp, r8 ; mov r8, r14 ; mov qword ptr [rsp + 8], rcx ; mov rdx, qword ptr [rdx + 0x38] ; mov rcx, rax ; mov qword ptr [rsp], rdx ; mov rdx, r13 ; call qword ptr [r12 + 0x18]
write: r8 r9 rbp rcx rdi rdx rflags rsi rsp 
0007279f: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00072898: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov rsi, r12 ; mov edx, ebp ; mov rdi, rbx ; call qword ptr [rax + 0x80]
write: edx rax rdi rsi rsp 
00072c2e: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x797dc
write: rdi rflags rsp 
00072ef2: RLP; mov rdx, qword ptr [rsp + 0x18] ; mov r13, rax ; mov qword ptr [rsp + 0x28], rax ; lea rsi, [rsp + 0x20] ; mov r9, r13 ; lea r8, [rsp + 0x30] ; mov rdi, r14 ; mov qword ptr [rsp + 0x30], rdx ; mov rax, qword ptr [r15 + 0x60] ; lea rcx, [rdx + rbp] ; add rbp, r13 ; mov qword ptr [rsp], rbp ; mov qword ptr [rsp + 0x20], rax ; lea rax, [rsp + 0x28] ; mov qword ptr [rsp + 8], rax
write: r13 r8 r9 rax rbp rcx rdi rdx rflags rsi 
00073076: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x7109c
write: rdi rflags rsp 
00073172: RLP; mov rsi, qword ptr [rbx + 0x20] ; mov rdx, qword ptr [rbx + 0x28] ; mov rdi, rbx ; mov r14d, eax ; sub rdx, rsi ; call 0x7875c
write: r14d rdi rdx rflags rsi rsp 
000738b4: RLP; lea rdx, [rsp + 0x18] ; xor r8d, r8d ; mov rcx, r13 ; lea rsi, [rbx + 0x50] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x10] ; mov rdi, r12 ; call rbp
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000739a1: RLP; xor edx, edx ; xor r8d, r8d ; xor ecx, ecx ; lea rsi, [rbx + 0x98] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 1 ; lea r9, [rsp + 0x18] ; mov rdi, r12 ; call rbp
write: ecx edx r8d r9 rdi rflags rsi rsp 
00073a90: RLP; lea rdx, [rsp + 0x18] ; xor r8d, r8d ; mov rcx, r13 ; lea rsi, [rbx + 0x98] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x10] ; mov rdi, r12 ; call rbp
write: r8d r9 rcx rdi rdx rflags rsi rsp 
00073b99: RLP; lea rdx, [rbp - 0x40] ; lea rsi, [rbx + 0x50] ; mov dword ptr [rsp + 8], 0 ; mov dword ptr [rsp], 0 ; lea r9, [rbp - 0x38] ; mov rcx, r15 ; mov rdi, r13 ; xor r8d, r8d ; call r12
write: r8d r9 rcx rdi rdx rflags rsi rsp 
00074085: RLP; mov esi, 1 ; mov rdi, rbx ; call 0x73bdc
write: esi rdi rsp 
00074096: RLP; mov rcx, rbp ; mov edx, 0x800 ; mov rsi, rbp ; mov rdi, rbx ; call 0x71d5c
write: edx rcx rdi rsi rsp 
00074568: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00074867: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000748db: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rbp ; add dword ptr [r8 + 4], 1 ; mov ecx, 3 ; mov rsi, r10 ; mov rdi, rbx ; call 0x6e6ac
write: ecx r8 rdi rflags rsi rsp 
000749b7: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00074afd: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00074b6c: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x2f5b93] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x10] ; jae 0x74bf9
write: rax rdi rdx rflags rsp 
00074c58: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00074db1: RLP; lea rax, [rip + 0x2f35e4] ; mov rcx, rbp ; mov edx, 0x2000 ; mov rsi, rbp ; mov rdi, rbx ; mov qword ptr [rbx + 0xd8], rax ; call 0x7aedc
write: edx rax rcx rdi rsi rsp 
00074f88: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00074ff1: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov ecx, 3 ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call 0x6e6ac
write: ecx edx esi rdi rdx rflags rsp 
000750c1: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00075179: RLP; lea rax, [rip + 0x2f35dc] ; mov rcx, rbx ; mov edx, 0x64 ; mov rsi, rbx ; mov rdi, rsp ; mov qword ptr [rsp + 0xd8], rax ; call 0x7aedc
write: edx rax rcx rdi rsi rsp 
0007519f: RLP; mov rax, qword ptr [rip + 0x2f3c8e] ; mov rdx, r14 ; mov rsi, r13 ; mov rdi, rsp ; and dword ptr [rsp], 0xfffffffe ; mov qword ptr [rsp + 0xe0], rax ; mov rax, qword ptr [rip + 0x2f3dd2] ; mov qword ptr [rsp + 0xe8], rax ; call 0x4797c
write: rax rdi rdx rflags rsi rsp 
00075260: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000752f6: RLP; lea rax, [rip + 0x2f339f] ; mov rdi, rsp ; mov qword ptr [rsp + 0xd8], rax ; call 0x77edc
write: rax rdi rsp 
00075311: RLP; mov esi, ebp ; mov rdi, rsp ; call 0x786dc
write: esi rdi rsp 
0007537d: RLP; cmp eax, -1 ; sete al ; test al, al ; mov eax, 0xffffffff ; cmovne ebp, eax ; mov rax, qword ptr [rsp + 0xd8] ; xor esi, esi ; mov rdi, rbx ; call qword ptr [rax + 0x10]
write: al eax ebp esi rax rdi rflags rsp 
000754df: RLP; lea rax, [rip + 0x2f2f76] ; mov rdi, rbx ; mov rcx, rbp ; mov rdx, r14 ; mov rsi, rbp ; mov qword ptr [rsp + 0xd8], rax ; mov byte ptr [rbp], 0 ; call 0x7aedc
write: rax rcx rdi rdx rsi rsp 
00075507: RLP; mov rdi, rbx ; mov rdx, r13 ; mov rsi, r12 ; call 0x4797c
write: rdi rdx rsi rsp 
000755f3: RLP; mov rdi, qword ptr [rbx + 0x18] ; jmp 0x755a1
write: rdi 
00075704: RLP; lea rax, [rip + 0x2f0c31] ; mov rcx, qword ptr [rbx + 0x18] ; mov rsi, qword ptr [rbx + 0x10] ; mov qword ptr [rsp + 0xd8], rax ; mov rax, qword ptr [rbx + 0x20] ; mov rdi, rcx ; sub rdi, rsi ; sub rax, rcx ; add edi, eax ; jne 0x757cc
read: eax edi rax rcx rdi rflags rsi 
write: edi rax rcx rdi rflags rsi 
0007597b: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rbp ; add dword ptr [r8 + 4], 1 ; mov ecx, 3 ; mov rsi, r10 ; mov rdi, rbx ; call 0x6e6ac
write: ecx r8 rdi rflags rsi rsp 
00075a57: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00075ac1: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; xor ecx, ecx ; mov edx, 1 ; xor esi, esi ; mov rdi, rbx ; call 0x6e6ac
write: ecx edx esi rdi rdx rflags rsp 
00075bee: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00075ef7: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00076457: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000769bc: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00076f30: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov edx, r12d ; mov rsi, rbp ; mov rdi, rbx ; call qword ptr [rax + 0x80]
write: edx rax rdi rsi rsp 
00076fd5: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x797dc
write: rdi rflags rsp 
00077433: RLP; mov rdi, qword ptr [rbx + 0x38] ; cdqe ; mov rcx, rax ; lea rdx, [r12 + rax - 1] ; neg rcx ; mov rsi, rdi ; and rdx, rcx ; mov r8, rdi ; not rsi ; add rsi, qword ptr [rbx + 0x40] ; add rsi, rax ; and rsi, rcx ; cmp rdx, rsi ; jb 0x774d4
read: eax rax rcx rdi rdx rflags rsi 
write: r8 rax rcx rdi rdx rflags rsi 
000774e3: RLP; mov rdi, qword ptr [rbx + 0x38] ; mov r12, rdi ; add r12, qword ptr [rsp + 0x30] ; mov r8, rdi ; mov qword ptr [rbx + 0x40], r12 ; jmp 0x7746c
read: r12 rdi 
write: r12 r8 rdi rflags 
0007773d: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov rdi, rbx ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
00077776: RLP; mov rax, qword ptr [rbx + 0xd8] ; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rbx ; call qword ptr [rax + 0x40]
write: rax rdi rdx rsi rsp 
0007793b: RLP; mov rdi, rbp ; sub r14, rbx ; mov r15, rax ; call 0x7944c
write: r14 r15 rdi rflags rsp 
00077b76: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x797dc
write: rdi rflags rsp 
00077f88: RLP; xor edx, edx ; xor ecx, ecx ; xor esi, esi ; mov rdi, rbx ; call 0x70bec
write: ecx edx esi rdi rflags rsp 
00077f9a: RLP; mov rdx, qword ptr [rbx + 0xa0] ; mov qword ptr [rdx + 0x10], 0 ; mov qword ptr [rdx], 0 ; mov qword ptr [rdx + 8], 0 ; mov qword ptr [rdx + 0x20], 0 ; mov qword ptr [rdx + 0x18], 0 ; mov qword ptr [rdx + 0x28], 0 ; xor ecx, ecx ; xor edx, edx ; xor esi, esi ; mov rdi, rbx ; call 0x7974c
write: ecx edx esi rdi rdx rflags rsp 
00077fe2: RLP; mov qword ptr [rbx + 0x18], 0 ; mov qword ptr [rbx + 8], 0 ; mov rdi, rbx ; mov qword ptr [rbx + 0x10], 0 ; mov qword ptr [rbx + 0x28], 0 ; mov qword ptr [rbx + 0x20], 0 ; mov qword ptr [rbx + 0x30], 0 ; call 0x78cfc
write: rdi rsp 
00078130: RLP; mov rdi, rbx ; xor esi, esi ; call 0x79cfc
write: esi rdi rflags rsp 
00078367: RLP; sub rax, rbx ; mov rsi, rbx ; lea rdx, [rax + 0x12] ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; mov rdx, rax ; mov rdi, rsp ; mov r15, rsp ; call 0x892cc
write: r15 rax rdi rdx rflags rsi rsp 
00078825: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov rdi, qword ptr [rip + 0x2f1ed2] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov edx, dword ptr [rdi] ; and edx, 0x288 ; cmp edx, 0x280 ; je 0x7897c
write: edx rdi rdx rflags rsp 
0007889b: RLP; add rsp, 0x80 ; nop word ptr cs:[rax + rax] ; mov rdi, rbx ; call 0x794ac
write: rdi rflags rsp 
000788b8: RLP; mov rsi, qword ptr [rbx + 0x38] ; mov rdx, qword ptr [rbx + 0x40] ; mov rdi, rbx ; mov rax, qword ptr [rbx + 0xd8] ; sub rdx, rsi ; mov qword ptr [rbx + 8], rsi ; mov qword ptr [rbx + 0x18], rsi ; mov qword ptr [rbx + 0x10], rsi ; mov qword ptr [rbx + 0x30], rsi ; mov qword ptr [rbx + 0x28], rsi ; mov qword ptr [rbx + 0x20], rsi ; call qword ptr [rax + 0x70]
write: rax rdi rdx rflags rsi rsp 
00078956: RLP; and dword ptr [rbx], 0xfffffeff ; mov rdi, rbx ; call 0x797dc
write: rdi rflags rsp 
00078a1c: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
00079290: RLP; mov rcx, qword ptr [rbx + 0x18] ; mov rsi, qword ptr [rbx + 0x58] ; mov r12, rax ; mov rdi, qword ptr [rbx + 0x48] ; sub r14, rcx ; mov rbp, r14 ; sub rbp, rax ; mov rax, rsi ; sub rax, rdi ; cmp rbp, rax ; ja 0x79304
read: r14 rax rbp rcx rdi rflags rsi 
write: r12 r14 rax rbp rcx rdi rflags rsi 
0007935b: RLP; mov r9, qword ptr [rsp + 0x10] ; mov rdi, qword ptr [rbx + 0x48] ; mov qword ptr [rsp + 0x10], r9 ; call 0x1f46c
write: r9 rdi rsp 
000793cc: RLP; mov rdi, r15 ; mov rsi, qword ptr [rbx + 0x18] ; mov rdx, r13 ; sub rdi, r12 ; add rdi, qword ptr [rbx + 0x48] ; sub rdx, rsi ; call 0x8e3dc
read: r12 r13 r15 rdi rdx rip rsi rsp 
write: rdi rdx rflags rsi rsp 
0007941f: RLP; mov rcx, qword ptr [rsp + 0x18] ; mov rdx, r14 ; mov rdi, rax ; mov rsi, rcx ; call 0x8e3dc
write: rcx rdi rdx rsi rsp 
00079535: RLP; mov rdi, qword ptr [rbx + 0x48] ; call 0x1f46c
write: rdi rsp 
00079d3e: RLP; mov qword ptr [rbx + 0x48], 0 ; mov rdi, rbx ; call 0x78cfc
write: rdi rsp 
0007a8b3: RLP; mov rdi, qword ptr [rbx + 0x18] ; call 0x1f46c
write: rdi rsp 
0007abd0: RLP; mov rdi, r14 ; call qword ptr [rbx + 0xe8]
write: rdi rsp 
0007abdd: RLP; mov qword ptr [rbx + 0x38], 0 ; mov rdx, qword ptr [rsp + 8] ; lea rdi, [r15 + rbp] ; xor esi, esi ; sub rdx, rbp ; call 0x891bc
write: esi rdi rdx rflags rsp 
0007abfc: RLP; mov rdx, qword ptr [rsp + 8] ; mov ecx, 1 ; mov rsi, r15 ; mov rdi, rbx ; add rdx, r15 ; call 0x7974c
write: ecx rdi rdx rflags rsi rsp 
0007ad5e: RLP; mov rdi, rbp ; call qword ptr [rbx + 0xe8]
write: rdi rsp 
0007ad6b: RLP; mov r9, qword ptr [rsp + 0x18] ; mov qword ptr [rbx + 0x38], 0 ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, r9 ; mov ecx, 1 ; mov rdi, rbx ; sub r14, qword ptr [rsp + 8] ; mov qword ptr [rsp + 8], r9 ; add rdx, r9 ; call 0x7974c
write: ecx r14 r9 rdi rdx rflags rsi rsp 
0007aebc: RLP; mov qword ptr [rbx + 0x38], 0 ; mov rdi, rbx ; xor esi, esi ; call 0x79cfc
write: esi rdi rflags rsp 
0007af06: RLP; mov r12, rax ; xor ecx, ecx ; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rbx ; call 0x7974c
write: ecx r12 rdi rdx rflags rsi rsp 
0007b76d: RLP; mov rax, qword ptr [rip + 0x2ed628] ; mov rdi, qword ptr [rax] ; call 0x6c45c
write: rax rdi rsp 
0007b903: RLP; lea rdi, [rbx + 0x4000000] ; jmp 0x7b8ab
write: rdi 
0007d109: RLP; add rsp, 0x80 ; xor esi, esi ; mov rdi, rbx ; call 0x7b47c
write: esi rdi rflags rsp 
0007d1b7: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x7bd7c
write: rdi rflags rsp 
0007e68a: RLP; add rsp, 0x80 ; mov rsi, rbx ; mov rdi, rdx ; call 0x7b3fc
write: rdi rflags rsi rsp 
0007e9f6: RLP; add rsp, 0x80 ; mov rsi, rbp ; mov rdi, rdx ; call 0x7b3fc
write: rdi rflags rsi rsp 
0007ef1c: RLP; add rsp, 0x80 ; lea rsi, [rsp + 0x18] ; mov rdi, rbp ; call 0x7b47c
write: rdi rflags rsi rsp 
0007f073: RLP; add rsp, 0x80 ; mov rsi, rbx ; mov rdi, rbp ; call 0x7b3fc
write: rdi rflags rsi rsp 
0007f12d: RLP; xor esi, esi ; mov rdi, rbx ; call 0x7e5dc
write: esi rdi rflags rsp 
0007f19d: RLP; mov rdi, r12 ; call 0x7bd7c
write: rdi rsp 
0007f6ba: RLP; add rsp, 0x80 ; lea rsi, [rip + 0x2e9f54] ; mov rdi, r8 ; call 0x7f1bc
write: rdi rflags rsi rsp 
0007f7b0: RLP; add rsp, 0x80 ; mov rsi, rbp ; mov rdi, rbx ; call 0x7d22c
write: rdi rflags rsi rsp 
0007f98c: RLP; add rsp, 0x80 ; mov rdi, rbx ; call 0x7f74c
write: rdi rflags rsp 
0007f9f2: RLP; mov rsi, rbx ; mov rdi, rax ; call 0x7b3fc
write: rdi rsi rsp 
0007fa67: RLP; add rsp, 0x80 ; lea rdi, [rip + 0x2e9ba7] ; call 0x7be1c
write: rdi rflags rsp 
0007fa7e: RLP; mov rax, qword ptr [rip + 0x2e9bef] ; mov qword ptr [rbx], 0x444c4541 ; lea rdx, [rip + 0x2e9be1] ; mov qword ptr [rbx + 8], 4 ; mov qword ptr [rbx + 0x10], 0 ; lea rcx, [rbx + 0x38] ; mov qword ptr [rbx + 0x18], 0 ; mov qword ptr [rbx + 0x28], 0 ; lea rdi, [rip + 0x2ea3a6] ; mov qword ptr [rbx + 0x20], rax ; jmp 0x7fae5
write: rax rcx rdi rdx 
0007fd0e: RLP; add rsp, 0x80 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call 0x7e6cc
write: rdi rdx rflags rsi rsp 
00080043: RLP; add rsp, 0x80 ; mov rsi, r12 ; mov rcx, r13 ; mov rdx, r15 ; mov rdi, rbx ; call 0x7ea7c
write: rcx rdi rdx rflags rsi rsp 
00080122: RLP; mov rdi, r12 ; call 0x7bd7c
write: rdi rsp 
00080199: RLP; mov rsi, r12 ; xor edx, edx ; mov rdi, rbx ; call 0x7c41c
write: edx rdi rflags rsi rsp 
00080715: RLP; add rsp, 0x80 ; lea rdi, [rip + 0x2e8ef9] ; call 0x7be1c
write: rdi rflags rsp 
00080dda: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x7f74c
write: rdi rsp 
00080e4e: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rsp] ; call 0x7ff6c
write: rdi rsi rsp 
00080eb6: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, qword ptr [rsp] ; mov rdx, qword ptr [rsp + 0x18] ; call 0x7fc4c
write: rdi rdx rsi rsp 
00081512: RLP; mov rdi, qword ptr [rsp + 8] ; jmp 0x814a0
write: rdi 
0008158c: RLP; add rsp, 0x80 ; mov rdi, rdx ; call 0x7be1c
write: rdi rflags rsp 
0008189a: RLP; add rsp, 0x80 ; mov rsi, r13 ; mov rdi, rbx ; call 0x7c18c
write: rdi rflags rsi rsp 
000819f8: RLP; add rsp, 0x80 ; mov rsi, qword ptr [rsp] ; mov rdi, rbx ; mov rbp, rsi ; call 0x7c18c
write: rbp rdi rflags rsi rsp 
00081a12: RLP; mov rdi, qword ptr [r12] ; lea rsi, [rip + 0xb4229] ; mov edx, r13d ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
00081a2b: RLP; mov edx, dword ptr [rsp + 0x10] ; mov rdi, qword ptr [r12] ; lea rsi, [rip + 0xb4217] ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
00081a45: RLP; mov edx, dword ptr [rsp + 0x2c] ; mov rdi, qword ptr [r12] ; lea rsi, [rip + 0xb4216] ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
00081ad5: RLP; mov r8d, dword ptr [rsp] ; mov rdi, qword ptr [r12] ; lea rsi, [rip + 0xb416d] ; xor eax, eax ; mov edx, r8d ; call 0x5212c
write: eax edx r8d rdi rflags rsi rsp 
00081af2: RLP; mov r9d, dword ptr [rsp + 0xc] ; mov rdi, qword ptr [r12] ; lea rsi, [rip + 0xb4168] ; xor eax, eax ; mov edx, r9d ; call 0x5212c
write: eax edx r9d rdi rflags rsi rsp 
00081b10: RLP; mov rdi, qword ptr [r12] ; mov edx, dword ptr [rip + 0x2e7652] ; lea rsi, [rip + 0xb4177] ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
00081b2c: RLP; mov rdi, qword ptr [r12] ; mov rdx, qword ptr [rip + 0x2e7645] ; lea rsi, [rip + 0xb4173] ; xor eax, eax ; call 0x5212c
write: eax rdi rdx rflags rsi rsp 
00081d02: RLP; add rsp, 0x80 ; mov rax, qword ptr [rsp + 0x48] ; mov r10, qword ptr [rsp + 0x98] ; mov rdi, rbx ; xor r9d, r9d ; xor r8d, r8d ; lea rcx, [rax + 8] ; nop word ptr [rax + rax] ; mov rax, qword ptr [rdi + 8] ; test rax, rax ; je 0x81ff8
write: r10 r8d r9d rax rcx rdi rflags rsp 
00081f6e: RLP; lea rdi, [rip + 0x2e76a7] ; cmp rbx, rdi ; je 0x82048
read: rbx rdi rflags 
write: rdi rflags 
00081fa6: RLP; mov rax, qword ptr [rbx + 0x10] ; add qword ptr [rsp + 0x38], rax ; mov rax, qword ptr [rbx + 0x18] ; add qword ptr [rsp + 0x40], rax ; lea rdi, [rip + 0xb3d3a] ; mov rsi, r12 ; lea rbx, [rip + 0x2e7653] ; call 0x6cd6c
write: rax rbx rdi rflags rsi rsp 
0008217a: RLP; mov rdi, rax ; call 0x7639c
write: rdi rsp 
0008244e: RLP; mov rdx, qword ptr [rsp + 8] ; mov rdi, qword ptr [rsp] ; jmp 0x82359
write: rdi rdx 
000824e6: RLP; lea rdi, [rip - 0x51] ; test rax, rax ; mov qword ptr [rbp], rdi ; je 0x825cc
read: rax rdi rflags 
write: rdi rflags 
0008262d: RLP; mov rdx, qword ptr [rbx - 0x30] ; mov qword ptr [rbx - 0x18], 0 ; mov rdi, rbx ; mov qword ptr [rbx - 0x20], 0 ; mov esi, 0xffffff95 ; call 0x891bc
write: esi rdi rdx rsp 
00082993: RLP; mov qword ptr [rsp + 8], rax ; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
00082b50: RLP; lea rcx, [rax + 0x34] ; lea rdx, [rip + 0xb325c] ; lea r14, [rip + 0xb3251] ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea r13, [rsp + 0xf] ; and r13, 0xfffffffffffffff0 ; mov byte ptr [r13], 0x28 ; cmp r12, qword ptr [rbx + 0x18] ; lea rdi, [r13 + 1] ; mov rsi, qword ptr [rbx + 0x10] ; cmovb r14, rdx ; mov rdx, rax ; call 0x892cc
write: r13 r14 rcx rdi rdx rflags rsi rsp 
00082b93: RLP; mov edx, dword ptr [r14] ; lea rsi, [rax + 3] ; mov rdi, r12 ; mov dword ptr [rax], edx ; mov rdx, qword ptr [rbx + 0x18] ; mov rax, rdx ; sub rdi, rdx ; sub rax, r12 ; cmp r12, rdx ; mov edx, 0x10 ; cmovb rdi, rax ; xor ecx, ecx ; call 0x4785c
read: ecx edx r12 rax rdi rdx rflags rip rsp 
write: ecx edx rax rdi rdx rflags rsi rsp 
00082ca5: RLP; mov r15, rax ; lea rax, [rip - 0x73] ; mov rsi, r14 ; mov rdi, rbx ; mov qword ptr [r12], rax ; lea rax, [rip + 0x9c] ; mov qword ptr [rbp], rax ; call 0x82b0c
write: r15 rax rdi rsi rsp 
00082ccd: RLP; mov rdi, qword ptr [rip + 0x2e8c00] ; lea rsi, [rip + 0xb30f6] ; mov rcx, r13 ; mov rdx, r15 ; xor eax, eax ; call 0x5212c
write: eax rcx rdi rdx rflags rsi rsp 
00082dab: RLP; mov r12, rax ; lea rax, [rip - 0x59] ; mov rsi, r14 ; mov rdi, rbx ; mov qword ptr [rbp], rax ; call 0x82b0c
write: r12 rax rdi rsi rsp 
00082dc8: RLP; mov rdi, qword ptr [rip + 0x2e8b05] ; lea rsi, [rip + 0xb2ffb] ; mov rcx, r13 ; mov rdx, r12 ; xor eax, eax ; call 0x5212c
write: eax rcx rdi rdx rflags rsi rsp 
00082ec4: RLP; mov rbp, rax ; lea rax, [rip + 0x17e] ; lea rdx, [rip - 0x179] ; lea rcx, [rip - 0x90] ; mov rsi, r15 ; mov rdi, rbx ; mov qword ptr [r14], rax ; mov rax, qword ptr [rip + 0x2e5ff0] ; mov qword ptr [rax], rdx ; mov rax, qword ptr [rip + 0x2e60de] ; mov qword ptr [rax], rcx ; call 0x82b0c
write: rax rbp rcx rdi rdx rsi rsp 
00082f30: RLP; mov rsi, r15 ; mov rdi, rbx ; call 0x82b0c
write: rdi rsi rsp 
00082f3f: RLP; mov rdi, qword ptr [rip + 0x2e898e] ; lea rsi, [rip + 0xb2ea6] ; mov rcx, r13 ; mov rdx, rbp ; xor eax, eax ; call 0x5212c
write: eax rcx rdi rdx rflags rsi rsp 
00083076: RLP; mov rdi, rbp ; mov rsi, rax ; call 0x82b0c
write: rdi rsi rsp 
00083085: RLP; mov rdi, qword ptr [rip + 0x2e8848] ; lea rsi, [rip + 0xb2d54] ; xor eax, eax ; mov rdx, rbx ; call 0x5212c
write: eax rdi rdx rflags rsi rsp 
000832a2: RLP; mov rcx, qword ptr [rip + 0x2e862b] ; lea rdi, [rip + 0xb2b52] ; mov edx, 8 ; mov esi, 1 ; call 0x6d45c
write: edx esi rcx rdi rsp 
00083409: RLP; mov rdi, rbx ; call 0x6bf5c
write: rdi rsp 
00085402: RLP; lea rbp, [rax + 1] ; mov rdi, rbp ; call 0x1f3cc
write: rbp rdi rsp 
00085452: RLP; lea rdi, [rax + 1] ; mov rbx, rax ; call 0x1f3cc
write: rbx rdi rsp 
000855b0: RLP; mov rdi, rax ; mov r14, rax ; call 0x856dc
write: r14 rdi rsp 
000855bf: RLP; mov r13, rax ; mov eax, ebx ; lea rsi, [rsp + 0x14] ; sar eax, 0x1f ; xor ecx, ecx ; mov edx, 0xa ; xor ebx, eax ; mov byte ptr [rsp + 0x14], 0 ; sub ebx, eax ; movsxd rdi, ebx ; call 0x4778c
write: eax ebx ecx edx r13 rdi rflags rsi rsp 
000855e8: RLP; cmp r13, rbp ; mov rdx, rbp ; mov rsi, r14 ; cmovbe rdx, r13 ; mov rdi, r12 ; mov rbx, rax ; call 0x892cc
write: rbx rdi rdx rflags rsi rsp 
00085675: RLP; mov r14, rax ; or rcx, 0xffffffffffffffff ; xor eax, eax ; mov rdi, r14 ; lea rsi, [rsp + 0x14] ; mov edx, 0xa ; repne scasb al, byte ptr [rdi] ; mov eax, ebx ; mov byte ptr [rsp + 0x14], 0 ; sar eax, 0x1f ; not rcx ; xor ebx, eax ; lea r13, [rcx - 1] ; xor ecx, ecx ; sub ebx, eax
read: al eax ebx ecx r14 rax rcx rdi rflags 
write: eax ebx ecx edx r13 r14 rcx rdi rflags rsi 
000856b0: RLP; cmp r13, rbp ; mov rdx, rbp ; mov rdi, r12 ; cmovbe rdx, r13 ; mov rsi, r14 ; mov rbx, rax ; call 0x892cc
write: rbx rdi rdx rflags rsi rsp 
000856cc: RLP; mov rdi, rax ; jmp 0x85614
write: rdi 
00087a0b: RLP; mov ecx, ebx ; mov rdx, rax ; mov esi, 0x63 ; xor eax, eax ; mov rdi, rbp ; call 0x5227c
write: eax ecx esi rdi rdx rflags rsp 
00088292: RLP; mov r15, rax ; mov rax, qword ptr [rsp + 0x58] ; mov rsi, r13 ; mov rdx, r15 ; mov rdi, r13 ; add rsi, rax ; mov qword ptr [rsp + 0x18], rax ; call 0x88bbc
write: r15 rax rdi rdx rflags rsi rsp 
000897a4: RLP; mov rax, r12 ; mov rdx, r12 ; and rax, 0xfffffffffffffff8 ; and edx, 7 ; add rbp, rax ; add rbx, rax ; mov rsi, rbp ; lea r8, [rbx + rdx] ; mov rdi, rbx ; sub rsi, rbx ; test rdx, rdx ; je 0x897dc
write: edx r8 rax rbp rbx rdi rdx rflags rsi 
0008f561: RLP; mov r8, qword ptr [rsp] ; mov r11, rax ; mov rax, qword ptr [rsp + 0x58] ; mov rdx, r11 ; mov qword ptr [rsp + 8], r11 ; lea rsi, [r8 + rax] ; mov rdi, r8 ; mov qword ptr [rsp + 0x18], rax ; call 0x8bd2c
write: r11 r8 rax rdi rdx rsi rsp 
0008ffca: RLP; mov r14, qword ptr [rsp + 0x28] ; mov rdx, rax ; mov rdi, r13 ; mov rbp, rax ; lea rsi, [r13 + r14] ; call 0x88bbc
write: r14 rbp rdi rdx rsi rsp 
000906f9: RLP; lea rcx, [rax + 1] ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, rbp ; call 0x9066c
write: rcx rdi rdx rsi rsp 
000907b9: RLP; mov rdi, qword ptr [r15 - 8] ; lea rbx, [rbx + rax + 1] ; test rdi, rdi ; jne 0x907ac
read: rdi rflags 
write: rbx rdi rflags 
000907f8: RLP; mov rdi, rax ; mov qword ptr [r13], rax ; mov eax, 0xc ; test rdi, rdi ; je 0x907db
read: rax rdi rflags 
write: eax rdi rflags 
00090829: RLP; mov rsi, qword ptr [rbp] ; lea rdi, [rax + 1] ; test rsi, rsi ; jne 0x9081c
write: rdi rflags rsi 
000909be: RLP; mov rdx, qword ptr [rbp] ; mov rcx, qword ptr [r12] ; add rax, 1 ; lea rsi, [rbx + rax] ; mov rdi, rbx ; sub rdx, rax ; sub rcx, rbx ; mov qword ptr [rbp], rdx ; add rdx, rcx ; call 0x88fbc
write: rax rcx rdi rdx rflags rsi rsp 
00090ae7: RLP; lea r12, [rax + 1] ; mov rdi, rbx ; lea r13, [r12 + r15] ; mov rsi, r13 ; call 0x1f3ac
write: r12 r13 rdi rsi rsp 
00090b3b: RLP; mov rcx, qword ptr [rsp + 8] ; mov r9, qword ptr [rsp + 0x10] ; mov rdx, r12 ; mov rsi, rcx ; mov rdi, r9 ; call 0x88fbc
write: r9 rcx rdi rdx rsi rsp 
00090dc2: RLP; mov rdi, r13 ; mov qword ptr [rsp + 0x28], rax ; call 0x856dc
write: rdi rsp 
00090ef1: RLP; mov ebx, eax ; mov rdi, qword ptr [rsp + 0x78] ; call 0x1f46c
write: ebx rdi rsp 
00091050: RLP; mov rdx, r15 ; mov rcx, rax ; mov rsi, r12 ; mov rdi, rbp ; xor r15d, r15d ; call 0x90cac
write: r15d rcx rdi rdx rflags rsi rsp 
00091228: RLP; mov rdi, r13 ; mov r14, rax ; call 0x856dc
write: r14 rdi rsp 
00091237: RLP; mov rdx, qword ptr [rbp] ; mov qword ptr [rsp + 8], r14 ; mov rdi, qword ptr [rbx] ; mov qword ptr [rsp + 0x10], rax ; lea r15, [r14 + rdx] ; mov qword ptr [rsp + 0x18], rdx ; lea r14, [r15 + rax] ; lea rcx, [r14 + 2] ; mov rsi, rcx ; mov qword ptr [rsp], rcx ; call 0x1f3ac
write: r14 r15 rcx rdi rdx rsi rsp 
00091295: RLP; mov rcx, qword ptr [rsp + 0x18] ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, r13 ; lea rdi, [rcx + r15 + 1] ; mov byte ptr [rcx + r15], 0x3d ; mov qword ptr [rsp + 8], rcx ; call 0x8e3dc
write: rcx rdi rdx rsi rsp 
0009135e: RLP; mov rdi, rbx ; mov r15, rax ; call 0x856dc
write: r15 rdi rsp 
00091397: RLP; mov rcx, rbp ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r14 ; call 0x9066c
write: rcx rdi rdx rsi rsp 
00091408: RLP; lea r12, [rax + 1] ; mov esi, 0x3d ; mov rdi, rbx ; call 0x83a5c
write: esi r12 rdi rsp 
000921b0: RLP; mov rdi, qword ptr [rbp - 0x140] ; mov r12, rax ; call 0x856dc
write: r12 rdi rsp 
0009238a: RLP; mov rdi, qword ptr [rbp - 0x120] ; mov r8, rbx ; mov rcx, r14 ; mov edx, r12d ; mov esi, r15d ; call 0x9149c
write: edx esi r8 rcx rdi rsp 
0009261b: RLP; mov rax, qword ptr [rbp - 0x148] ; mov r9, qword ptr [rbp - 0x160] ; mov rcx, rbx ; mov r8, qword ptr [rbp - 0x158] ; mov rdi, qword ptr [rbp - 0x120] ; mov rdx, r14 ; mov dword ptr [rsp + 8], r12d ; mov esi, r15d ; mov qword ptr [rsp], rax ; call 0x919ec
write: esi r8 r9 rax rcx rdi rdx rsp 
00092689: RLP; mov rax, qword ptr [rbp - 0x148] ; mov r9, qword ptr [rbp - 0x160] ; mov rcx, rbx ; mov r8, qword ptr [rbp - 0x158] ; mov rdi, qword ptr [rbp - 0x120] ; mov rdx, r14 ; mov esi, r15d ; mov qword ptr [rsp], rax ; call 0x915ec
write: esi r8 r9 rax rcx rdi rdx rsp 
00094009: RLP; lea rdi, [rip + 0xa099d] ; mov r12, rax ; mov rsi, rbp ; mov edx, 5 ; call 0x2f4bc
write: edx r12 rdi rsi rsp 
00094024: RLP; mov rdi, r12 ; mov rbx, rax ; call 0x2e6bc
write: rbx rdi rsp 
00094058: RLP; mov rdi, qword ptr [rax + 0x50] ; lea r12, [rax + 0x50] ; mov rbp, rax ; call 0x1f46c
write: r12 rbp rdi rsp 
00094072: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, rsi ; call 0x2e6bc
write: rdi rsi rsp 
00094083: RLP; lea rsi, [rip + 0xa1db4] ; lea rdi, [rip + 0xa091c] ; mov edx, 5 ; mov r13, rax ; call 0x2f4bc
write: edx r13 rdi rsi rsp 
000940a2: RLP; mov rdi, r13 ; mov r14, rax ; call 0x2e6bc
write: r14 rdi rsp 
000940b1: RLP; lea rsi, [rip + 0xa1de2] ; xor eax, eax ; mov ecx, ebx ; mov rdx, r14 ; mov rdi, r12 ; call 0x523bc
write: eax ecx rdi rdx rflags rsi rsp 
00095782: RLP; lea rbp, [rax*4 + 4] ; mov rdi, rbp ; call 0x1f3cc
write: rbp rdi rsp 
00096679: RLP; movzx esi, bl ; mov rdi, qword ptr [r12] ; call rbp
write: esi rdi rsp 
00096709: RLP; mov rax, qword ptr [rsp + 0x20] ; mov dword ptr [rsp + 8], 1 ; xor r8d, r8d ; mov dword ptr [rsp], 0 ; lea rdx, [rsp + 0x20] ; lea r9, [rsp + 0x28] ; mov rsi, rbp ; mov rdi, qword ptr [r12] ; lea rcx, [rax + 1] ; call rbx
write: r8d r9 rax rcx rdi rdx rflags rsi rsp 
00096859: RLP; mov rax, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rbp + 0x10] ; xor r8d, r8d ; lea rdx, [rsp + 0x28] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x20] ; mov rsi, r13 ; lea rcx, [rax + 4] ; call rbx
write: r8d r9 rax rcx rdi rdx rflags rsi rsp 
00096a0d: RLP; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; xor r8d, r8d ; lea rdx, [rsp + 0x38] ; lea rsi, [rsp + 0x40] ; lea r9, [rsp + 0x30] ; mov rcx, r14 ; mov rdi, qword ptr [r13] ; call r12
write: r8d r9 rcx rdi rdx rflags rsi rsp 
00096c3e: RLP; mov rdi, qword ptr [r12 + 0x10] ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; lea rsi, [rsp + 0x40] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 1 ; lea r9, [rsp + 0x20] ; call rbx
write: ecx edx r8d r9 rdi rflags rsi rsp 
00096cd2: RLP; mov rax, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [r12 + 0x10] ; xor r8d, r8d ; lea rdx, [rsp + 0x28] ; lea rsi, [rsp + 0x40] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x20] ; lea rcx, [rax + 4] ; call rbx
write: r8d r9 rax rcx rdi rdx rflags rsi rsp 
00096e84: RLP; lea r15, [r15 + rax*4 + 4] ; mov rdi, rbx ; mov qword ptr [rsp + 0x48], r14 ; mov qword ptr [rsp + 0x40], r12 ; call 0x11c1dc
write: r15 rdi rsp 
00096e9f: RLP; xor r8d, r8d ; mov rcx, r15 ; lea rsi, [rsp + 0x40] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x80] ; mov rdx, r13 ; mov rdi, rbp ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
00097005: RLP; xor r8d, r8d ; mov rcx, r15 ; mov rdx, r13 ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; mov rdi, rbp ; mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000971ce: RLP; xor r8d, r8d ; mov rdx, r14 ; lea rsi, [rsp + 0x40] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x30] ; mov rcx, r13 ; mov rdi, rbp ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
0009730d: RLP; xor r8d, r8d ; mov rcx, r13 ; mov rdx, r14 ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; mov rdi, rbp ; mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000974de: RLP; xor r8d, r8d ; mov rdx, r14 ; lea rsi, [rsp + 0x40] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; lea r9, [rsp + 0x80] ; mov rcx, r13 ; mov rdi, rbp ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
0009760d: RLP; xor r8d, r8d ; mov rcx, r13 ; mov rdx, r14 ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; mov rdi, rbp ; mov r9, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 0x18] ; call rbx
write: r8d r9 rcx rdi rdx rflags rsi rsp 
0009872c: RLP; mov r14, qword ptr [r12] ; mov r9d, dword ptr [rsp + 8] ; mov rdi, -0x3ff ; sub edi, ebx ; mov esi, r14d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x9876c
write: ecx edi edx esi r14 r9d rdi rdx rflags 
00098e27: RLP; mov rdi, qword ptr [rsp] ; mov rdx, qword ptr [rsp + 0x50] ; mov ecx, ebp ; mov rsi, rdi ; call 0x45cac
read: ebp rdi rip rsp 
write: ecx rdi rdx rsi rsp 
00099246: RLP; lea rdx, [rbp + 4] ; test eax, eax ; cmove rbp, rdx ; mov edi, dword ptr [rbp] ; add rbp, 4 ; lea eax, [rdi - 0x30] ; cmp eax, 9 ; jbe 0x99214
00099bfc: RLP; mov ecx, 0x40 ; mov rax, rbx ; sub ecx, r13d ; shr rax, cl ; or qword ptr [rsp + 0x40], rax ; mov rdi, qword ptr [rsp + 0x58] ; jmp 0x99b59
write: ecx rax rdi rflags 
0009ad63: RLP; mov r15, qword ptr [rbp] ; mov r9d, dword ptr [rsp] ; mov rdi, -0x3fff ; sub edi, ebx ; mov esi, r15d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x9ada4
write: ecx edi edx esi r15 r9d rdi rdx rflags 
0009b453: RLP; mov rdi, qword ptr [rsp] ; mov rdx, qword ptr [rsp + 0x50] ; mov ecx, r12d ; mov rsi, rdi ; call 0x45cac
read: r12d rdi rip rsp 
write: ecx rdi rdx rsi rsp 
0009b86e: RLP; lea rdx, [rbp + 4] ; test eax, eax ; cmove rbp, rdx ; mov edi, dword ptr [rbp] ; add rbp, 4 ; lea eax, [rdi - 0x30] ; cmp eax, 9 ; jbe 0x9b83c
0009bdfb: RLP; mov ecx, r13d ; mov rax, rbx ; sub ecx, r12d ; shr rax, cl ; or qword ptr [rsp + 0x40], rax ; mov rdi, qword ptr [rsp + 0x58] ; jmp 0x9bd8b
write: ecx rax rdi rflags 
0009d2fc: RLP; mov r14, qword ptr [r12] ; mov r9d, dword ptr [rsp + 8] ; mov rdi, -0x7f ; sub edi, ebx ; mov esi, r14d ; and esi, 1 ; mov rdx, r13 ; mov ecx, edi ; shr rdx, cl ; and edx, 1 ; jne 0x9d33c
write: ecx edi edx esi r14 r9d rdi rdx rflags 
0009d9ed: RLP; mov rdi, qword ptr [rsp] ; mov rdx, qword ptr [rsp + 0x50] ; mov ecx, r12d ; mov rsi, rdi ; call 0x45cac
read: r12d rdi rip rsp 
write: ecx rdi rdx rsi rsp 
0009de18: RLP; lea rdx, [rbx + 4] ; test eax, eax ; cmove rbx, rdx ; mov edi, dword ptr [rbx] ; add rbx, 4 ; lea eax, [rdi - 0x30] ; cmp eax, 9 ; jbe 0x9dde4
0009e68a: RLP; mov ecx, 0x40 ; mov rax, rbx ; sub ecx, r13d ; shr rax, cl ; or qword ptr [rsp + 0x40], rax ; mov rdi, qword ptr [rsp + 0x58] ; jmp 0x9e5d3
write: ecx rax rdi rflags 
000a01d3: RLP; mov rdi, qword ptr [rbp - 0x140] ; mov rbx, rax ; call 0x957cc
write: rbx rdi rsp 
000a03ac: RLP; mov rdi, qword ptr [rbp - 0x120] ; mov r8, r14 ; mov rcx, r12 ; mov edx, ebx ; mov esi, r15d ; call 0x9f72c
write: edx esi r8 rcx rdi rsp 
000a063a: RLP; mov rax, qword ptr [rbp - 0x150] ; mov r9, qword ptr [rbp - 0x148] ; mov rcx, r14 ; mov r8, qword ptr [rbp - 0x160] ; mov rdi, qword ptr [rbp - 0x120] ; mov rdx, r12 ; mov dword ptr [rsp + 8], ebx ; mov esi, r15d ; mov qword ptr [rsp], rax ; call 0x9fbac
write: esi r8 r9 rax rcx rdi rdx rsp 
000a06a7: RLP; mov rax, qword ptr [rbp - 0x150] ; mov r9, qword ptr [rbp - 0x148] ; mov rcx, r14 ; mov r8, qword ptr [rbp - 0x160] ; mov rdi, qword ptr [rbp - 0x120] ; mov rdx, r12 ; mov esi, r15d ; mov qword ptr [rsp], rax ; call 0x9f87c
write: esi r8 r9 rax rcx rdi rdx rsp 
000a1121: RLP; mov rdx, qword ptr [rbp - 0x40] ; mov qword ptr [rbp - 0x70], rax ; shl rdx, 2 ; test rax, rax ; lea rdi, [rax + rdx] ; mov qword ptr [rbp - 0x40], rdi ; je 0xa09a2
read: rax rdi rdx rflags 
write: rdi rdx rflags 
000a136b: RLP; mov rdi, qword ptr [rbx] ; mov rsi, qword ptr [rbx + 8] ; call 0x241ac
write: rdi rsi rsp 
000a137b: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000a15c3: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
000a186c: RLP; lea rbx, [rbx + rax + 1] ; mov rdi, rbp ; call 0x11c1dc
write: rbx rdi rsp 
000a187d: RLP; xor r8d, r8d ; mov rcx, rbx ; mov rdx, r13 ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; mov r9, r15 ; mov rsi, r14 ; mov rdi, r12 ; call rbp
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000a19f5: RLP; xor r8d, r8d ; mov rcx, qword ptr [rsp + 0x18] ; mov rdx, qword ptr [rsp + 0x20] ; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; mov r9, r15 ; mov rsi, r14 ; mov rdi, r12 ; call rbp
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000a1bee: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rcx, qword ptr [r8] ; mov qword ptr [rdx + 8], rbp ; add dword ptr [rdx + 4], 1 ; lea rax, [rsp + 0xf0] ; or dword ptr [rcx + 0x74], 0x10 ; mov rdi, qword ptr [r8] ; lea rdx, [rsp + 8] ; xor ecx, ecx ; mov rsi, r10 ; mov qword ptr [rsp + 0x10], rax ; lea rax, [rsp + 0x20] ; mov dword ptr [rsp + 8], 8 ; mov dword ptr [rsp + 0xc], 0x30
write: ecx rax rcx rdi rdx rflags rsi rsp 
000a1d0a: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000a1d8a: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [r10] ; mov qword ptr [r8 + 8], r12 ; add dword ptr [r8 + 4], 1 ; or dword ptr [rdi + 0x74], 0x10 ; xor ecx, ecx ; mov rsi, rbp ; call 0x60fdc
write: ecx r8 rdi rflags rsi rsp 
000a1e6f: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000a1f3a: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r10 ; add dword ptr [rdx + 4], 1 ; lea rax, [rsp + 0xe0] ; or dword ptr [rbx + 0x74], 0x10 ; lea rdx, [rsp + 8] ; xor ecx, ecx ; mov rsi, r9 ; mov rdi, rbx ; mov qword ptr [rsp + 0x10], rax ; lea rax, [rsp + 0x20] ; mov dword ptr [rsp + 8], 0x10 ; mov dword ptr [rsp + 0xc], 0x30 ; mov qword ptr [rsp + 0x18], rax
write: ecx rax rdi rdx rflags rsi rsp 
000a2043: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000a20bb: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov qword ptr [r8 + 8], rbp ; add dword ptr [r8 + 4], 1 ; or dword ptr [rbx + 0x74], 0x10 ; xor ecx, ecx ; mov rsi, r10 ; mov rdi, rbx ; call 0x60fdc
write: ecx r8 rdi rflags rsi rsp 
000a2197: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000a2294: RLP; mov rdi, rsp ; mov esi, 1 ; call 0x73bdc
write: esi rdi rsp 
000a22a5: RLP; mov rsi, r13 ; mov rdi, rsp ; xor ecx, ecx ; xor edx, edx ; call 0x71d5c
write: ecx edx rdi rflags rsi rsp 
000a22b8: RLP; mov rdx, r12 ; mov rsi, rbp ; mov rdi, rsp ; xor ecx, ecx ; or dword ptr [rsp + 0x74], 0x10 ; call 0x60fdc
write: ecx rdi rdx rflags rsi rsp 
000a23bd: RLP; mov dword ptr [rsp + 8], 1 ; mov dword ptr [rsp], 0 ; xor r8d, r8d ; lea rdx, [rsp + 0x38] ; lea rsi, [rsp + 0x40] ; lea r9, [rsp + 0x30] ; mov rcx, qword ptr [rsp + 0x18] ; mov rdi, qword ptr [r13] ; call r12
write: r8d r9 rcx rdi rdx rflags rsi rsp 
000a2b7d: RLP; mov rdi, rax ; call 0xa2adc
write: rdi rsp 
000a2bb4: RLP; mov rsi, rbx ; mov rdi, rax ; call 0xa2abc
write: rdi rsi rsp 
000a3125: RLP; mov r14, qword ptr [rsp + 0x98] ; mov ecx, dword ptr [rsp + 0x2c] ; mov r8d, r12d ; mov edx, dword ptr [rsp + 0x58] ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, rbp ; mov qword ptr [rsp], rax ; mov r9, r14 ; call 0xa2e7c
write: ecx edx r14 r8d r9 rdi rsi rsp 
000a3421: RLP; mov rdx, qword ptr [rsp + 0x40] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x38] ; mov qword ptr [rsp + 0x98], rax ; call 0xa2dac
write: rdi rdx rsi rsp 
000a346d: RLP; lea rdx, [rip + 0x2c8640] ; lea rsi, [rip - 0x83f] ; mov rdi, rbx ; call 0xa2f3c
write: rdi rdx rsi rsp 
000a3b24: RLP; mov rdi, rbp ; mov rbx, rax ; call 0x856dc
write: rbx rdi rsp 
000a3c7d: RLP; lea rdx, [rax + 1] ; add rax, 0x1f ; mov rsi, r15 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0x1f] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: r15 rax rdi rip rsp 
write: rax rdi rdx rflags rsi rsp 
000a3ca1: RLP; lea rsi, [rip + 0x923bd] ; mov rdx, rax ; mov rbx, rax ; mov rcx, r12 ; xor eax, eax ; mov rdi, r15 ; call 0x693dc
write: eax rbx rcx rdi rdx rflags rsi rsp 
000a4441: RLP; mov rdi, rbx ; call 0x853ec
write: rdi rsp 
000a444d: RLP; xor esi, esi ; xor edx, edx ; mov rdi, rbx ; mov qword ptr [rip + 0x2c7671], rax ; call 0xa49fc
write: edx esi rdi rflags rsp 
000a4645: RLP; mov eax, dword ptr [rbx + 0x14] ; lea rdi, [rip + 0x2c74bd] ; lea esi, [rax + 0x76c] ; call 0xa37ec
write: eax esi rdi rsp 
000a4a54: RLP; mov rdi, qword ptr [rip + 0x2c5d09] ; call 0x1f46c
write: rdi rsp 
000a4b06: RLP; mov rbx, qword ptr [rsp + 0x48] ; cmp eax, -1 ; mov rdi, rbx ; je 0xa4a4b
write: rbx rdi rflags 
000a4ce8: RLP; mov rdi, qword ptr [rsp + 0x48] ; jmp 0xa4a4b
write: rdi 
000a55a4: RLP; mov rdi, qword ptr [rsp + 0x18] ; sub rdi, rax ; mov rax, rdi ; js 0xa4cdc
read: rax rdi rflags 
write: rax rdi rflags 
000a5855: RLP; mov rdi, rbx ; lea r12, [rax + 1] ; call 0x856dc
write: r12 rdi rsp 
000a5865: RLP; lea r14, [rax + 1] ; lea rdx, [rsp + 0x18] ; lea rdi, [rip + 0x9086e] ; lea r13, [r14 + r12] ; mov rsi, r13 ; call 0xa49fc
write: r13 r14 rdi rdx rsi rsp 
000a58b5: RLP; mov rsi, rbx ; mov rdx, r14 ; mov rdi, rax ; call 0x8e3dc
write: rdi rdx rsi rsp 
000a5e40: RLP; lea rdi, [rsp + 0x18] ; xor esi, esi ; mov rdx, rbp ; call 0xa25bc
write: esi rdi rdx rflags rsp 
000a5e71: RLP; mov rdx, qword ptr [rip + 0x2c5cdc] ; mov r8, qword ptr [rip + 0x2c5ccd] ; mov rdi, rdx ; shl rdi, 4 ; add rdi, r8 ; cmp rdi, qword ptr [rip + 0x2c5cdc] ; jne 0xa5c1a
read: r8 rdi rdx rflags 
write: r8 rdi rdx rflags 
000a5ead: RLP; mov rbx, qword ptr [rip + 0x2c5cb8] ; mov qword ptr [r15], rax ; mov rdi, rbx ; call 0x856dc
write: rbx rdi rsp 
000a5ec3: RLP; lea rdi, [rbx + rax + 1] ; call 0xa3b5c
write: rdi rsp 
000a64ed: RLP; mov rdi, qword ptr [rbp - 0x158] ; call 0x1f46c
write: rdi rsp 
000a64fd: RLP; mov r14d, dword ptr [r13] ; mov rdi, r13 ; and r14d, 0x20 ; je 0xa652e
write: r14d rdi rflags 
000a6560: RLP; lea rsi, [rbp - 0x140] ; mov rdi, r12 ; call 0xa2c3c
write: rdi rsi rsp 
000a6da6: RLP; mov r9, qword ptr [rsp + 0x30] ; mov rsi, qword ptr [rsp + 0x68] ; mov rcx, rbp ; mov rdx, rax ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r9 ; call 0x8bd4c
write: r9 rcx rdi rdx rsi rsp 
000a747d: RLP; mov r9, qword ptr [rsp + 0x30] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, r12 ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r9 ; call 0x8bd4c
write: r9 rcx rdi rdx rsi rsp 
000a7515: RLP; mov r9, qword ptr [rsp + 0x30] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, r12 ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r9 ; call 0x8bd4c
write: r9 rcx rdi rdx rsi rsp 
000a7573: RLP; test eax, eax ; mov eax, 1 ; cmove eax, dword ptr [rsp + 0x20] ; mov dword ptr [rsp + 0x20], eax ; mov rax, qword ptr [rsp] ; mov r12, qword ptr [rsp + 0x68] ; mov r9, qword ptr [rax + r14*8 + 0x40] ; mov rdi, r9 ; mov qword ptr [rsp + 0x30], r9 ; call 0x856dc
write: eax r12 r9 rax rdi rflags rsp 
000a75a2: RLP; mov r9, qword ptr [rsp + 0x30] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, r12 ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r9 ; call 0x8bd4c
write: r9 rcx rdi rdx rsi rsp 
000a7f42: RLP; mov r8, qword ptr [rsp + 0x28] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, rbx ; mov r15, rax ; mov rdi, r8 ; call 0x8bd4c
write: r15 r8 rcx rdi rdx rsi rsp 
000a7fd6: RLP; mov r8, qword ptr [rsp + 0x38] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, rbx ; mov qword ptr [rsp + 0x30], rax ; mov rdi, r8 ; call 0x8bd4c
write: r8 rcx rdi rdx rsi rsp 
000a802c: RLP; test eax, eax ; mov eax, 1 ; cmove eax, dword ptr [rsp + 0x40] ; mov dword ptr [rsp + 0x20], r14d ; mov dword ptr [rsp + 0x40], eax ; mov eax, dword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp] ; mov rbx, qword ptr [rsp + 0x68] ; add eax, 0x2000e ; movzx eax, ax ; lea r15, [rdi + rax*8] ; mov r8, qword ptr [r15 + 0x40] ; mov rdi, r8 ; mov qword ptr [rsp + 0x30], r8 ; call 0x856dc
write: eax r15 r8 rbx rdi rflags rsp 
000a806f: RLP; mov r8, qword ptr [rsp + 0x30] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, rbx ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r8 ; call 0x8bd4c
write: r8 rcx rdi rdx rsi rsp 
000a818e: RLP; mov r8, qword ptr [rsp + 0x28] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, r15 ; mov qword ptr [rsp + 0x20], rax ; mov rdi, r8 ; call 0x8bd4c
write: r8 rcx rdi rdx rsi rsp 
000a8622: RLP; mov rsi, qword ptr [rsp + 0x68] ; mov rcx, rbp ; mov rdx, rax ; mov rdi, r15 ; mov qword ptr [rsp + 0x20], rax ; call 0x8bd4c
write: rcx rdi rdx rsi rsp 
000a8d5d: RLP; mov rcx, rbp ; mov rdx, rax ; mov rsi, rbx ; mov rdi, r15 ; mov qword ptr [rsp + 0x28], rax ; call 0x8bd4c
write: rcx rdi rdx rsi rsp 
000a8dc7: RLP; mov r10, qword ptr [rsp + 0x30] ; mov rcx, rbp ; mov rdx, rax ; mov rsi, r12 ; mov qword ptr [rsp + 0x28], rax ; mov rdi, r10 ; call 0x8bd4c
write: r10 rcx rdi rdx rsi rsp 
000a9038: RLP; mov r8, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x68] ; mov rcx, rbp ; mov rdx, rax ; mov r15, rax ; mov rdi, r8 ; call 0x8bd4c
write: r15 r8 rcx rdi rdx rsi rsp 
000a9088: RLP; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rip + 0x2be3d8] ; mov rcx, rbp ; mov rdx, rax ; mov r15, rax ; call 0x8bd4c
write: r15 rcx rdi rdx rsi rsp 
000a9298: RLP; mov rsi, qword ptr [rsp + 0x68] ; mov rdi, qword ptr [rip + 0x2be1d0] ; mov rcx, rbp ; mov rdx, rax ; mov r15, rax ; call 0x8bd4c
write: r15 rcx rdi rdx rsi rsp 
000a9fc8: RLP; mov edx, r15d ; mov r13, rax ; xor eax, eax ; sub edx, r13d ; mov r11, qword ptr [rsp + 0x50] ; cmovns eax, edx ; add eax, r13d ; cdqe ; mov rdi, rax ; mov qword ptr [rsp + 0x58], rax ; mov rax, qword ptr [rsp + 8] ; sub rax, r11 ; cmp rdi, rax ; mov qword ptr [rsp + 0x50], rax ; jae 0xa9e04
read: eax edx r11 r13d r15d rax rdi rflags 
write: eax edx r11 r13 rax rdi rflags 
000aa03c: RLP; mov r11, qword ptr [rsp + 0x60] ; mov r8, qword ptr [rsp + 0x38] ; mov rcx, qword ptr [rsp + 0x20] ; mov r9, r12 ; mov rsi, qword ptr [rsp + 0x50] ; mov rdx, r14 ; mov rdi, r15 ; mov qword ptr [rsp + 0x60], r11 ; movsxd r13, r13d ; call 0xa9c3c
write: r11 r13 r8 r9 rcx rdi rdx rsi rsp 
000aa50b: RLP; mov rcx, rax ; shr rax, 0x3f ; mov r11, qword ptr [rsp + 0x58] ; mov rsi, rax ; mov rax, qword ptr [rsp + 0x28] ; mov r10d, dword ptr [rsp + 0x50] ; lea r13, [rax + 0x16] ; nop dword ptr [rax] ; movabs rax, 0x6666666666666667 ; mov rdi, rcx ; imul rcx ; mov rax, rcx ; sar rax, 0x3f ; sar rdx, 2 ; sub rdx, rax
write: r10d r11 r13 rax rcx rdi rdx rflags rsi 
000aa74f: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; add rbp, r15 ; mov r11, qword ptr [rsp + 0x58] ; mov r8, qword ptr [rsp + 0x50] ; movzx eax, word ptr [rax + 0x18] ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; mov eax, dword ptr [rsp + 0x10] ; test eax, eax ; je 0xab4d3
write: eax r11 r14 r8 rax rbp rdi rflags 
000aac80: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; add rbp, r15 ; mov r11, qword ptr [rsp + 0x60] ; mov r8, qword ptr [rsp + 0x58] ; mov eax, dword ptr [rax + 0x10] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x2000e ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; mov r15d, dword ptr [rsp + 0x10] ; test r15d, r15d ; je 0xab4d3
write: eax r11 r14 r15d r8 rax rbp rdi rflags 
000aada9: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; add rbp, r15 ; mov r11, qword ptr [rsp + 0x60] ; mov r8, qword ptr [rsp + 0x58] ; mov eax, dword ptr [rax + 0x10] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x2001a ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; mov r10d, dword ptr [rsp + 0x10] ; test r10d, r10d ; je 0xab4d3
write: eax r10d r11 r14 r8 rax rbp rdi rflags 
000aaed9: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; add rbp, r15 ; mov r11, qword ptr [rsp + 0x60] ; mov r8, qword ptr [rsp + 0x58] ; mov eax, dword ptr [rax + 0x18] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x20007 ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; mov eax, dword ptr [rsp + 0x10] ; test eax, eax ; je 0xab4d3
write: eax r11 r14 r8 rax rbp rdi rflags 
000ab842: RLP; mov r14, rax ; xor eax, eax ; mov r11, qword ptr [rsp + 0x68] ; sub r15d, r14d ; cmovns eax, r15d ; add eax, r14d ; cdqe ; mov rdi, rax ; mov qword ptr [rsp + 0x50], rax ; mov rax, qword ptr [rsp + 8] ; sub rax, r11 ; cmp rdi, rax ; jae 0xa9e04
read: eax r11 r14d r15d rax rdi rflags 
write: eax r11 r14 r15d rax rdi rflags 
000aba2e: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x58] ; mov r11, qword ptr [rsp + 0x60] ; mov eax, dword ptr [rax + 0x18] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x20007 ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; jmp 0xaaf04
write: eax r11 r14 r8 rax rdi rflags 
000aba7a: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x50] ; mov r11, qword ptr [rsp + 0x58] ; movzx eax, word ptr [rax + 0x18] ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; jmp 0xaa76f
write: eax r11 r14 r8 rax rdi 
000abaef: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x58] ; mov r11, qword ptr [rsp + 0x60] ; mov eax, dword ptr [rax + 0x10] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x2001a ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; jmp 0xaadd4
write: eax r11 r14 r8 rax rdi rflags 
000abb3b: RLP; mov rax, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x58] ; mov r11, qword ptr [rsp + 0x60] ; mov eax, dword ptr [rax + 0x10] ; mov dword ptr [rsp + 0x50], eax ; add eax, 0x2000e ; movzx eax, ax ; mov r14, qword ptr [rdi + rax*8 + 0x40] ; jmp 0xaacab
write: eax r11 r14 r8 rax rdi rflags 
000ac188: RLP; mov edx, r15d ; mov r12, rax ; xor eax, eax ; sub edx, r12d ; cmovns eax, edx ; add eax, r12d ; cdqe ; mov rdi, rax ; mov qword ptr [rbp - 0x128], rax ; mov rax, qword ptr [rbp - 0xd8] ; sub rax, r14 ; cmp rdi, rax ; mov qword ptr [rbp - 0x130], rax ; jae 0xabe4c
read: eax edx r12d r14 r15d rax rdi rflags 
write: eax edx r12 rax rdi rflags 
000ac20a: RLP; mov r11d, dword ptr [rbp - 0x138] ; mov r9, qword ptr [rbp - 0xf0] ; mov r8, qword ptr [rbp - 0x108] ; mov rdi, r15 ; mov rcx, qword ptr [rbp - 0xe8] ; mov rdx, qword ptr [rbp - 0x120] ; movsxd r12, r12d ; mov rsi, qword ptr [rbp - 0x130] ; mov dword ptr [rbp - 0x138], r11d ; lea r12, [r15 + r12*4] ; call 0xabc5c
write: r11d r12 r8 r9 rcx rdi rdx rsi rsp 
000ac302: RLP; mov r12, rax ; mov eax, r15d ; mov esi, 0 ; sub eax, r12d ; cmovns esi, eax ; lea r15d, [rsi + r12] ; movsxd rsi, r15d ; mov rdi, rsi ; mov qword ptr [rbp - 0x120], rsi ; mov rsi, qword ptr [rbp - 0xd8] ; sub rsi, r14 ; cmp rdi, rsi ; jae 0xabe4c
read: eax esi r12d r14 r15d rax rdi rflags rsi 
write: eax esi r12 r15d rdi rflags rsi 
000ac9d6: RLP; mov rcx, rax ; shr rax, 0x3f ; mov r10d, dword ptr [rbp - 0x120] ; mov rsi, rax ; mov rax, qword ptr [rbp - 0xf8] ; mov r11d, dword ptr [rbp - 0x128] ; movabs rdi, 0x6666666666666667 ; lea r8, [rax + 0x58] ; nop word ptr [rax + rax] ; mov rax, rcx ; imul rdi ; mov rax, rcx ; sar rax, 0x3f ; sar rdx, 2 ; sub rdx, rax
read: rax rcx rdi rdx 
write: r10d r11d r8 rax rcx rdi rdx rflags rsi 
000ace75: RLP; mov r9, rax ; lea rax, [rax*4 + 0x22] ; mov r8, qword ptr [rbp - 0xf0] ; mov rcx, qword ptr [rbp - 0x110] ; mov rsi, qword ptr [rbp - 0xf8] ; mov rdx, r9 ; and rax, 0xfffffffffffffff0 ; mov qword ptr [rbp - 0x128], r9 ; sub rsp, rax ; lea r12, [rsp + 0xf] ; and r12, 0xfffffffffffffff0 ; mov rdi, r12 ; call 0xa176c
write: r12 r8 r9 rax rcx rdi rdx rflags rsi rsp 
000acebb: RLP; mov r9, qword ptr [rbp - 0x128] ; mov edx, r15d ; xor eax, eax ; sub edx, r9d ; cmovns eax, edx ; add eax, r9d ; cdqe ; mov rdi, rax ; mov qword ptr [rbp - 0x128], rax ; mov rax, qword ptr [rbp - 0xd8] ; sub rax, r14 ; cmp rdi, rax ; jae 0xabe4c
read: eax edx r14 r15d r9d rax rdi rflags 
write: eax edx r9 rax rdi rflags 
000add6d: RLP; mov rax, qword ptr [rbp - 0xe8] ; mov eax, dword ptr [rax + 0x10] ; mov dword ptr [rbp - 0x120], eax ; add eax, 0x20042 ; mov rdi, qword ptr [rbp - 0x100] ; movzx eax, ax ; mov r11d, dword ptr [rbp - 0x128] ; mov rcx, qword ptr [rbp - 0x130] ; mov rsi, qword ptr [rdi + rax*8 + 0x40] ; jmp 0xacd87
write: eax r11d rax rcx rdi rflags rsi 
000ae0c4: RLP; lea rdi, [rax + 1] ; xor esi, esi ; mov qword ptr [rbx - 0x20], rdi ; call 0x9023c
read: esi rdi rip rsp 
write: esi rdi rflags rsp 
000ae0d7: RLP; lea rdi, [rax + 1] ; xor esi, esi ; mov rdx, rdi ; sub rdx, rbp ; add rdx, 3 ; not rdx ; and edx, 3 ; add rdi, rdx ; mov qword ptr [rbx - 0x18], rdi ; call 0x9488c
read: edx esi rbp rdi rdx rip rsp 
write: edx esi rdi rdx rflags rsp 
000ae0fd: RLP; lea rdi, [rax + 4] ; xor esi, esi ; mov qword ptr [rbx - 0x10], rdi ; call 0x9488c
read: esi rdi rip rsp 
write: esi rdi rflags rsp 
000ae8e6: RLP; mov rdi, qword ptr [rbx + 0x18] ; call 0x1f46c
write: rdi rsp 
000ae8f3: RLP; mov rdi, qword ptr [rbx + 0x20] ; call 0x1f46c
write: rdi rsp 
000ae900: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000ae93e: RLP; mov rdx, qword ptr [rsp + 0x18] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x50] ; mov qword ptr [rbx + 0x10], rdx ; mov rdx, qword ptr [rsp + 0x20] ; mov qword ptr [rbx], rsi ; mov qword ptr [rbx + 8], rdi ; mov qword ptr [rbx + 0x18], rdx ; add rsp, 0xd0 ; pop rbx ; ret
read: rdi rdx rsi rsp 
write: rbx rdi rdx rflags rsi rsp 
000ae98e: RLP; mov rdx, qword ptr [rsp + 0x18] ; mov rsi, qword ptr [rsp + 0x48] ; mov rdi, qword ptr [rsp + 0x50] ; mov qword ptr [rbx + 0x28], 0 ; mov qword ptr [rbx + 0x30], 0 ; mov qword ptr [rbx + 0x38], 0 ; mov qword ptr [rbx + 0x10], rdx ; mov rdx, qword ptr [rsp + 0x20] ; mov qword ptr [rbx], rsi ; mov qword ptr [rbx + 8], rdi ; mov qword ptr [rbx + 0x40], 0 ; mov qword ptr [rbx + 0x18], rdx ; movsxd rdx, dword ptr [rsp + 0xa0] ; mov qword ptr [rbx + 0x20], rdx ; add rsp, 0xd0
read: rdi rdx rsi rsp 
write: rdi rdx rflags rsi rsp 
000af0b6: RLP; lea rdi, [rbx + 0x13] ; lea rdx, [rax + 1] ; mov rsi, rbp ; call 0x88fbc
write: rdi rdx rsi rsp 
000af1ef: RLP; mov rdi, qword ptr [rbp] ; call 0xaeb7c
write: rdi rsp 
000af2c9: RLP; mov rsi, qword ptr [rsp + 8] ; mov rdi, r12 ; mov qword ptr [rsi + r13*8], rax ; add r13, 1 ; call 0xaebbc
write: r13 rdi rflags rsi rsp 
000af318: RLP; mov rax, qword ptr [rsp + 0x18] ; mov rcx, qword ptr [rsp + 8] ; mov qword ptr [rax], rcx ; mov rdi, r12 ; call 0xaeb7c
write: rax rcx rdi rsp 
000af67d: RLP; lea rsi, [rip + 0x86abc] ; mov rdi, r12 ; mov r13, qword ptr [r14] ; mov r15, rax ; call 0x104d8c
write: r13 r15 rdi rsi rsp 
000af758: RLP; mov rcx, qword ptr [rbp - 0x70] ; mov rdx, qword ptr [rbp - 0x60] ; mov rsi, qword ptr [rbp - 0x58] ; mov rdi, qword ptr [rbp - 0x68] ; call r14
write: rcx rdi rdx rsi rsp 
000afa73: RLP; mov rdx, r14 ; add rdx, qword ptr [rip + 0x2b93e7] ; mov r9, qword ptr [rsp + 0x20] ; mov r8, r15 ; mov rcx, r12 ; mov esi, ebp ; mov rdi, qword ptr [rsp + 0x18] ; mov rax, qword ptr [rsp + 0x10] ; mov qword ptr [rsp], rdx ; mov rdx, qword ptr [rsp + 0x28] ; call rax
write: esi r8 r9 rax rcx rdi rdx rflags rsp 
000afaa3: RLP; mov rdi, qword ptr [rsp + 0x38] ; mov rsi, rbx ; mov r9, rdi ; nop word ptr [rax + rax] ; cmp rdi, rsi ; jle 0xafaec
read: rbx rdi rflags rsi 
write: r9 rdi rflags rsi 
000afd01: RLP; movsxd rdx, dword ptr [rbx] ; movsxd rbp, eax ; mov r13, qword ptr [rsp + 8] ; mov rdi, r12 ; mov rsi, r13 ; cmp ebp, edx ; cmovle rdx, rbp ; shl rdx, 2 ; call 0x8e3dc
write: r13 rbp rdi rdx rflags rsi rsp 
000afd25: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000aff10: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2bbd1e] ; lea rdx, [rip + 0x2ba84f] ; lea rsi, [rip + 0x2bbd30] ; lea rdi, [rip + 0x7e9] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000b05a0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2bb76e] ; lea rcx, [rip + 0x2bb75f] ; lea rdx, [rip + 0x2bb768] ; lea rsi, [rip + 0x55aa9] ; lea rdi, [rip + 0x85b81] ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; call 0x1053dc
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000b068e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2bb680] ; lea rcx, [rip + 0x2bb671] ; lea rdx, [rip + 0x2bb67a] ; lea rsi, [rip + 0x559bb] ; lea rdi, [rip + 0x85a9c] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000b076a: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2bb59c] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x2bb59b] ; lea r9, [rip + 0x2bb58c] ; lea rdx, [rip + 0x558d5] ; lea rsi, [rip + 0x859ad] ; lea rdi, [rip + 0x8599b] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; call 0x1055fc
write: r8 r9 rcx rdi rdx rflags rsi rsp 
000b0b9a: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000b10cb: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rip + 0x2b7d7c] ; add rax, qword ptr fs:[0] ; lea rbx, [r12 + r14 - 1] ; mov r13d, r14d ; mov qword ptr [rsp + 8], rax ; nop word ptr [rax + rax] ; mov byte ptr [rbx], 0xff ; mov rdx, rbp ; mov esi, r13d ; mov rdi, r12 ; call 0x76abc
write: esi r13d rax rbx rdi rdx rflags rsp 
000b1730: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2ba65e] ; lea rdx, [rip + 0x2b904f] ; lea rsi, [rip + 0x2ba670] ; lea rdi, [rip + 0x579] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000b1b50: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2ba32e] ; lea rcx, [rip + 0x2ba31f] ; lea rdx, [rip + 0x2ba328] ; lea rsi, [rip + 0x54589] ; lea rdi, [rip + 0x84682] ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; call 0x1053dc
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000b1c3e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2ba240] ; lea rcx, [rip + 0x2ba231] ; lea rdx, [rip + 0x2ba23a] ; lea rsi, [rip + 0x5449b] ; lea rdi, [rip + 0x8459d] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000b1d1a: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2ba15c] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x2ba15b] ; lea r9, [rip + 0x2ba14c] ; lea rdx, [rip + 0x543b5] ; lea rsi, [rip + 0x844ae] ; lea rdi, [rip + 0x844b9] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; call 0x1055fc
write: r8 r9 rcx rdi rdx rflags rsi rsp 
000b1eaa: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000b2403: RLP; mov rdi, qword ptr [rsp + 8] ; mov edx, 0xffffffff ; cmp rax, rdx ; cmova rax, rdx ; cmp rdi, rbx ; mov dword ptr [rbp + 0x10], eax ; je 0xb23c3
read: eax rax rbx rdi rdx rflags 
write: edx rax rdi rflags 
000b264b: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rip + 0x2b67fc] ; add rax, qword ptr fs:[0] ; lea rbx, [r12 + r14 - 1] ; mov r13d, r14d ; mov qword ptr [rsp + 8], rax ; nop word ptr [rax + rax] ; mov byte ptr [rbx], 0xff ; mov rdx, rbp ; mov esi, r13d ; mov rdi, r12 ; call 0x76abc
write: esi r13d rax rbx rdi rdx rflags rsp 
000b292f: RLP; mov ecx, 0x3d ; mov r8d, eax ; xor r10d, r10d ; xor edx, edx ; mov rsi, qword ptr [rsp + 8] ; or rdi, 0xffffffffffffffff ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xb2968
read: eax ecx edx r10d rax rdi rflags 
write: eax ecx edx r10d r8d rbx rdi rflags rsi 
000b29d0: RLP; mov ecx, 0x3d ; mov r8d, eax ; xor r10d, r10d ; movsxd rdx, dword ptr [rsp + 0xc] ; mov rsi, qword ptr [rsp] ; mov eax, ecx ; movsxd rdi, dword ptr [rsp + 8] ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xb2a0c
write: eax ecx r10d r8d rbx rdi rdx rflags rsi 
000b2c45: RLP; mov rdi, rsp ; mov rsi, rsp ; call 0xb2dac
write: rdi rsi rsp 
000b2d6a: RLP; mov qword ptr [rsp], rax ; mov eax, 0x22 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000b2dda: RLP; mov qword ptr [rsp], rax ; mov eax, 0x23 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000b2f78: RLP; mov rdx, qword ptr [rax + 0x88] ; mov rdi, rbx ; mov dword ptr [rdx], 0 ; mov dword ptr [rdx + 4], 0 ; mov qword ptr [rdx + 8], 0 ; call 0x7a98c
write: rdi rdx rsp 
000b327c: RLP; mov rdx, rbp ; mov rsi, rbx ; mov rdi, rsp ; call 0xb31fc
write: rdi rdx rsi rsp 
000b398f: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000b39d2: RLP; mov rcx, rax ; mov rdi, r15 ; mov qword ptr [rbp - 0x38], rcx ; call 0x856dc
write: rcx rdi rsp 
000b3a42: RLP; lea rcx, [rax - 1] ; mov qword ptr [rbp - 0x40], rax ; mov byte ptr [rax - 1], 0x2f ; lea rax, [rbx - 0x10] ; mov byte ptr [rbp - 0x59], 0 ; mov qword ptr [rbp - 0x78], 0 ; mov qword ptr [rbp - 0x50], rcx ; mov qword ptr [rbp - 0x48], 0 ; mov qword ptr [rbp - 0x68], rax ; mov esi, 0x3a ; mov rdi, r14 ; call 0x9045c
write: esi rax rcx rdi rsp 
000b3aa4: RLP; mov r15, rax ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, r15 ; call 0xb31fc
write: r15 rdi rdx rsi rsp 
000b3b1b: RLP; mov rdi, qword ptr [rbp - 0x70] ; call 0x1f46c
write: rdi rsp 
000b42dc: RLP; mov edx, 0x1000 ; mov rsi, rbx ; mov rdi, r12 ; call 0xd832c
write: edx rdi rsi rsp 
000b4310: RLP; mov rdi, rax ; mov r12, rax ; call 0x856dc
write: r12 rdi rsp 
000b431f: RLP; lea rcx, [rax + 0x1f] ; lea rdx, [rax + 1] ; mov rsi, r12 ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: r12 rcx rdi rip rsp 
write: rcx rdi rdx rflags rsi rsp 
000b4343: RLP; lea rdx, [rip + 0x81f3c] ; mov rcx, rax ; mov esi, 0x1000 ; mov rdi, rbx ; xor eax, eax ; call 0x5227c
write: eax esi rcx rdi rdx rflags rsp 
000b4360: RLP; xor esi, esi ; mov rdi, rbx ; call 0xd6b3c
write: esi rdi rflags rsp 
000b4b5a: RLP; mov r12, rax ; mov rdi, r14 ; call 0x856dc
write: r12 rdi rsp 
000b4b69: RLP; lea rcx, [r12 + rax + 0x1a] ; mov rdx, r12 ; mov rsi, rbx ; mov r15, rax ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; mov rdi, rsp ; call 0x892cc
write: r15 rcx rdi rdx rflags rsi rsp 
000b4b8a: RLP; mov edx, 0x5f36 ; movabs rcx, 0x565f5849534f502f ; lea rdi, [rax + 0xa] ; mov word ptr [rax + 8], dx ; lea rdx, [r15 + 1] ; mov rsi, r14 ; mov qword ptr [rax], rcx ; call 0x8e3dc
write: edx rcx rdi rdx rsi rsp 
000b58f0: RLP; mov byte ptr [rax], 0x2f ; mov rsi, qword ptr [rbx + r14*8] ; lea rdi, [rax + 1] ; mov rdx, rbp ; call 0x8e3dc
write: rdi rdx rsi rsp 
000b5907: RLP; mov rdi, qword ptr [rbx + r14*8] ; call 0x1f46c
write: rdi rsp 
000b592f: RLP; lea rbp, [rax + 1] ; lea rdi, [rbp + r15] ; call 0x1f3cc
write: rbp rdi rsp 
000b5a34: RLP; cmp qword ptr [rbp], rbx ; mov rdi, qword ptr [rbp + 8] ; ja 0xb5a1c
write: rdi rflags 
000b5b24: RLP; xor esi, esi ; and r15d, 0x40 ; mov rdi, rbx ; sete sil ; mov qword ptr [rbp - 0x438], rax ; mov qword ptr [rbp - 0x240], 0 ; mov qword ptr [rbp - 0x238], 0x40 ; call 0xb5a5c
write: esi r15d rdi rflags rsp sil 
000b5d59: RLP; lea rdi, [rax + 1] ; mov r14, rax ; call 0x1f3cc
write: r14 rdi rsp 
000b5d69: RLP; test rax, rax ; mov rdi, rax ; mov qword ptr [r15 + r13*8 + 0x10], rax ; je 0xb5fb7
write: rdi rflags 
000b5dd3: RLP; mov rdi, qword ptr [rbp - 0x460] ; lea rdx, [rax + 1] ; mov rsi, r14 ; call 0x8e3dc
write: rdi rdx rsi rsp 
000b5e31: RLP; mov rbx, rax ; mov rax, qword ptr [rbp - 0x438] ; lea rdi, [r13 + rax + 0x212] ; add rdi, rbx ; cmp rdi, 0x1000 ; ja 0xb6231
read: rax rbx rdi rflags 
write: rax rbx rdi rflags 
000b5e95: RLP; mov rsi, qword ptr [rbp - 0x400] ; lea rdi, [rax + 1] ; lea rdx, [rbx + 1] ; mov byte ptr [rax], 0x2f ; call 0x8e3dc
write: rdi rdx rsi rsp 
000b60e6: RLP; mov rdi, rbx ; jmp 0xb6096
write: rdi 
000b60fe: RLP; lea rdi, [rax + 1] ; mov r12, rax ; call 0x1f3cc
write: r12 rdi rsp 
000b610e: RLP; test rax, rax ; mov rdi, rax ; mov qword ptr [r15 + r13*8 + 0x10], rax ; je 0xb5fb7
write: rdi rflags 
000b679a: RLP; mov esi, r13d ; mov rdi, rbx ; mov qword ptr [rbp - 0x1c0], rax ; call 0xb57fc
write: esi rdi rsp 
000b6886: RLP; mov rsi, qword ptr [rbp - 0x1d0] ; mov rdx, r15 ; mov rdi, rax ; call 0x8e3dc
write: rdi rdx rsi rsp 
000b689c: RLP; mov rdx, qword ptr [rbp - 0x1a8] ; mov esi, dword ptr [rbp - 0x1c8] ; mov rcx, r12 ; mov rdi, qword ptr [rbp - 0x1b8] ; call 0xb633c
write: esi rcx rdi rdx rsp 
000b6b48: RLP; mov qword ptr [r14 + rbx - 0x10], rax ; mov rdi, qword ptr [r12 + 8] ; mov rax, qword ptr [rdi + rbx - 0x10] ; test rax, rax ; je 0xb7239
write: rax rdi rflags 
000b6b76: RLP; mov byte ptr [rax], 0x2f ; mov byte ptr [rax + 1], 0 ; mov rdi, qword ptr [r12 + 8] ; mov qword ptr [rdi + rbx - 8], 0 ; add qword ptr [r12], 1 ; mov dword ptr [r12 + 0x18], r13d ; jmp 0xb6939
write: rdi rflags 
000b6cda: RLP; mov rbx, rax ; mov rax, qword ptr [rbp - 0x1d8] ; lea rdi, [r14 + rax] ; cmp rdi, 0x1000 ; ja 0xb7eb6
read: rax rdi rflags 
write: rax rbx rdi rflags 
000b702a: RLP; mov rdx, qword ptr [rbp - 0x1c0] ; lea rsi, [rax + 2] ; mov qword ptr [rbp - 0x1a8], rax ; mov rdi, rdx ; call 0x1f3ac
write: rdi rdx rsi rsp 
000b732b: RLP; mov rbx, rax ; mov rax, qword ptr [rip + 0x2b1b2f] ; mov qword ptr [rbp - 0x218], rax ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rbp - 0x200], eax ; mov rax, qword ptr [rbp - 0x1d8] ; lea rdi, [rbx + rax] ; cmp rdi, 0x1000 ; ja 0xb7f7a
read: eax rax rdi rflags 
write: eax rax rbx rdi rflags 
000b7546: RLP; mov qword ptr [r14], rax ; mov rdi, qword ptr [r12 + 8] ; cmp qword ptr [rdi + rbx - 0x10], 0 ; jne 0xb6b82
write: rdi rflags 
000b756f: RLP; mov rdi, r12 ; call 0xb59fc
write: rdi rsp 
000b75a8: RLP; mov rdi, r12 ; call 0xb59fc
write: rdi rsp 
000b76b7: RLP; mov rdi, qword ptr [rbp - 0x210] ; mov r14, rax ; test rdi, rdi ; je 0xb79d0
read: rax rdi rflags 
write: r14 rdi rflags 
000b775f: RLP; mov rbx, qword ptr [rbp - 0x1c0] ; mov rsi, qword ptr [rbp - 0x210] ; mov rdi, rax ; mov rdx, rbx ; add r14, rbx ; call 0x892cc
write: r14 rbx rdi rdx rflags rsi rsp 
000b77ee: RLP; add rax, 1 ; mov rsi, rax ; mov eax, 0x14 ; cmove rsi, rax ; mov rax, rsp ; lea rdx, [rsi + 0x1e] ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; lea rcx, [rsp + 0xf] ; mov qword ptr [rbp - 0x1f8], rcx ; and qword ptr [rbp - 0x1f8], 0xfffffffffffffff0 ; sub rax, rsp ; mov rdi, qword ptr [rbp - 0x1f8] ; add qword ptr [rbp - 0x1d8], rax ; xor ebx, ebx
write: eax ebx rax rcx rdi rdx rflags rsi rsp 
000b78b0: RLP; mov rdi, qword ptr [rbp - 0x1d8] ; add rdi, qword ptr [rbp - 0x1c0] ; mov r14, rax ; add rdi, rax ; cmp rdi, 0x1000 ; ja 0xb7f15
read: rax rdi rflags 
write: r14 rdi rflags 
000b7919: RLP; mov rcx, qword ptr [rbp - 0x1b8] ; mov rdx, qword ptr [rbp - 0x1c0] ; mov rdi, rax ; lea rsi, [rcx + 1] ; call 0x8e3dc
write: rcx rdi rdx rsi rsp 
000b79ee: RLP; mov rbx, rax ; mov rax, qword ptr [rip + 0x2b146c] ; mov qword ptr [rbp - 0x218], rax ; mov eax, dword ptr fs:[rax] ; mov dword ptr [rbp - 0x208], eax ; mov rax, qword ptr [rbp - 0x1d8] ; lea rdi, [rbx + rax] ; cmp rdi, 0x1000 ; ja 0xb7d73
read: eax rax rdi rflags 
write: eax rax rbx rdi rflags 
000b7c5b: RLP; lea rdx, [rax + 1] ; mov rax, qword ptr [rbp - 0x1d8] ; lea rdi, [rdx + rax] ; cmp rdi, 0x1000 ; ja 0xb7e34
read: rdi rflags 
write: rax rdi rdx rflags 
000b7cb8: RLP; mov rdi, qword ptr [rbp - 0x200] ; call 0x1f46c
write: rdi rsp 
000bb313: RLP; mov rdi, qword ptr [rbp - 0x48] ; mov ecx, r13d ; lea rdx, [rbx + rax] ; and ecx, 4 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; mov r8d, r13d ; mov rsi, rbx ; call 0xb9c2c
write: ecx r8d r9d rdi rdx rflags rsi rsp 
000bb553: RLP; mov r9, qword ptr [rbp - 0x68] ; mov rax, qword ptr [rbp - 0x58] ; mov rdi, qword ptr [rbp - 0x60] ; lea rdx, [r15 + r9*4] ; mov ecx, r13d ; xor r9d, r9d ; mov r8d, r13d ; and ecx, 4 ; mov rsi, r15 ; mov qword ptr [rsp], rax ; call 0xb841c
write: ecx r8d r9 r9d rax rdi rdx rflags rsi rsp 
000bb57f: RLP; mov rdi, r14 ; mov ebx, eax ; call 0x1f46c
write: ebx rdi rsp 
000bb58d: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
000bbdd9: RLP; mov rdi, qword ptr [rbx + 0x20] ; mov rsi, r15 ; mov qword ptr [rsp + 0x10], rax ; call 0x1f3ac
write: rdi rsi rsp 
000bbdee: RLP; mov rdi, qword ptr [rbx + 0x28] ; mov rsi, r14 ; mov qword ptr [rsp + 8], rax ; call 0x1f3ac
write: rdi rsi rsp 
000bbe03: RLP; mov rdi, qword ptr [rbx + 0x30] ; mov rsi, r14 ; mov r15, rax ; call 0x1f3ac
write: r15 rdi rsi rsp 
000bc707: RLP; lea rcx, [rsp + 0x60] ; lea rdx, [rsp + 0x50] ; mov esi, eax ; mov r13d, eax ; mov rdi, rcx ; mov qword ptr [rsp], rcx ; call 0x96b8c
write: esi r13d rcx rdi rdx rsp 
000bc8f1: RLP; mov rdx, qword ptr [rsp + 0x38] ; mov rdi, qword ptr [rsp + 0x28] ; mov esi, eax ; mov r13d, eax ; call 0x96b8c
write: esi r13d rdi rdx rsp 
000bd0b0: RLP; mov rdi, qword ptr [rbx + 8] ; call 0x1f46c
write: rdi rsp 
000bd0bd: RLP; mov rdi, qword ptr [rbx + 0x10] ; call 0x1f46c
write: rdi rsp 
000bd0ca: RLP; mov rdi, qword ptr [rbx + 0x18] ; call 0x1f46c
write: rdi rsp 
000bd0d7: RLP; mov rdi, qword ptr [rbx + 0x20] ; call 0x1f46c
write: rdi rsp 
000bd0e4: RLP; mov rdi, qword ptr [rbx + 0x28] ; call 0x1f46c
write: rdi rsp 
000bd0f1: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000bd191: RLP; mov rdi, qword ptr [rbx + 0x30] ; call 0x1f46c
write: rdi rsp 
000bd1b8: RLP; mov rdi, qword ptr [rbx + 0x38] ; call 0x1f46c
write: rdi rsp 
000bd1c5: RLP; mov rdi, qword ptr [rbx + 0x10] ; call 0x1f46c
write: rdi rsp 
000bd1d2: RLP; mov rdi, qword ptr [rbx + 0x48] ; call 0x1f46c
write: rdi rsp 
000bd1df: RLP; mov rdi, qword ptr [rbx + 0x40] ; call 0x1f46c
write: rdi rsp 
000bd1ec: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000bd211: RLP; mov rdi, qword ptr [rbx + 0x18] ; call 0x1f46c
write: rdi rsp 
000bd33e: RLP; mov rdi, qword ptr [r13 + 0x30] ; call 0x1f46c
write: rdi rsp 
000bd34b: RLP; mov rdi, qword ptr [r13 + 0x38] ; call 0x1f46c
write: rdi rsp 
000bd358: RLP; mov rdi, qword ptr [r13] ; call 0x1f46c
write: rdi rsp 
000bd365: RLP; mov rdi, qword ptr [r13 + 0x40] ; test rdi, rdi ; je 0xbd3d4
read: rdi rflags 
write: rdi rflags 
000bd3dd: RLP; mov rdi, qword ptr [r13 + 0x78] ; lea rax, [rip + 0x74c94] ; cmp rdi, rax ; je 0xbd3f6
read: rax rdi rflags 
write: rax rdi rflags 
000bd3f6: RLP; mov rdi, qword ptr [r13 + 0xd0] ; call 0x1f46c
write: rdi rsp 
000bd406: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000bd499: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
000bd4ce: RLP; mov rdi, qword ptr [r13 + 8] ; call 0x1f46c
write: rdi rsp 
000bd4db: RLP; mov rdi, r13 ; add r14, 8 ; call 0x1f46c
write: r14 rdi rflags rsp 
000bd562: RLP; mov rax, qword ptr [rbp + 8] ; mov rdi, qword ptr [rax + rbx + 8] ; add rbx, 0x20 ; call 0x1f46c
write: rax rbx rdi rflags rsp 
000bda48: RLP; mov rdi, qword ptr [rbx + 8] ; mov eax, dword ptr [rbx + 0x2c] ; lea rsi, [rdi + r13] ; sub eax, r14d ; movsxd rdx, eax ; call 0x88fbc
write: eax rdi rdx rflags rsi rsp 
000bdf86: RLP; mov r14d, eax ; mov rax, qword ptr [r12 + 8] ; mov r9d, dword ptr [rsp + 0x10] ; mov ecx, dword ptr [rsp + 0x18] ; mov r8d, r15d ; mov edx, r13d ; mov rdi, rbx ; mov esi, dword ptr [rax + rbp*4] ; call 0xbba3c
write: ecx edx esi r14d r8d r9d rax rdi rsp 
000be51c: RLP; mov r8, r14 ; xor ecx, ecx ; xor edx, edx ; mov rsi, r13 ; mov rdi, r12 ; mov r15, rax ; mov byte ptr [rsp + 0x18], 9 ; call 0xbe30c
write: ecx edx r15 r8 rdi rflags rsi rsp 
000be53a: RLP; mov r10, qword ptr [rsp] ; mov rbp, rax ; mov r8, r14 ; mov rcx, rbp ; mov rdx, r10 ; mov rsi, r13 ; mov rdi, r12 ; mov byte ptr [rsp + 0x18], 0x10 ; call 0xbe30c
write: r10 r8 rbp rcx rdi rdx rsi rsp 
000be55e: RLP; mov r11, rax ; mov r8, r14 ; mov rcx, r11 ; mov rdx, r15 ; mov rsi, r13 ; mov rdi, r12 ; mov byte ptr [rsp + 0x18], 0x10 ; mov qword ptr [rsp], r11 ; call 0xbe30c
write: r11 r8 rcx rdi rdx rsi rsp 
000be618: RLP; xor ecx, ecx ; xor edx, edx ; mov r8, r14 ; mov rsi, r13 ; mov rdi, r12 ; mov r15, rax ; mov byte ptr [rsp + 0x18], 9 ; call 0xbe30c
write: ecx edx r15 r8 rdi rflags rsi rsp 
000be67c: RLP; mov r8, r14 ; xor ecx, ecx ; xor edx, edx ; mov rsi, r13 ; mov rdi, r12 ; mov r15, rax ; mov byte ptr [rsp + 0x18], 9 ; call 0xbe30c
write: ecx edx r15 r8 rdi rflags rsi rsp 
000bfa8d: RLP; mov rdi, qword ptr [rsp + 0x28] ; mov qword ptr [rbx + r15], rax ; call 0x1f46c
write: rdi rsp 
000bfc4c: RLP; mov edx, dword ptr [rsp + 0x38] ; mov ecx, dword ptr [rsp + 0x3c] ; mov rsi, r15 ; mov rdi, r14 ; mov dword ptr [rsp + 0x4c], eax ; call 0xbf0cc
write: ecx edx rdi rsi rsp 
000bfc67: RLP; mov rsi, r15 ; mov rdi, rbp ; mov ebx, eax ; call 0xbec4c
write: ebx rdi rsi rsp 
000bfc78: RLP; mov rdi, qword ptr [rsp + 0x58] ; mov r15d, eax ; call 0x1f46c
write: r15d rdi rsp 
000bfcc6: RLP; mov rdi, qword ptr [rsp + 0x20] ; mov esi, r12d ; mov dword ptr [rsp + 0x4c], eax ; call 0xbe74c
write: esi rdi rsp 
000bfd14: RLP; mov qword ptr [r12], rax ; mov rdi, qword ptr [rsp + 0x58] ; call 0x1f46c
write: rdi rsp 
000c0190: RLP; lea esi, [rax - 1] ; mov rdi, r13 ; call 0xbdcec
write: esi rdi rsp 
000c02de: RLP; mov rdi, qword ptr [r12 + 8] ; call 0x1f46c
write: rdi rsp 
000c02ec: RLP; mov rax, qword ptr [rbx + 8] ; mov rdi, qword ptr [rax + rbp + 8] ; call 0x1f46c
write: rax rdi rsp 
000c03a8: RLP; lea rdi, [rip + 0x760f6] ; mov qword ptr [r12], rax ; mov ecx, 6 ; mov rsi, rbp ; repe cmpsb byte ptr [rsi], byte ptr [rdi] ; jne 0xc0414
read: rax rbp rcx rdi rflags rsi 
write: ecx rcx rdi rflags rsi 
000c0d4e: RLP; mov rdi, r14 ; call 0xbd09c
write: rdi rsp 
000c0d79: RLP; mov rdi, r14 ; call 0xbd09c
write: rdi rsp 
000c0d85: RLP; mov eax, dword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 0x18] ; mov dword ptr [rdi], eax ; xor eax, eax ; jmp 0xc0d10
write: eax rdi rflags 
000c0f9f: RLP; mov rdx, qword ptr [rbp - 0x160] ; mov esi, eax ; mov rdi, r12 ; call 0x96b8c
write: esi rdi rdx rsp 
000c12a1: RLP; mov rdi, qword ptr [rbp - 0x160] ; mov rdx, r15 ; mov esi, eax ; call 0x96b8c
write: esi rdi rdx rsp 
000c2319: RLP; mov rdx, qword ptr [rsp + 8] ; mov rsi, qword ptr [rsp + 0x40] ; mov ecx, eax ; mov rdi, qword ptr [rsp + 0x50] ; call 0xbf47c
write: ecx rdi rdx rsi rsp 
000c23a3: RLP; mov ebp, eax ; lea r14, [rsp + 0x80] ; mov esi, r12d ; mov rdi, r14 ; call 0xbbf1c
write: ebp esi r14 rdi rsp 
000c252d: RLP; mov dword ptr [rsp + 0x78], 0xc ; mov rdi, qword ptr [rsp + 0x88] ; call 0x1f46c
write: rdi rsp 
000c2749: RLP; mov rsi, qword ptr [rbp - 0xa0] ; mov r12d, dword ptr [r14] ; lea rdi, [rbp - 0x54] ; mov qword ptr [rbp - 0xb0], rdi ; movsxd rax, esi ; mov dword ptr [rbp - 0x54], r12d ; mov dword ptr [rbp - 0x84], esi ; shl rax, 3 ; mov qword ptr [rbp - 0xc0], rax ; mov rax, rsi ; add rax, 1 ; mov qword ptr [rbp - 0xb8], rax ; lea rax, [rbp - 0x50] ; mov qword ptr [rbp - 0x98], rax ; add rax, 8
read: esi r12d rax rdi rsi 
write: r12d rax rdi rflags rsi 
000c2bf0: RLP; mov rsi, qword ptr [rbp - 0x98] ; lea rdi, [r12 + 0x10] ; call 0xbf22c
write: rdi rsi rsp 
000c2c43: RLP; mov rdi, qword ptr [rbp - 0x78] ; call 0xbd52c
write: rdi rsp 
000c2e2d: RLP; mov rdi, qword ptr [rbp - 0x78] ; call 0xbd52c
write: rdi rsp 
000c360c: RLP; mov rdi, qword ptr [rsp + 0x78] ; mov ecx, eax ; mov rax, qword ptr [r12 + 0x88] ; lea r10, [r13*8] ; lea r11, [rax + r10] ; mov rax, qword ptr [rax + rdi] ; mov rdx, qword ptr [r11] ; test rax, rax ; je 0xc37d4
write: ecx r10 r11 rax rdi rdx rflags 
000c36ad: RLP; mov r10, qword ptr [rsp + 0x30] ; mov qword ptr [r10], rax ; mov rdi, qword ptr [rsp + 0xb8] ; call 0x1f46c
write: r10 rdi rsp 
000c39d9: RLP; mov r9, qword ptr [rsp + 8] ; add r9, qword ptr [rbx + 0x88] ; mov rdx, r14 ; mov rdi, qword ptr [rsp] ; mov ecx, eax ; mov rsi, rbp ; mov qword ptr [rsp + 8], r9 ; call 0xbf47c
write: ecx r9 rdi rdx rflags rsi rsp 
000c3a50: RLP; mov rdi, qword ptr [rsp] ; lea rdx, [rsp + 0x10] ; mov ecx, eax ; mov rsi, rbp ; call 0xbf47c
write: ecx rdi rdx rsi rsp 
000c3de6: RLP; mov rdi, qword ptr [rsp + 0x58] ; call 0x1f46c
write: rdi rsp 
000c40f0: RLP; lea rdi, [r12*8] ; mov r13, rax ; mov qword ptr [rsp + 0x1b0], rax ; call 0x1f3cc
write: r13 rdi rsp 
000c48d8: RLP; mov rax, qword ptr [rsp + 8] ; mov qword ptr [rsp + 0xe0], rbx ; mov rsi, r13 ; mov dword ptr [rsp + 0xf0], r15d ; mov dword ptr [rsp + 0xf4], r14d ; mov rdi, r12 ; mov qword ptr [rsp + 0xe8], rax ; mov qword ptr [r13 + 0x18], 0 ; mov qword ptr [r13 + 0x20], 0 ; call 0xc3adc
write: rax rdi rsi rsp 
000c491c: RLP; mov rdi, qword ptr [rsp + 0x100] ; mov dword ptr [rsp + 0x24], eax ; call 0x1f46c
write: rdi rsp 
000c4998: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
000c49a6: RLP; mov rdi, r12 ; call 0xbd42c
write: rdi rsp 
000c4ad8: RLP; mov rdi, qword ptr [rsp + 0x100] ; mov dword ptr [rsp + 8], eax ; call 0x1f46c
write: rdi rsp 
000c4ec2: RLP; mov rdi, qword ptr [rsp + 0x1c8] ; call 0x1f46c
write: rdi rsp 
000c4ed3: RLP; mov rdi, qword ptr [rsp + 0x1b0] ; call 0x1f46c
write: rdi rsp 
000c4f15: RLP; mov rdi, r13 ; mov dword ptr [rsp + 8], eax ; call 0x1f46c
write: rdi rsp 
000c4f4a: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
000c51f2: RLP; mov r8, qword ptr [rsp + 0xa8] ; add r8, qword ptr [rsp + 0x198] ; mov ecx, eax ; mov rdi, qword ptr [rsp + 0xa0] ; mov rdx, qword ptr [rsp + 0x68] ; mov rsi, r12 ; mov qword ptr [rsp + 0xa8], r8 ; call 0xbf47c
write: ecx r8 rdi rdx rflags rsi rsp 
000c5225: RLP; mov r8, qword ptr [rsp + 0xa8] ; mov qword ptr [r8], rax ; mov rdi, qword ptr [rsp + 0xe8] ; call 0x1f46c
write: r8 rdi rsp 
000c52e6: RLP; mov rdx, qword ptr [rsp + 0x68] ; mov rdi, qword ptr [rsp + 0xa0] ; mov ecx, eax ; mov rsi, r12 ; call 0xbf47c
write: ecx rdi rdx rsi rsp 
000c59a4: RLP; lea rdi, [r15 + 0x18] ; lea esi, [rax - 1] ; mov r15, rbp ; call 0xbdcec
write: esi r15 rdi rsp 
000c686d: RLP; mov r8, r12 ; mov rcx, rax ; mov rdx, r15 ; mov rsi, r13 ; mov rdi, r14 ; mov rbx, rax ; mov byte ptr [rsp + 0x138], 0x10 ; call 0xbe30c
write: r8 rbx rcx rdi rdx rsi rsp 
000c6a87: RLP; mov rdx, qword ptr [rsp + 0x30] ; mov r8, r12 ; mov rcx, rax ; mov rsi, r13 ; mov rdi, r14 ; mov rbx, rax ; mov byte ptr [rsp + 0x138], 0x10 ; call 0xbe30c
write: r8 rbx rcx rdi rdx rsi rsp 
000c6e08: RLP; mov dword ptr [r14], 0xa ; mov r12, rax ; mov r8, qword ptr [rsp + 0x28] ; xor ecx, ecx ; xor edx, edx ; mov rdi, rbx ; mov rsi, rbp ; call 0xbe30c
write: ecx edx r12 r8 rdi rflags rsi rsp 
000c6e2a: RLP; lea r8, [rsp + 0x130] ; mov rdi, rbx ; mov rcx, rax ; mov rdx, r12 ; mov rsi, rbp ; mov r13, rax ; mov byte ptr [rsp + 0x138], 0xa ; call 0xbe30c
write: r13 r8 rcx rdi rdx rsi rsp 
000c6f31: RLP; mov r8, qword ptr [rsp + 0x28] ; add r13d, eax ; xor ecx, ecx ; xor edx, edx ; mov dword ptr [r14 + 0x38], r13d ; mov rsi, rbp ; mov rdi, rbx ; call 0xbe30c
write: ecx edx r13d r8 rdi rflags rsi rsp 
000c6f50: RLP; mov rdx, r15 ; mov r8, r12 ; mov rcx, rax ; mov rsi, rbp ; mov rdi, rbx ; mov r13, rax ; mov byte ptr [rsp + 0x138], 0x10 ; call 0xbe30c
write: r13 r8 rcx rdi rdx rsi rsp 
000c75a4: RLP; mov rdi, r13 ; call 0xbd09c
write: rdi rsp 
000c76d5: RLP; mov rax, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x70] ; xor ecx, ecx ; xor edx, edx ; mov byte ptr [rsp + 0x118], 3 ; mov qword ptr [rsp + 0x110], r15 ; lea rsi, [rax + 0x80] ; lea rdi, [rax + 0x70] ; call 0xbe30c
write: ecx edx r8 rax rdi rflags rsi rsp 
000c7af2: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000c7d04: RLP; mov rdi, qword ptr [rsp + 0x68] ; mov esi, eax ; call 0x2e89c
write: esi rdi rsp 
000c7d57: RLP; mov rcx, qword ptr [rsp + 0x88] ; mov rdi, qword ptr [r13 + 0x20] ; mov r14, rax ; mov rsi, rcx ; call 0x1f3ac
write: r14 rcx rdi rsi rsp 
000c7f4e: RLP; mov rdi, qword ptr [rsp + 0x68] ; mov esi, eax ; call 0x2e89c
write: esi rdi rsp 
000c7f89: RLP; mov rdi, qword ptr [rsp + 0x68] ; mov esi, eax ; call 0x2e89c
write: esi rdi rsp 
000c8214: RLP; mov r9, qword ptr [rsp + 0x58] ; mov r8d, dword ptr [rsp + 0x10] ; mov rcx, rbp ; add ebx, eax ; mov rdx, r15 ; mov rsi, r12 ; mov dword ptr [r14 + 0x38], ebx ; mov rdi, r14 ; call 0xc655c
write: ebx r8d r9 rcx rdi rdx rflags rsi rsp 
000c856e: RLP; lea rsi, [rip - 0xb419] ; xor edx, edx ; mov rdi, r14 ; call 0xbbaac
write: edx rdi rflags rsi rsp 
000c8b01: RLP; mov rdi, qword ptr [rsp + 0x10] ; lea r9, [rsp + 0x4c] ; add ebp, eax ; xor r8d, r8d ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, r15 ; mov dword ptr [rsp + 0xa8], ebp ; call 0xc85dc
write: ebp r8d r9 rcx rdi rdx rflags rsi rsp 
000c8bd6: RLP; mov rdx, qword ptr [rsp + 8] ; mov qword ptr [r15 + 0x18], rax ; mov rbp, rax ; mov rdi, rdx ; call 0x1f3cc
write: rbp rdi rdx rsp 
000c8bee: RLP; mov rdi, rbx ; mov qword ptr [r15 + 0x20], rax ; mov qword ptr [rsp + 8], rbx ; mov qword ptr [rsp + 0x38], rax ; call 0x1f3cc
write: rdi rsp 
000c8c08: RLP; mov rdx, qword ptr [rsp + 8] ; mov qword ptr [r15 + 0x28], rax ; mov rbx, rax ; mov rdi, rdx ; call 0x1f3cc
write: rbx rdi rdx rsp 
000c8d46: RLP; mov rdi, qword ptr [r15 + 0x68] ; lea rsi, [rip - 0xcb65] ; mov rdx, r15 ; call 0xbbb1c
write: rdi rdx rsi rsp 
000c90d9: RLP; xor eax, eax ; mov dword ptr [rsp + 0x4c], eax ; mov rax, qword ptr [rsp + 0x20] ; mov rbp, qword ptr [rax] ; mov rdi, qword ptr [rbp + 0x70] ; test rdi, rdi ; jne 0xc90ff
read: eax rdi rflags 
write: eax rax rbp rdi rflags 
000c9137: RLP; mov rdi, qword ptr [rsp + 0x10] ; mov qword ptr [rbp + 0x20], 0 ; call 0xbd1fc
write: rdi rsp 
000c91ea: RLP; mov ecx, 2 ; mov rdx, r14 ; mov rsi, r12 ; mov rdi, rbx ; mov qword ptr [r12 + 0x50], rax ; call 0xbf47c
write: ecx rdi rdx rsi rsp 
000c9206: RLP; mov ecx, 6 ; mov qword ptr [r12 + 0x58], rax ; mov rdx, r14 ; mov rsi, r12 ; mov rdi, rbx ; call 0xbf47c
write: ecx rdi rdx rsi rsp 
000c94a7: RLP; mov rdi, qword ptr [rsp + 0x10] ; mov qword ptr [rbx + 0x20], 0 ; call 0xbd1fc
write: rdi rsp 
000c9dda: RLP; mov rsi, r14 ; movsxd rdx, ebp ; mov rdi, rax ; call 0x8e3dc
write: rdi rdx rsi rsp 
000c9dec: RLP; mov ecx, dword ptr [rsp + 0x1c] ; mov r14, r13 ; mov eax, dword ptr [rsp + 0x78] ; mov r9d, dword ptr [rsp + 0x70] ; mov edx, r12d ; mov r8d, dword ptr [rsp + 0x60] ; mov rsi, r14 ; mov rdi, r15 ; mov dword ptr [rsp + 8], eax ; mov rax, qword ptr [rsp + 0x68] ; mov qword ptr [rsp], rax ; call 0xc986c
write: eax ecx edx r14 r8d r9d rax rdi rsi rsp 
000c9e20: RLP; mov rdi, r13 ; mov ebx, eax ; call 0x1f46c
write: ebx rdi rsp 
000c9f07: RLP; mov rcx, rbp ; mov rdx, rax ; mov rsi, r14 ; mov rdi, rbx ; call 0xc874c
write: rcx rdi rdx rsi rsp 
000c9fcf: RLP; mov rdi, rax ; mov r12, rax ; call 0x856dc
write: r12 rdi rsp 
000ca045: RLP; mov rdi, qword ptr [rbx + 0x20] ; mov qword ptr [rbx], 0 ; mov qword ptr [rbx + 8], 0 ; call 0x1f46c
write: rdi rsp 
000ca061: RLP; mov rdi, qword ptr [rbx + 0x28] ; mov qword ptr [rbx + 0x20], 0 ; call 0x1f46c
write: rdi rsp 
000ca0cf: RLP; mov ecx, 8 ; xor eax, eax ; mov rdi, rbp ; rep stosq qword ptr [rdi], rax ; mov qword ptr [rip + 0x2a1e19], r12 ; test r12, r12 ; je 0xca18c
read: eax r12 rax rbp rcx rdi rflags 
write: eax ecx rcx rdi rflags 
000ca0ff: RLP; mov rdx, qword ptr [rip + 0x29eea6] ; lea rdi, [rip + 0x2a1dcf] ; mov rsi, rbx ; mov rcx, qword ptr [rdx] ; mov rdx, rax ; call 0xc874c
write: rcx rdi rdx rsi rsp 
000cb00f: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov ecx, ebx ; xor eax, eax ; mov rdx, r12 ; call 0x523bc
write: eax ecx rdi rdx rflags rsi rsp 
000cb05e: RLP; mov rax, qword ptr [r13] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], r12d ; call 0x1f46c
write: rax rdi rsp 
000cb370: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov r8, r12 ; mov ecx, r14d ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax ecx r8 rdi rdx rflags rsi rsp 
000cb3bd: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cb3d1: RLP; mov rbx, qword ptr [r15 + 0x20] ; mov rdi, rbx ; call 0x856dc
write: rbx rdi rsp 
000cb47e: RLP; mov rdx, rbx ; mov rsi, rax ; mov rcx, r13 ; mov rdi, r12 ; xor eax, eax ; lea rbx, [rbp - 0x40] ; call 0x5212c
write: eax rbx rcx rdi rdx rflags rsi rsp 
000cb51b: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x50] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cb774: RLP; mov r8, qword ptr [rbp - 0x58] ; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov ecx, r12d ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax ecx r8 rdi rdx rflags rsi rsp 
000cb7c2: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cb8fc: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rcx, r12 ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cb9f9: RLP; mov rcx, qword ptr [rbp - 0x58] ; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cba9c: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rcx, r12 ; xor eax, eax ; mov rdx, rbx ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cbae6: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cbba3: RLP; mov rcx, qword ptr [rbp - 0x70] ; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cbbee: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cbc91: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov ecx, ebx ; xor eax, eax ; mov rdx, r12 ; call 0x523bc
write: eax ecx rdi rdx rflags rsi rsp 
000cbce0: RLP; mov rax, qword ptr [r13] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], r12d ; call 0x1f46c
write: rax rdi rsp 
000cbd60: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov ecx, ebx ; xor eax, eax ; mov rdx, r12 ; call 0x523bc
write: eax ecx rdi rdx rflags rsi rsp 
000cbdab: RLP; mov rax, qword ptr [r13] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], r12d ; call 0x1f46c
write: rax rdi rsp 
000cbe26: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rcx, r12 ; xor eax, eax ; mov rdx, rbx ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cbe74: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cbee6: RLP; lea rdi, [rbp - 0x40] ; mov rsi, rax ; mov rcx, r12 ; xor eax, eax ; mov rdx, rbx ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
000cbf34: RLP; mov rax, qword ptr [r12] ; mov rdi, qword ptr [rbp - 0x40] ; mov dword ptr [rax + 0x74], ebx ; call 0x1f46c
write: rax rdi rsp 
000cc403: RLP; mov rdx, r14 ; movsxd rdi, eax ; mov rsi, r15 ; mov eax, 0xcc ; syscall ; cmp eax, 0xfffff000 ; mov edx, eax ; seta cl ; cmp eax, -0x16 ; je 0xcc3cc
write: cl eax edx rdi rdx rflags rsi 
000cc8fb: RLP; mov rdi, rbx ; mov rbx, r13 ; call 0x6bf5c
write: rbx rdi rsp 
000cce93: RLP; mov rdi, qword ptr [rip + 0x29f0ea] ; cmp rdi, qword ptr [rsp] ; mov qword ptr [rip + 0x29f0df], r12 ; je 0xcceb0
read: r12 rdi rflags 
write: rdi rflags 
000cceb0: RLP; mov rdi, qword ptr [rip + 0x29f0dd] ; mov qword ptr [rip + 0x29f0d6], r14 ; cmp rdi, rbp ; je 0xccecc
read: r14 rbp rdi rflags 
write: rdi rflags 
000ccf31: RLP; mov rdi, qword ptr [rsp + 0x48] ; test rdi, rdi ; jne 0xccf47
read: rdi rflags 
write: rdi rflags 
000cd279: RLP; mov rdi, rbx ; call 0x6bf5c
write: rdi rsp 
000cd8bf: RLP; cmp eax, -1 ; mov eax, 1 ; cmove r12d, eax ; mov rax, qword ptr [rip + 0x29b71a] ; mov r13, qword ptr fs:[rax] ; mov rax, qword ptr [r13 + 8] ; mov r15, rax ; mov qword ptr [rbp - 0x108], rax ; mov rax, qword ptr [rbp - 0xe0] ; and r15, 0xffffffffffffdfff ; mov qword ptr [r13 + 8], r15 ; lea rdi, [rax + 0x428] ; cmp rdi, 0x1000 ; ja 0xcf869
read: eax r12d r15 rax rdi rflags 
write: eax r12d r13 r15 rax rdi rflags 
000cdc6a: RLP; mov rdi, qword ptr [rbp - 0x78] ; test rax, rax ; mov qword ptr [rdi], rax ; je 0xcdd7c
write: rdi rflags 
000ce007: RLP; mov qword ptr [rsp], 0 ; mov r9, qword ptr [rbp - 0x90] ; mov rcx, r15 ; mov r8, qword ptr [rbp - 0x88] ; mov rdx, rbx ; mov rsi, qword ptr [rbp - 0x80] ; mov rdi, qword ptr [rbp - 0x98] ; call r13
write: r8 r9 rcx rdi rdx rsi rsp 
000ce379: RLP; mov rax, qword ptr [rbp - 0xe8] ; mov rdx, qword ptr [rbp - 0x90] ; mov r8, r15 ; mov qword ptr [rsp + 8], 0 ; mov r9, qword ptr [rbp - 0x88] ; mov rcx, rbx ; mov esi, 0xa ; mov rdi, qword ptr [rbp - 0x98] ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rbp - 0xf0] ; mov qword ptr [rsp], rax ; call r13
write: esi r8 r9 rax rcx rdi rdx rsp 
000ce6b9: RLP; mov rdi, qword ptr [rbp - 0xd8] ; mov qword ptr [rbp - 0xb8], rax ; mov r10d, dword ptr [rbp - 0xe8] ; mov qword ptr [rdi + 8], rax ; mov rdi, qword ptr [rbp - 0x88] ; jmp 0xce5bb
write: r10d rdi 
000ce6ff: RLP; mov rdi, qword ptr [rbp - 0x50] ; mov rcx, qword ptr [rbp - 0x80] ; mov edx, 1 ; mov r12, qword ptr [r12] ; mov byte ptr [rbp - 0x80], 1 ; mov rax, qword ptr [rdi + 0x10] ; mov r10, rcx ; cmp byte ptr [rax + rbx], 0xa ; movzx eax, byte ptr [rbp - 0xbb] ; cmove eax, edx ; mov byte ptr [rbp - 0xbb], al ; jmp 0xce5df
write: eax edx r10 r12 rax rcx rdi rflags 
000ce8d3: RLP; mov rax, qword ptr [rbp - 0x60] ; mov r9, qword ptr [rbp - 0xe8] ; mov edx, 0x100 ; mov r8, qword ptr [rbp - 0x88] ; mov rcx, qword ptr [rbp - 0x90] ; mov rsi, qword ptr [rbp - 0xd0] ; mov rax, qword ptr [rax + 8] ; test rax, rax ; cmove rax, qword ptr [rbp - 0x98] ; mov rdi, rax ; call r13
write: edx r8 r9 rax rcx rdi rflags rsi rsp 
000cea03: RLP; mov rax, qword ptr [rbp - 0xe8] ; mov rdx, qword ptr [rbp - 0x90] ; mov r8, r15 ; mov qword ptr [rsp + 8], 0 ; mov r9, qword ptr [rbp - 0x88] ; mov rcx, rbx ; mov esi, 2 ; mov rdi, qword ptr [rbp - 0x98] ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rbp - 0xf0] ; mov qword ptr [rsp], rax ; call r13
write: esi r8 r9 rax rcx rdi rdx rsp 
000cf26f: RLP; mov edi, 0x10 ; lea rsi, [rax + 1] ; xor edx, edx ; add rax, 0x1f ; mov r8, qword ptr [rbp - 0x80] ; div rdi ; mov rdx, rsi ; mov rsi, r8 ; shl rax, 4 ; sub rsp, rax ; lea rdi, [rsp + 0x27] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: edx r8 rax rdi rdx rip rsi rsp 
write: edi edx r8 rax rdi rdx rflags rsi rsp 
000cf41e: RLP; mov edi, 0x10 ; lea rsi, [rax + 1] ; xor edx, edx ; add rax, 0x1f ; mov r8, qword ptr [rbp - 0x80] ; div rdi ; mov rdx, rsi ; mov rsi, r8 ; shl rax, 4 ; sub rsp, rax ; lea rdi, [rsp + 0x27] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: edx r8 rax rdi rdx rip rsi rsp 
write: edi edx r8 rax rdi rdx rflags rsi rsp 
000cfa54: RLP; mov rdi, r14 ; mov dword ptr [rbp - 0x80], eax ; call 0x1f46c
write: rdi rsp 
000cfb96: RLP; mov dword ptr [rsp + 0x28], eax ; mov rax, qword ptr [rbx] ; mov rdi, qword ptr [rax + 0x18] ; call 0xcfa6c
write: rax rdi rsp 
000cfbaa: RLP; mov rdi, r14 ; mov dword ptr [rsp + 0xc], eax ; call 0xcfa6c
write: rdi rsp 
000cfbba: RLP; lea rsi, [rbx + 8] ; mov r12d, eax ; mov rdi, rsi ; mov qword ptr [rsp + 0x20], rsi ; call 0xcfa6c
write: r12d rdi rsi rsp 
000cfc3b: RLP; mov rdi, r14 ; mov edx, 0x7fffffff ; mov rsi, r12 ; mov dword ptr [rsp + 0x18], eax ; call 0xcc4cc
write: edx rdi rsi rsp 
000cfc53: RLP; mov dword ptr [rsp + 0x2c], eax ; mov rax, qword ptr [rbx] ; mov edx, 0x7fffffff ; mov rsi, r12 ; mov rdi, qword ptr [rax + 0x18] ; call 0xcc4cc
write: edx rax rdi rsi rsp 
000cfc6f: RLP; mov rdi, qword ptr [rsp + 0x20] ; mov r14d, eax ; mov edx, 0x7fffffff ; mov rsi, r12 ; call 0xcc4cc
write: edx r14d rdi rsi rsp 
000cfcce: RLP; mov dword ptr [rsp + 0x28], eax ; mov rax, qword ptr [rbx] ; mov rdi, qword ptr [rax + 0x18] ; call 0xcfa6c
write: rax rdi rsp 
000cfce2: RLP; mov r9, qword ptr [rsp + 0x10] ; mov dword ptr [rsp + 0xc], eax ; mov r14, qword ptr [rip + 0x29c292] ; xor edx, edx ; mov rdi, r12 ; mov qword ptr [rsp + 0x10], r9 ; mov rsi, r14 ; call 0xcc4cc
write: edx r14 r9 rdi rflags rsi rsp 
000cfd08: RLP; mov r12d, eax ; mov rax, qword ptr [rbx] ; xor edx, edx ; mov rsi, r14 ; mov rdi, qword ptr [rax + 0x18] ; call 0xcc4cc
write: edx r12d rax rdi rflags rsi rsp 
000d01c8: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000d08c8: RLP; mov rcx, qword ptr [rbp - 0x150] ; mov r8, qword ptr [rbp - 0x160] ; mov ebx, dword ptr [rbp - 0x148] ; mov rax, qword ptr [rcx] ; lea rax, [rax + rax*2] ; shl rax, 4 ; cmp ebx, 1 ; mov rdi, qword ptr [r8 + rax] ; mov qword ptr [rbp - 0x128], rdi ; jle 0xd0cd4
read: ebx rax rdi rflags 
write: ebx r8 rax rcx rdi rflags 
000d0b62: RLP; mov rdi, qword ptr [rbp - 0x120] ; call 0x1012dc
write: rdi rsp 
000d1881: RLP; lea rdi, [rip + 0x62bb0] ; xor eax, eax ; mov esi, 1 ; call 0xd680c
write: eax esi rdi rflags rsp 
000d19fb: RLP; mov rax, qword ptr [rip + 0x2974a2] ; lea rsi, [rsp + 0x70] ; lea rdi, [rip + 0x63138] ; mov rdx, qword ptr [rax] ; call 0xb31fc
write: rax rdi rdx rsi rsp 
000d1b7d: RLP; mov rdi, qword ptr [rsp + 0x48] ; mov ebx, eax ; call 0x1f46c
write: ebx rdi rsp 
000d1f97: RLP; mov rcx, rbx ; mov rdx, r13 ; mov rsi, r12 ; mov rdi, rbp ; mov r8, rax ; call 0xd11dc
write: r8 rcx rdi rdx rsi rsp 
000d20ee: RLP; lea rdx, [rax + 0x1f] ; mov rsi, rbx ; mov ebx, 0x3e8 ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; mov rdx, rax ; lea rdi, [rsp + 0xf] ; and rdi, 0xfffffffffffffff0 ; mov byte ptr [rdi + rax], 0 ; call 0x8e3dc
read: rax rbx rdi rdx rip rsp 
write: ebx rdi rdx rflags rsi rsp 
000d21f0: RLP; mov qword ptr [rbx], rax ; mov rdi, qword ptr [rbp - 0x80] ; mov qword ptr [rdi], r15 ; test rax, rax ; sete al ; lea rsp, [rbp - 0x28] ; movzx eax, al ; pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret
write: al eax r12 r13 r14 r15 rbp rbx rdi rflags rsp 
000d26f8: RLP; mov rbx, qword ptr [rsp + 0x28] ; mov rdx, qword ptr [rsp + 0x38] ; mov rcx, rax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rbx] ; call 0xd1f6c
write: rbx rcx rdi rdx rsi rsp 
000d2716: RLP; mov rdi, qword ptr [rsp + 0x50] ; mov qword ptr [rbx], rax ; call 0x1f46c
write: rdi rsp 
000d279a: RLP; mov rbx, qword ptr [rsp + 0x28] ; mov rdx, qword ptr [rsp + 0x38] ; mov rcx, rax ; mov rsi, qword ptr [rsp + 0x30] ; mov rdi, qword ptr [rbx] ; call 0xd1f6c
write: rbx rcx rdi rdx rsi rsp 
000d27b8: RLP; mov rdi, qword ptr [rsp + 0x50] ; mov qword ptr [rbx], rax ; call 0x1f46c
write: rdi rsp 
000d2a22: RLP; test rax, rax ; mov rdi, rax ; jne 0xd29ec
write: rdi rflags 
000d2a44: RLP; mov rdi, r15 ; mov r15d, r12d ; call 0x1f46c
write: r15d rdi rsp 
000d311a: RLP; mov rdi, r15 ; call 0x1f46c
write: rdi rsp 
000d314e: RLP; lea rsi, [rsp + 0xf4] ; xor ecx, ecx ; mov edx, 0xa ; mov rdi, rax ; call 0x4778c
write: ecx edx rdi rflags rsi rsp 
000d3169: RLP; mov rcx, rax ; mov rbx, qword ptr [rsp + 0x30] ; mov rdx, qword ptr [rsp + 0x28] ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rbx] ; call 0xd1f6c
write: rbx rcx rdi rdx rsi rsp 
000d328e: RLP; mov rdi, r15 ; call 0x1f46c
write: rdi rsp 
000d3559: RLP; test rax, rax ; mov rdi, rax ; mov qword ptr [rsp + 0xa8], rax ; je 0xd37dc
write: rdi rflags 
000d35de: RLP; mov r10, qword ptr [rsp + 0x38] ; mov rdi, r10 ; call 0x1f46c
write: r10 rdi rsp 
000d35ef: RLP; mov rdi, r15 ; call 0x1f46c
write: rdi rsp 
000d37bc: RLP; mov qword ptr [rsp + 0xa8], rax ; movsx ecx, byte ptr [rbp + 1] ; mov rdi, rax ; test cl, cl ; je 0xd432b
write: ecx rdi rflags 
000d3831: RLP; mov rbx, qword ptr [rsp + 0x30] ; mov rdx, qword ptr [rsp + 0x28] ; mov rcx, rax ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rbx] ; call 0xd1f6c
write: rbx rcx rdi rdx rsi rsp 
000d384f: RLP; mov r10, qword ptr [rsp + 0x38] ; mov qword ptr [rbx], rax ; mov rdi, r10 ; call 0x1f46c
write: r10 rdi rsp 
000d3863: RLP; mov rdi, r15 ; xor r15d, r15d ; call 0x1f46c
write: r15d rdi rflags rsp 
000d3a51: RLP; mov rdi, qword ptr [rbp - 8] ; lea r12, [r12 + rax + 1] ; test rdi, rdi ; jne 0xd3a44
read: rdi rflags 
write: r12 rdi rflags 
000d3ba2: RLP; mov rsi, qword ptr [rsp + 0x150] ; lea r15, [rbp + rax] ; mov rdi, r15 ; call 0x87bbc
write: r15 rdi rsi rsp 
000d3cb6: RLP; lea rsi, [rsp + 0xd4] ; movsxd rdi, eax ; xor ecx, ecx ; mov edx, 0xa ; call 0x4778c
write: ecx edx rdi rflags rsi rsp 
000d3f4c: RLP; mov rdi, r15 ; xor r15d, r15d ; call 0x1f46c
write: r15d rdi rflags rsp 
000d42e2: RLP; mov rbx, qword ptr [rsp + 0x30] ; mov rdx, qword ptr [rsp + 0x28] ; mov rcx, rax ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, qword ptr [rbx] ; call 0xd1f6c
write: rbx rcx rdi rdx rsi rsp 
000d43c9: RLP; mov rdi, qword ptr [rbx] ; test rdi, rdi ; jne 0xd43bc
read: rdi rflags 
write: rdi rflags 
000d4d09: RLP; mov rdi, qword ptr [rsp + 0xb8] ; jmp 0xd4664
write: rdi 
000d4e97: RLP; cmp qword ptr [rsp + 0xe0], 1 ; mov rdi, rax ; mov qword ptr [rsp + 0xb8], rax ; jbe 0xd4f28
write: rdi rflags 
000d520d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x11 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000d527d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x12 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000d53e7: RLP; cmp dword ptr [r12 + 4], ebx ; mov rdi, qword ptr [r12 + 8] ; jg 0xd53ca
write: rdi rflags 
000d5b8f: RLP; mov rdi, r12 ; lea rbx, [rax + 1] ; call 0x856dc
write: rbx rdi rsp 
000d5b9f: RLP; lea rdx, [rax + 1] ; mov rsi, r14 ; lea rax, [rbx + rdx + 0x1e] ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rax, [rsp + 0xf] ; and rax, 0xfffffffffffffff0 ; lea rdi, [rax + rdx] ; mov rdx, rbx ; call 0x8e3dc
write: rax rdi rdx rflags rsi rsp 
000d5c57: RLP; mov r15, rax ; mov rdx, qword ptr [rbp - 0xf0] ; mov rsi, qword ptr [rbp - 0xe8] ; mov rdi, r15 ; call 0xb31fc
write: r15 rdi rdx rsi rsp 
000d5dee: RLP; mov rdx, -1 ; mov esi, eax ; mov eax, 0x75 ; mov rdi, rdx ; syscall ; cmp rax, -0x1000 ; ja 0xd5eed
write: eax esi rdi rdx rflags 
000d5e1f: RLP; mov rdx, -1 ; mov esi, eax ; mov eax, 0x77 ; mov rdi, rdx ; syscall ; cmp rax, -0x1000 ; ja 0xd5eed
write: eax esi rdi rdx rflags 
000d683a: RLP; mov qword ptr [rsp], rax ; mov eax, 2 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000d699f: RLP; mov r10, qword ptr [rsp + 8] ; mov r8d, eax ; movsxd rdx, dword ptr [rsp + 0x1c] ; mov rsi, qword ptr [rsp + 0x10] ; movsxd rdi, dword ptr [rsp + 0x18] ; mov eax, 0x101 ; syscall ; cmp rax, -0x1000 ; ja 0xd69de
write: eax r10 r8d rdi rdx rflags rsi 
000d6a8a: RLP; mov qword ptr [rsp], rax ; mov eax, 0 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000d6afa: RLP; mov qword ptr [rsp], rax ; mov eax, 1 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000d714a: RLP; mov qword ptr [rsp], rax ; mov eax, 3 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000d72aa: RLP; mov qword ptr [rsp], rax ; mov eax, 0x55 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000d737e: RLP; mov esi, 0x1000 ; cmp eax, 0x1000 ; cmovge esi, eax ; movsxd rsi, esi ; mov rdi, rsi ; mov qword ptr [rsp], rsi ; call 0x1f3cc
write: esi rdi rflags rsi rsp 
000d7739: RLP; mov r8, qword ptr [rsp] ; mov rcx, qword ptr [rsp + 8] ; mov qword ptr [rsp + 0x38], rax ; mov qword ptr [rsp + 0x20], rbx ; mov qword ptr [rsp + 0x28], r8 ; mov r8, qword ptr [rsp + 0x38] ; mov rdx, rcx ; mov rsi, rbp ; sub r8, rcx ; mov rdi, r8 ; call 0x8e3dc
write: r8 rcx rdi rdx rflags rsi rsp 
000d8026: RLP; lea rdx, [r12 - 1] ; mov byte ptr [rax], 0 ; mov rsi, rbp ; mov rdi, r15 ; call 0xd832c
write: rdi rdx rsi rsp 
000d88eb: RLP; mov byte ptr [rax], 0 ; mov rdi, qword ptr [rsp] ; call 0xaebbc
write: rdi rsp 
000d8a89: RLP; movzx r8d, byte ptr [rbx + 0x12] ; mov rcx, rax ; mov rdx, r12 ; mov rsi, rbp ; mov rdi, r14 ; call 0xd84cc
write: r8d rcx rdi rdx rsi rsp 
000d8ae1: RLP; mov rcx, rax ; xor r8d, r8d ; mov rdx, r12 ; sub rcx, r12 ; mov rsi, rbp ; mov rdi, r14 ; mov r13, rax ; call 0xd84cc
write: r13 r8d rcx rdi rdx rflags rsi rsp 
000d8f22: RLP; mov rdi, r15 ; call 0x856dc
write: rdi rsp 
000d8f2e: RLP; lea rdi, [rax + rax] ; mov eax, 0x1000 ; cmp rdi, 0x1000 ; cmovb rdi, rax ; mov qword ptr [rbp - 0x100], rdi ; call 0x1f3cc
read: rax rdi rflags rip rsp 
write: eax rdi rflags rsp 
000d915e: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000d9242: RLP; movsxd rdi, r13d ; mov eax, 3 ; syscall ; mov dword ptr fs:[r12], r14d ; mov rsi, qword ptr [rip + 0x28fd3c] ; mov rdi, qword ptr [rbp - 0xd0] ; call 0xe1a4c
write: eax rdi rsi rsp 
000d9268: RLP; mov rdi, qword ptr [rbp - 0x108] ; call 0x1f46c
write: rdi rsp 
000d9c23: RLP; mov rsi, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x18] ; mov rcx, rax ; mov rdx, rbp ; call 0xd985c
write: rcx rdi rdx rsi rsp 
000d9d59: RLP; test r13, r13 ; mov rdi, r13 ; jne 0xd9d6f
write: rdi rflags 
000d9e54: RLP; test r13, r13 ; mov rdi, r13 ; jne 0xd9e67
write: rdi rflags 
000da2c5: RLP; cmp rbx, rax ; cmovb rbx, rax ; add r13, 8 ; mov rdi, qword ptr [r13] ; test rdi, rdi ; jne 0xda2bc
read: r13 rax rbx rdi rflags 
write: r13 rbx rdi rflags 
000da478: RLP; mov rdi, qword ptr [r12 + 0x20] ; call 0x1f46c
write: rdi rsp 
000da486: RLP; mov rdi, r12 ; xor r12d, r12d ; call 0x1f46c
write: r12d rdi rflags rsp 
000da610: RLP; mov rdi, qword ptr [rbp + 8] ; test rdi, rdi ; jne 0xda61f
read: rdi rflags 
write: rdi rflags 
000da63e: RLP; mov rdi, qword ptr [rbp + 0x20] ; call 0x1f46c
write: rdi rsp 
000da89b: RLP; mov esi, 0x2f ; mov rdi, rbp ; call 0x8751c
write: esi rdi rsp 
000da8ca: RLP; lea edx, [rax + 1] ; mov r13, rax ; mov rsi, r14 ; mov rdi, rbp ; movsxd rdx, edx ; call 0x88fbc
write: edx r13 rdi rdx rsi rsp 
000daeaa: RLP; mov qword ptr [rsp], rax ; mov eax, 7 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000daf5c: RLP; mov r8d, 8 ; mov r9d, eax ; mov r10, qword ptr [rsp + 0x18] ; mov rdx, qword ptr [rsp] ; mov rsi, qword ptr [rsp + 0x10] ; mov eax, 0x10f ; mov rdi, qword ptr [rsp + 8] ; syscall ; cmp rax, -0x1000 ; ja 0xdafad
write: eax r10 r8d r9d rdi rdx rflags rsi 
000db9fd: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x115 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000dba99: RLP; mov r10, qword ptr [rsp + 0x18] ; mov r8d, eax ; mov rdx, qword ptr [rsp + 0x10] ; movsxd rsi, dword ptr [rsp + 0xc] ; movsxd rdi, dword ptr [rsp + 8] ; mov eax, ebx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xdbad3
write: eax r10 r8d rbx rdi rdx rflags rsi 
000dbc2a: RLP; mov esi, ebx ; mov rdi, r12 ; call 0xdbb1c
write: esi rdi rsp 
000dbc52: RLP; mov esi, ebp ; mov rdi, r12 ; call 0xdbb1c
write: esi rdi rsp 
000dbebc: RLP; mov ecx, 0x10 ; mov r8d, eax ; mov edx, 1 ; mov esi, 0x5409 ; movsxd rdi, dword ptr [rsp + 0xc] ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xdbef6
write: eax ecx edx esi r8d rbx rdi rflags 
000dc6bb: RLP; movsxd rdx, dword ptr [rsp + 0x1c] ; mov r8d, eax ; mov rsi, qword ptr [rsp + 0x10] ; movsxd rdi, dword ptr [rsp + 8] ; mov eax, 0x13 ; syscall ; cmp rax, -0x1000 ; ja 0xdc6f7
write: eax r8d rdi rdx rflags rsi 
000dc75b: RLP; movsxd rdx, dword ptr [rsp + 0x1c] ; mov r8d, eax ; mov rsi, qword ptr [rsp + 0x10] ; movsxd rdi, dword ptr [rsp + 8] ; mov eax, 0x14 ; syscall ; cmp rax, -0x1000 ; ja 0xdc797
write: eax r8d rdi rdx rflags rsi 
000dc802: RLP; mov r10, qword ptr [rsp + 0x18] ; mov r8d, eax ; movsxd rdx, dword ptr [rsp + 0x14] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp] ; mov eax, 0x127 ; syscall ; cmp rax, -0x1000 ; ja 0xdc840
write: eax r10 r8d rdi rdx rflags rsi 
000dc8b2: RLP; mov r10, qword ptr [rsp + 0x18] ; mov r8d, eax ; movsxd rdx, dword ptr [rsp + 0x14] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp] ; mov eax, 0x128 ; syscall ; cmp rax, -0x1000 ; ja 0xdc8f0
write: eax r10 r8d rdi rdx rflags rsi 
000dcbd9: RLP; lea rbp, [rax + 1] ; mov rdx, rbx ; mov rsi, r13 ; mov rdi, r14 ; cmp rbp, rbx ; cmovbe rdx, rbp ; call 0x8e3dc
write: rbp rdi rdx rflags rsi rsp 
000dcca7: RLP; add rax, 1 ; mov rdx, rbp ; mov rsi, rbx ; cmp rax, rbp ; mov rdi, r12 ; cmovbe rdx, rax ; call 0x8e3dc
write: rax rdi rdx rflags rsi rsp 
000dcd4d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x17 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000dce12: RLP; lea r9, [rsp + 0x40] ; mov ebp, eax ; mov r8, qword ptr [rsp + 8] ; mov r10, qword ptr [rsp + 0x28] ; mov rdx, qword ptr [rsp + 0x20] ; mov eax, 0x10e ; mov rsi, qword ptr [rsp + 0x18] ; movsxd rdi, dword ptr [rsp + 0x14] ; syscall ; cmp rax, -0x1000 ; ja 0xdce6b
write: eax ebp r10 r8 r9 rdi rdx rflags rsi 
000dcf1a: RLP; mov qword ptr [rsp], rax ; mov eax, 0x4a ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000dcfba: RLP; mov qword ptr [rsp], rax ; mov eax, 0x4b ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000dd0b7: RLP; movsxd rdi, ebx ; mov edx, eax ; mov eax, 3 ; syscall ; cmp edx, 4 ; je 0xdd1c4
write: eax edx rdi rflags 
000dd285: RLP; movsxd rdi, ebx ; mov edx, eax ; mov eax, 3 ; syscall ; xor eax, eax ; cmp edx, 4 ; setne al ; neg eax ; add rsp, 0x10 ; pop rbx ; ret
write: al eax edx rbx rdi rflags rsp 
000ddbb9: RLP; lea rcx, [rax + 0x12] ; mov rdx, rax ; mov rsi, rbx ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; mov rdi, rsp ; call 0x892cc
write: rcx rdi rdx rflags rsi rsp 
000ddbd6: RLP; mov edx, 0x6563 ; mov byte ptr [rax + 2], 0 ; mov rsi, rsp ; mov word ptr [rax], dx ; mov rdi, r12 ; call 0x6ca9c
write: edx rdi rsi rsp 
000de193: RLP; lea rax, [rax*4 + 0x1f] ; mov esi, dword ptr [rbp - 0x48] ; mov rdi, r15 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; mov edx, esi ; lea rax, [rsp + 0x1f] ; mov qword ptr [rbp - 0x38], rax ; and qword ptr [rbp - 0x38], 0xfffffffffffffff0 ; mov rax, qword ptr [rbp - 0x38] ; jmp 0xde1f6
write: edx esi rax rdi rflags rsp 
000ded9d: RLP; mov rdi, qword ptr [rip + 0x28d3b8] ; mov qword ptr [rip + 0x28d3b5], 0 ; call 0x1f46c
write: rdi rsp 
000dedb8: RLP; lea rsi, [rip + 0x55735] ; lea rdi, [rip + 0x57b98] ; mov qword ptr [rip + 0x28d38b], 0 ; call 0x6ca9c
write: rdi rsi rsp 
000df024: RLP; mov rdi, qword ptr [rip + 0x28d131] ; mov qword ptr [rip + 0x28d12e], 0 ; call 0x1f46c
write: rdi rsp 
000df105: RLP; mov rdi, rbp ; call 0x7680c
write: rdi rsp 
000df111: RLP; lea rsi, [rip + 0x28d07c] ; lea rdi, [rip + 0x28d07d] ; mov rdx, rbx ; call 0x69e2c
write: rdi rdx rsi rsp 
000df22d: RLP; nop dword ptr [rax] ; mov rdi, rbx ; call 0x743fc
write: rdi rsp 
000df2a7: RLP; mov rdi, rbx ; call 0x2203c
write: rdi rsp 
000df6d0: RLP; mov rdi, r15 ; call 0x1f48c
write: rdi rsp 
000df6dc: RLP; lea rsi, [rsp + 0x60] ; mov rdi, r15 ; call 0xa2c3c
write: rdi rsi rsp 
000df6ed: RLP; mov r15, qword ptr [rbx + 0x28] ; mov rsi, qword ptr [rbx + 0x30] ; lea r8, [rip + 0x2883e0] ; lea rdx, [rip + 0x5727a] ; mov rcx, rax ; sub rsi, r15 ; mov rdi, r15 ; call 0xabbdc
write: r15 r8 rcx rdi rdx rflags rsi rsp 
000df715: RLP; add r15, rax ; mov rdi, rbx ; mov qword ptr [rbx + 0x28], r15 ; call 0x6d20c
write: r15 rdi rflags rsp 
000df728: RLP; mov rdi, qword ptr [rip + 0x28cb05] ; mov r15, rax ; test rdi, rdi ; je 0xdfb5c
read: rax rdi rflags 
write: r15 rdi rflags 
000df7b8: RLP; mov rdi, rbx ; call 0x6bf5c
write: rdi rsp 
000df8e8: RLP; add rsp, 0x80 ; mov rdi, qword ptr [rsp + 0x10] ; lea rax, [rsp + 0x20] ; cmp rdi, rax ; je 0xdf907
read: rax rdi rflags rsp 
write: rax rdi rflags rsp 
000dfa5e: RLP; mov esi, dword ptr [rip + 0x28c7d8] ; mov rdi, qword ptr [rip + 0x28c7c9] ; xor edx, edx ; or esi, 8 ; call 0xdf3fc
write: edx esi rdi rflags rsp 
000dfad5: RLP; lea rsi, [rip + 0x56eab] ; mov edx, eax ; mov rdi, rbx ; xor eax, eax ; call 0x5212c
write: eax edx rdi rflags rsi rsp 
000dfbbc: RLP; mov rdi, rbx ; call 0x2203c
write: rdi rsp 
000dfbd7: RLP; mov rdi, rbp ; call 0x2203c
write: rdi rsp 
000dfda3: RLP; add rsp, 0x80 ; mov esi, r10d ; mov rdi, r9 ; call 0xdf3fc
write: esi rdi rflags rsp 
000dfdd8: RLP; mov rdi, rbx ; call 0x2203c
write: rdi rsp 
000dfe7b: RLP; mov rdi, rbx ; call 0x2203c
write: rdi rsp 
000e010a: RLP; mov qword ptr [rsp], rax ; mov eax, 0x1a ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e11cf: RLP; mov rdi, qword ptr [rbx + 8] ; test rdi, rdi ; je 0xe11e9
read: rdi rflags 
write: rdi rflags 
000e11e9: RLP; mov rdi, rbx ; mov edx, r12d ; mov esi, 1 ; call rbp
write: edx esi rdi rsp 
000e11fa: RLP; mov rdi, qword ptr [rbx + 0x10] ; test rdi, rdi ; je 0xe1214
read: rdi rflags 
write: rdi rflags 
000e1214: RLP; mov edx, r12d ; mov esi, 2 ; mov rdi, rbx ; call rbp
write: edx esi rdi rsp 
000e126e: RLP; mov rdi, qword ptr [rbx + 0x10] ; test rdi, rdi ; je 0xe1283
read: rdi rflags 
write: rdi rflags 
000e1283: RLP; mov rdi, qword ptr [rbx] ; call rbp
write: rdi rsp 
000e128c: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000e1d2a: RLP; mov rsi, r12 ; mov rdi, rbp ; call 0xe1bac
write: rdi rsi rsp 
000e1d7d: RLP; mov rdi, qword ptr [rbx] ; mov rax, qword ptr [rdi + 0x28] ; cmp rax, qword ptr [rdi + 0x30] ; jae 0xe1d9a
write: rax rdi rflags 
000e1e0e: RLP; mov rsi, qword ptr [rbx] ; lea rdi, [rip + 0x5ba78] ; call 0x6f93c
write: rdi rsi rsp 
000e1e21: RLP; mov rdi, qword ptr [rbx] ; lea rsi, [rip + 0x5ba71] ; xor eax, eax ; mov dword ptr fs:[rbp], r13d ; call 0x702ac
write: eax rdi rflags rsi rsp 
000e1e75: RLP; mov rcx, qword ptr [rbx] ; lea rdi, [rip + 0x52d08] ; mov edx, 2 ; mov esi, 1 ; call 0x76a3c
write: edx esi rcx rdi rsp 
000e1e92: RLP; mov rdi, qword ptr [rbx] ; lea rsi, [rip + 0x55265] ; xor eax, eax ; mov dword ptr fs:[rbp], r13d ; call 0x5212c
write: eax rdi rflags rsi rsp 
000e22d5: RLP; mov rax, qword ptr [rip + 0x286ac0] ; mov rdi, qword ptr [rax] ; call 0x6c45c
write: rax rdi rsp 
000e23c3: RLP; mov rax, qword ptr [rip + 0x2869d2] ; lea rdi, [rip + 0x5b7b3] ; mov rsi, qword ptr [rax] ; call 0x6f93c
write: rax rdi rsi rsp 
000e2ac1: RLP; cmp eax, 1 ; lea rdi, [rip + 0x59231] ; mov esi, 0x80000 ; sbb r13, r13 ; and r13, 0xffffffffffffe200 ; lea rax, [r13 + 0x2010] ; add r13, 0x2000 ; sub rsp, rax ; xor eax, eax ; lea r12, [rsp + 0xf] ; and r12, 0xfffffffffffffff0 ; add r13, r12 ; mov qword ptr [rbp - 0x48], r13 ; mov qword ptr [rbp - 0x40], r13 ; call 0xd6819
write: eax esi r12 r13 rax rdi rflags rsp 
000e3059: RLP; movsxd rdi, r12d ; movsxd rdx, eax ; mov eax, 3 ; syscall ; test rdx, rdx ; mov eax, 0xffffffff ; jle 0xe30d6
write: eax rdi rdx rflags 
000e3591: RLP; mov rdi, rax ; call 0xb319c
write: rdi rsp 
000e35ea: RLP; mov qword ptr [rsp], rax ; mov eax, 8 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e37df: RLP; mov ecx, dword ptr [rsp + 0x14] ; mov ebx, eax ; mov r9d, 8 ; mov r8, qword ptr [rsp + 0x18] ; movsxd rdx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp + 4] ; movsxd r10, ecx ; mov ecx, 0x119 ; mov eax, ecx ; syscall ; cmp rax, -0x1000 ; mov rbp, rax ; ja 0xe382a
write: eax ebx ecx r10 r8 r9d rbp rdi rdx rflags rsi 
000e3bcd: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0xe8 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e3f0d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x113 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e3fad: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x114 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e407d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x116 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e41da: RLP; mov qword ptr [rsp], rax ; mov eax, 0x130 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e42fa: RLP; mov qword ptr [rsp], rax ; mov eax, 0x2b ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e439a: RLP; mov qword ptr [rsp], rax ; mov eax, 0x2a ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e44fd: RLP; mov ecx, dword ptr [rsp + 0x1c] ; mov ebp, eax ; xor r9d, r9d ; xor r8d, r8d ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp + 0x18] ; mov eax, ebx ; movsxd r10, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xe453f
write: eax ebp ecx r10 r8d r9d rbx rdi rdx rflags rsi 
000e458d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x2d ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e45fa: RLP; mov qword ptr [rsp], rax ; mov eax, 0x2f ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e469d: RLP; mov ecx, dword ptr [rsp + 0x1c] ; mov ebp, eax ; xor r9d, r9d ; xor r8d, r8d ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp + 0x18] ; mov eax, ebx ; movsxd r10, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xe46df
write: eax ebp ecx r10 r8d r9d rbx rdi rdx rflags rsi 
000e472a: RLP; mov qword ptr [rsp], rax ; mov eax, 0x2e ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax rdi rdx rsp 
000e479d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x2c ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e4a5d: RLP; mov esi, 4 ; mov rdi, r14 ; call 0xd6b3c
write: esi rdi rsp 
000e4b56: RLP; mov ecx, dword ptr [rsp + 0x1c] ; mov r8d, eax ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; movsxd rdi, dword ptr [rsp + 0x18] ; mov eax, ebx ; movsxd r10, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xe4b92
write: eax ecx r10 r8d rbx rdi rdx rflags rsi 
000e4c0c: RLP; mov ecx, dword ptr [rsp + 0x14] ; mov r9d, eax ; mov r8, qword ptr [rsp + 0x18] ; mov edx, dword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov eax, ebx ; movsxd rdi, dword ptr [rsp + 4] ; movsxd r10, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xe4c4c
write: eax ecx edx r10 r8 r9d rbx rdi rflags rsi 
000e4cc7: RLP; mov ecx, dword ptr [rsp + 0x1c] ; mov r8d, eax ; mov edx, dword ptr [rsp + 0x18] ; mov rsi, qword ptr [rsp + 0x10] ; movsxd rdi, dword ptr [rsp + 0xc] ; mov eax, ebx ; movsxd r10, ecx ; syscall ; cmp rax, -0x1000 ; mov rbx, rax ; ja 0xe4d02
write: eax ecx edx r10 r8d rbx rdi rflags rsi 
000e4e0d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x45 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e4e7d: RLP; mov qword ptr [rsp], rax ; mov r10, rcx ; mov eax, 0x46 ; syscall ; mov rdi, qword ptr [rsp] ; mov rdx, rax ; call 0xf081c
write: eax r10 rdi rdx rsp 
000e54b6: RLP; movabs rdi, 0x73646e6f636573 ; mov dword ptr [rbp - 0x69c], eax ; movsxd r9, r13d ; xor eax, eax ; mov qword ptr [rbp - 0x698], rdi ; mov edx, 3 ; mov word ptr [r12 + 0x24], ax ; mov dword ptr [r12 + 0x20], 0 ; lea rsi, [rbp - 0x430] ; mov byte ptr [r12 + 0x26], 0 ; mov rdi, r9 ; mov byte ptr [rbp - 0x689], 0x73 ; mov eax, 0x14 ; syscall ; jmp 0xe516a
read: ax eax r13d r9 rdi 
write: eax edx r9 rdi rflags rsi 
000e5530: RLP; lea rdx, [rip + 0x5154f] ; mov r8d, eax ; mov rsi, r13 ; mov rdi, rsp ; mov rcx, rbx ; xor eax, eax ; call 0x5227c
write: eax r8d rcx rdi rdx rflags rsi rsp 
000e554e: RLP; mov rdi, rsp ; xor eax, eax ; mov edx, 0x1b6 ; mov esi, 0x20241 ; call 0xd6819
write: eax edx esi rdi rflags rsp 
000e5862: RLP; mov rdi, qword ptr [rip + 0x2839db] ; call 0x1f46c
write: rdi rsp 
000e63d8: RLP; mov r9, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, qword ptr [rsp + 0x10] ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x38 ; ret
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000e6449: RLP; mov r9, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x28] ; mov rdi, qword ptr [rsp + 0x20] ; mov rsi, qword ptr [rsp + 0x18] ; mov rdx, qword ptr [rsp + 0x10] ; mov rcx, qword ptr [rsp + 8] ; mov rax, qword ptr [rsp] ; add rsp, 0x40 ; ret
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000e78e0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x284c2e] ; lea rdx, [rip + 0x282edf] ; lea rsi, [rip + 0x284c40] ; lea rdi, [rip + 0xc19] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000e7f3d: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rbp + 8] ; mov rdx, qword ptr [rbp] ; lea rcx, [rip + 0x4c9b0] ; lea rsi, [rip + 0x4eb7e] ; mov rdi, rbx ; test rax, rax ; cmovne rcx, rax ; xor eax, eax ; call 0x5212c
write: eax rax rcx rdi rdx rflags rsi rsp 
000e83a0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x284316] ; lea rcx, [rip + 0x284307] ; lea rdx, [rip + 0x284310] ; lea rsi, [rip + 0x1dec9] ; lea rdi, [rip + 0x4e72d] ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; call 0x1053dc
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000e848e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x284228] ; lea rcx, [rip + 0x284219] ; lea rdx, [rip + 0x284222] ; lea rsi, [rip + 0x1dddb] ; lea rdi, [rip + 0x4e648] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000e856a: RLP; add rsp, 0x80 ; lea r8, [rip + 0x284144] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x284143] ; lea r9, [rip + 0x284134] ; lea rdx, [rip + 0x1dcf5] ; lea rsi, [rip + 0x4e559] ; lea rdi, [rip + 0x4e564] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; call 0x1055fc
write: r8 r9 rcx rdi rdx rflags rsi rsp 
000e86da: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000e8c67: RLP; cmp byte ptr [rbx], 0 ; mov rdi, rax ; mov eax, 0x22 ; je 0xe8c7c
write: eax rdi rflags 
000e8d3c: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov r15, qword ptr [rip + 0x28010b] ; add r15, qword ptr fs:[0] ; lea rbx, [r12 + r13 - 1] ; nop dword ptr [rax + rax] ; mov byte ptr [rbx], 0xff ; mov rdx, rbp ; mov esi, r13d ; mov rdi, r12 ; call 0x76abc
write: esi r15 rbx rdi rdx rflags rsp 
000e8f98: RLP; add rsp, 0x80 ; lea rdi, [rip + 0x4db79] ; xor eax, eax ; mov edx, 0x180 ; mov esi, 0x80041 ; call 0xd680c
write: eax edx esi rdi rflags rsp 
000e92f0: RLP; add rsp, 0x80 ; lea rdi, [rip + 0xa1e] ; lea r8, [rip + 0x2833f7] ; lea rdx, [rip + 0x2814e0] ; lea rsi, [rip + 0x283409] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000e9961: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rcx, qword ptr [r13 + 8] ; lea rbx, [rip + 0x4af90] ; mov rdx, qword ptr [r13] ; lea rsi, [rip + 0x4d15a] ; mov rdi, rbp ; lea r12, [rip + 0x4d197] ; test rcx, rcx ; cmove rcx, rbx ; xor eax, eax ; call 0x5212c
write: eax r12 rbx rcx rdi rdx rflags rsi rsp 
000e9ba0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x282c6e] ; lea rcx, [rip + 0x282c5f] ; lea rdx, [rip + 0x282c68] ; lea rsi, [rip + 0x1c8e9] ; lea rdi, [rip + 0x4cf6b] ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; call 0x1053dc
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000e9c8e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x282b80] ; lea rcx, [rip + 0x282b71] ; lea rdx, [rip + 0x282b7a] ; lea rsi, [rip + 0x1c7fb] ; lea rdi, [rip + 0x4ce86] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000e9d6a: RLP; add rsp, 0x80 ; lea r8, [rip + 0x282a9c] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x282a9b] ; lea r9, [rip + 0x282a8c] ; lea rdx, [rip + 0x1c715] ; lea rsi, [rip + 0x4cd97] ; lea rdi, [rip + 0x4cda2] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; call 0x1055fc
write: r8 r9 rcx rdi rdx rflags rsi rsp 
000e9eda: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000ea3dd: RLP; cmp byte ptr [r14], 0 ; mov rdi, rax ; mov eax, 0x22 ; je 0xea3fc
write: eax rdi rflags 
000ea4bb: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbp + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rip + 0x27e98c] ; add rax, qword ptr fs:[0] ; lea rbx, [r12 + r14 - 1] ; mov r13d, r14d ; mov qword ptr [rsp + 8], rax ; nop word ptr [rax + rax] ; mov byte ptr [rbx], 0xff ; mov rdx, rbp ; mov esi, r13d ; mov rdi, r12 ; call 0x76abc
write: esi r13d rax rbx rdi rdx rflags rsp 
000ea9b0: RLP; add qword ptr [rbp + 0x38], r13 ; mov rdi, rbx ; mov rdx, r13 ; mov esi, 0x20 ; mov rbx, r12 ; mov r12, r13 ; call 0x891bc
write: esi r12 rbx rdi rdx rflags rsp 
000ead1d: RLP; mov rdx, qword ptr [rbx + 0x38] ; mov rdi, qword ptr [rbx + 0x30] ; cmp rdx, rdi ; jbe 0xead49
read: rdi rdx rflags 
write: rdi rdx rflags 
000ead45: RLP; mov rdi, qword ptr [rbx + 0x30] ; call 0x1f46c
write: rdi rsp 
000ead52: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
000eada5: RLP; mov rcx, qword ptr [rbx + 0x30] ; mov rdx, qword ptr [rbx + 0x38] ; lea rsi, [rip + 0x4bdaf] ; mov rdi, qword ptr [rbx] ; xor eax, eax ; sub rdx, rcx ; call 0x6bcbc
write: eax rcx rdi rdx rflags rsi rsp 
000eadc5: RLP; mov rdi, qword ptr [rbx + 0x30] ; mov rsi, qword ptr [rbx + 0x40] ; mov qword ptr [rbx + 0x20], 0 ; sub rsi, rdi ; mov qword ptr [rbx + 0x38], rdi ; cmp rbp, rsi ; jbe 0xead89
read: rbp rdi rflags rsi 
write: rdi rflags rsi 
000eaef0: RLP; movsxd rdi, eax ; cmp rbx, rdi ; ja 0xeaf2c
read: eax rbx rdi rflags 
write: rdi rflags 
000eb355: RLP; mov rdi, qword ptr [rbp + 0x10] ; call 0x1f46c
write: rdi rsp 
000eb362: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
000eb593: RLP; mov r12d, eax ; mov rax, qword ptr [rbx + 0x28] ; lea rsi, [rip - 0x365] ; xor ecx, ecx ; mov rdi, rbx ; mov rdx, qword ptr [rax + 0x30] ; call 0xeb14c
write: ecx r12d rax rdi rdx rflags rsi rsp 
000eb849: RLP; mov rcx, qword ptr [rbp + 0x20] ; mov rdx, rbx ; mov esi, 0x2000003 ; mov rdi, rax ; mov r14, rax ; call 0xeb7cc
write: esi r14 rcx rdi rdx rsp 
000ebb34: RLP; mov rbp, qword ptr [rbx + 8] ; mov rax, qword ptr [rbp + 0x38] ; sub rax, qword ptr [rbp + 0x30] ; mov rdi, rbp ; cmp rax, qword ptr [rbp + 0x20] ; ja 0xebbec
write: rax rbp rdi rflags 
000ebbf5: RLP; mov rdi, qword ptr [rbx + 8] ; jmp 0xebb4d
write: rdi 
000ebefc: RLP; mov rdi, qword ptr [rbx] ; or r14d, eax ; test rdi, rdi ; jne 0xebecc
read: eax r14d rdi rflags 
write: r14d rdi rflags 
000ec301: RLP; lea rsi, [rax + 6] ; mov rdi, r12 ; call 0xec1cc
write: rdi rsi rsp 
000ec311: RLP; mov edx, dword ptr [rbp + 8] ; lea rsi, [rip + 0x4a858] ; mov rcx, r13 ; mov rdi, r12 ; xor eax, eax ; call 0xeae2c
write: eax edx rcx rdi rflags rsi rsp 
000ec3d3: RLP; mov rcx, r14 ; mov rdx, r12 ; mov esi, 0x2000006 ; mov rdi, rax ; mov qword ptr [rsp + 0x28], rax ; call 0xeb7cc
write: esi rcx rdi rdx rsp 
000ec438: RLP; mov rdi, qword ptr [rbp + 0x38] ; mov rcx, r12 ; sub rcx, r14 ; lea rax, [rdi + rcx] ; cmp qword ptr [rbp + 0x40], rax ; jae 0xec46d
write: rax rcx rdi rflags 
000ec4c9: RLP; test eax, eax ; sete r15b ; mov rdi, qword ptr [rbx] ; test rdi, rdi ; jne 0xec4ac
read: eax rdi rflags 
write: r15b rdi rflags 
000ec667: RLP; add rax, 0x1f ; mov r15, qword ptr [r13] ; shl r14, 4 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea r12, [rsp + 0xf] ; add r14, r15 ; and r12, 0xfffffffffffffff0 ; mov qword ptr [rbp - 0x38], r12 ; nop ; mov rax, qword ptr [r15 + 0x28] ; lea rsi, [rip - 0xbb] ; mov rdi, r15 ; mov rcx, rbx ; add r15, 0x30
write: r12 r14 r15 rax rcx rdi rflags rsi rsp 
000ec8ba: RLP; mov rsi, rbp ; mov rdx, rax ; mov rdi, rbx ; xor eax, eax ; call 0xeae2c
write: eax rdi rdx rflags rsi rsp 
000ec8f5: RLP; mov rcx, qword ptr [rsp + 8] ; mov rdx, rax ; mov rdi, rbx ; xor eax, eax ; mov rsi, rcx ; call 0xeae2c
write: eax rcx rdi rdx rflags rsi rsp 
000ecc53: RLP; mov rdi, qword ptr [rbp + 0x10] ; mov qword ptr [rsp + 8], rax ; mov qword ptr [rsp + 0x10], rdi ; call 0x856dc
read: rax rdi rip rsp 
write: rdi rsp 
000ecc6a: RLP; mov edi, eax ; mov r12, rdi ; mov qword ptr [rsp + 0x18], rdi ; mov rdi, qword ptr [r13 + 0x10] ; call 0x856dc
read: eax rdi rip rsp 
write: edi r12 rdi rsp 
000ecc81: RLP; lea rdi, [r12 + rax + 1] ; call 0x1f3cc
write: rdi rsp 
000ecce2: RLP; mov r8d, dword ptr [rsp + 0x34] ; mov rsi, qword ptr [rsp + 0x20] ; mov rdi, rax ; lea rdx, [r8 + r8*2] ; shl rdx, 4 ; call 0x8e3dc
write: r8d rdi rdx rflags rsi rsp 
000ecd00: RLP; mov rdx, qword ptr [rsp + 0x18] ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, r12 ; call 0x8e3dc
write: rdi rdx rsi rsp 
000ecd16: RLP; lea ecx, [r14 - 1] ; mov rdx, r12 ; mov rax, qword ptr [rsp + 8] ; sub rdx, qword ptr [rsp + 0x10] ; lea rdi, [rcx + rcx*2 + 3] ; shl rdi, 4 ; add rdi, rax ; nop word ptr [rax + rax] ; add qword ptr [rax + 0x10], rdx ; add rax, 0x30 ; cmp rax, rdi ; jne 0xecd3c
read: r12 rax rdi rdx rflags 
write: ecx rax rdi rdx rflags 
000ece05: RLP; mov rdi, qword ptr [rbp + 0x10] ; call 0x1f46c
write: rdi rsp 
000ed1d4: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
000ed206: RLP; mov rdi, rbp ; call 0x6a04c
write: rdi rsp 
000ed282: RLP; lea rsi, [rip + 0x4997d] ; mov rdx, rax ; mov rdi, rbp ; xor eax, eax ; call 0x6bcbc
write: eax rdi rdx rflags rsi rsp 
000ed337: RLP; lea rdi, [rip + 0x498a2] ; call 0x3819c
write: rdi rsp 
000ed815: RLP; mov rdi, rax ; mov r13, rax ; call 0x856dc
write: r13 rdi rsp 
000ed973: RLP; mov rdx, qword ptr [r14] ; mov r12, rax ; mov rcx, r14 ; mov esi, 0x2000005 ; mov rdi, r12 ; call 0xeb7cc
write: esi r12 rcx rdi rdx rsp 
000eda6b: RLP; mov rdi, qword ptr [rbp - 0x90] ; test rdi, rdi ; je 0xeda80
read: rdi rflags 
write: rdi rflags 
000eda80: RLP; mov rdi, r13 ; call 0xead0c
write: rdi rsp 
000edac5: RLP; mov r8d, dword ptr [rbp - 0x78] ; mov r9, r15 ; mov rdi, qword ptr [rbp - 0x80] ; mov rcx, rax ; xor edx, edx ; xor esi, esi ; xor eax, eax ; call 0xed0ac
write: eax edx esi r8d r9 rcx rdi rflags rsp 
000edc58: RLP; mov rdx, r12 ; mov rsi, rax ; mov rdi, r13 ; xor eax, eax ; call 0xeae2c
write: eax rdi rdx rflags rsi rsp 
000edcc0: RLP; mov r8, r13 ; mov rcx, rax ; xor edx, edx ; xor esi, esi ; mov rdi, r14 ; xor eax, eax ; call 0xed0ac
write: eax edx esi r8 rcx rdi rflags rsp 
000edd16: RLP; mov rbx, qword ptr [rax] ; mov r12d, dword ptr [rax + 8] ; lea rdx, [rip + 0x48ee7] ; mov qword ptr [rbp - 0x90], rax ; mov esi, r12d ; mov rdi, rbx ; call 0xecf8c
write: esi r12d rbx rdi rdx rsp 
000eddb6: RLP; mov rdx, qword ptr [rbp - 0xa0] ; mov rsi, rax ; mov rdi, r13 ; xor eax, eax ; mov rcx, rdx ; call 0xeae2c
write: eax rcx rdi rdx rflags rsi rsp 
000ede19: RLP; lea rcx, [rax + 0x1e] ; mov rdx, rax ; xor esi, esi ; and rcx, 0xfffffffffffffff0 ; sub rsp, rcx ; lea rdi, [rsp + 0xf] ; mov qword ptr [rbp - 0x78], rdi ; and qword ptr [rbp - 0x78], 0xfffffffffffffff0 ; mov rdi, qword ptr [rbp - 0x78] ; call 0x891bc
read: esi rax rcx rdi rip rsp 
write: esi rcx rdi rdx rflags rsp 
000ede91: RLP; mov rcx, qword ptr [rbp - 0xa0] ; lea rsi, [rip + 0x48d78] ; mov rdx, rax ; mov rdi, r14 ; xor eax, eax ; call 0xeae2c
write: eax rcx rdi rdx rflags rsi rsp 
000ee01e: RLP; mov rdi, rax ; mov r13, rax ; call 0x856dc
write: r13 rdi rsp 
000ee13d: RLP; mov rbx, rax ; mov rax, qword ptr [rbp - 0x78] ; mov esi, dword ptr [r12 + 8] ; mov rcx, r14 ; mov rdi, rbx ; mov rdx, qword ptr [rax + 0x28] ; call 0xeb7cc
write: esi rax rbx rcx rdi rdx rsp 
000ee2e2: RLP; mov rdx, qword ptr [r13] ; lea rsi, [rip + 0x48949] ; xor eax, eax ; mov rdi, r15 ; call 0xeae2c
write: eax rdi rdx rflags rsi rsp 
000ee8df: RLP; lea rax, [rsp + 0x100] ; mov rsi, qword ptr [rsp + 8] ; lea rdx, [rsp + 0x18] ; lea rdi, [rsp + 0x10] ; mov dword ptr [rsp + 0x18], 0x10 ; mov dword ptr [rsp + 0x1c], 0x30 ; mov qword ptr [rsp + 0x20], rax ; lea rax, [rsp + 0x30] ; mov qword ptr [rsp + 0x28], rax ; call 0x7511c
write: rax rdi rdx rsi rsp 
000ee949: RLP; mov rdi, qword ptr [rsp + 0x10] ; call 0x1f46c
write: rdi rsp 
000ee957: RLP; mov rdi, rbx ; mov edx, 0x104 ; mov rsi, rbp ; call 0xee7ac
write: edx rdi rsi rsp 
000ee96b: RLP; mov rdi, rbp ; call 0x6a04c
write: rdi rsp 
000eea4c: RLP; add qword ptr [rbx + 0x18], 1 ; mov rdi, qword ptr [rbp] ; test rdi, rdi ; jne 0xeea3c
read: rdi rflags 
write: rdi rflags 
000eeea7: RLP; mov rdi, qword ptr [rbp] ; test rdi, rdi ; jne 0xeee8c
read: rdi rflags 
write: rdi rflags 
000eef58: RLP; mov rdi, rbx ; mov rsi, rax ; xor eax, eax ; call 0xee84c
write: eax rdi rflags rsi rsp 
000ef013: RLP; mov rax, qword ptr [rbp - 0x140] ; mov r14, qword ptr [rbp - 0x138] ; lea rbx, [rax + 1] ; mov rax, qword ptr [rbp - 0x148] ; lea rsi, [rbx + rbx*8] ; lea rcx, [rsi + rax*4 + 4] ; mov rax, qword ptr [rbp - 0x150] ; add rcx, r14 ; shl rcx, 3 ; lea rdi, [rcx + rax + 1] ; mov qword ptr [rbp - 0x170], rsi ; mov qword ptr [rbp - 0x158], rcx ; mov r15d, 0xc ; call 0x1f3cc
write: r14 r15d rax rbx rcx rdi rflags rsi rsp 
000ef1ba: RLP; mov r8, qword ptr [rbp - 0x110] ; mov r13, qword ptr [rbp - 0xc0] ; mov rsi, rax ; mov qword ptr [rbp - 0xb8], rax ; mov rbx, qword ptr [rbp - 0x158] ; xor eax, eax ; mov ecx, 0xc ; cmp rsi, r13 ; mov dword ptr [rbp - 0xa8], 1 ; lea rdx, [rbx + 0x70] ; mov rdi, rdx ; rep stosq qword ptr [rdi], rax ; mov eax, dword ptr [rbp - 0x164] ; mov qword ptr [rbp - 0xa0], r8 ; mov dword ptr [rbp - 0x84], r12d
read: eax r12d r13 r8 rax rcx rdi rdx rflags rsi 
write: eax ecx r13 r8 rbx rcx rdi rdx rflags rsi 
000ef8ce: RLP; mov rsi, qword ptr [r12] ; mov rcx, qword ptr [rbp - 0x158] ; lea rdx, [rip + 0x46756] ; test rsi, rsi ; lea rdi, [rcx + 0x70] ; mov rcx, rax ; cmovne rdx, rsi ; lea rsi, [rip + 0x47385] ; xor eax, eax ; call 0xee84c
write: eax rcx rdi rdx rflags rsi rsp 
000efc8c: RLP; mov rcx, qword ptr [rbp - 0x158] ; lea rsi, [rip + 0x46fd8] ; mov edx, ebx ; lea rdi, [rcx + 0x70] ; mov rcx, rax ; xor eax, eax ; call 0xee84c
write: eax edx rcx rdi rflags rsi rsp 
000efdb6: RLP; mov rdi, qword ptr [rbp - 0x58] ; mov rsi, rax ; mov rdx, r12 ; xor eax, eax ; call 0x5212c
write: eax rdi rdx rflags rsi rsp 
000f0f99: RLP; mov rcx, qword ptr [rsp + 0x18] ; mov r8d, eax ; mov rdx, qword ptr [rsp + 0x10] ; movsxd rsi, dword ptr [rsp + 0xc] ; mov rdi, rbx ; mov eax, 0xe6 ; mov r10, rcx ; syscall ; mov edi, r8d ; mov ebx, eax ; call 0xf081c
write: eax ebx edi r10 r8d rcx rdi rdx rsi rsp 
000f100d: RLP; mov rdi, r12 ; mov qword ptr [r13], rax ; call qword ptr [rip + 0x27c182]
write: rdi rsp 
000f10b8: RLP; mov rdi, qword ptr [rip + 0x27c0d5] ; lea rsi, [rip + 0x45c6b] ; mov qword ptr [rip + 0x27c0df], rax ; call 0x11c3dc
write: rdi rsi rsp 
000f12ba: RLP; mov rdi, qword ptr [r14 + 0x10] ; mov rdx, rax ; test rdi, rdi ; je 0xf14cc
read: rax rdi rflags 
write: rdi rdx rflags 
000f1597: RLP; mov rdi, qword ptr [rsp + 0x90] ; mov qword ptr [rsp + 0xa8], rax ; test rdi, rdi ; je 0xf17c4
read: rax rdi rflags 
write: rdi rflags 
000f15ed: RLP; mov qword ptr [rsp + 0xc8], rax ; mov rax, qword ptr [rsp + 0x98] ; mov r8d, 6 ; mov qword ptr [rsp + 0x40], 5 ; mov qword ptr [rsp + 0x38], 4 ; mov edx, 3 ; mov rdi, qword ptr [rbx] ; mov rcx, rdx ; shl rcx, 4 ; cmp rdi, rax ; jb 0xf17a4
read: rax rcx rdi rdx rflags 
write: edx r8d rax rcx rdi rflags 
000f1669: RLP; mov rdx, qword ptr [rsp + 0x38] ; mov rcx, qword ptr [rsp + 0x30] ; mov r8, qword ptr [rsp + 0x48] ; shl rdx, 4 ; sub rcx, rax ; mov qword ptr [rsp + rdx + 0xa0], rax ; mov rax, qword ptr [rsp + 0x40] ; mov qword ptr [rsp + rdx + 0xa8], rcx ; lea rdx, [rip + 0x43677] ; shl rax, 4 ; mov qword ptr [rsp + rax + 0xa0], rdx ; mov qword ptr [rsp + rax + 0xa8], 1 ; nop word ptr [rax + rax] ; mov rdi, qword ptr [rbx] ; mov rax, r8
write: r8 rax rcx rdi rdx rflags 
000f1e60: RLP; lea rax, [rip + 0x276ab5] ; lea rdx, [r12 - 1] ; mov byte ptr [rbx], 0 ; mov rcx, rbx ; mov rsi, rbx ; mov rdi, rsp ; mov qword ptr [rsp + 0xd8], rax ; mov rbp, rsp ; call 0x7aedc
write: rax rbp rcx rdi rdx rsi rsp 
000f1fef: RLP; mov rdi, rbx ; mov rdx, r13 ; mov rsi, r12 ; call 0x4797c
write: rdi rdx rsi rsp 
000f2229: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f2406: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f2491: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rbp] ; mov qword ptr [r8 + 8], r13 ; add dword ptr [r8 + 4], 1 ; test r12d, r12d ; jle 0xf24b5
write: r8 rdi rflags rsp 
000f258a: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f26e9: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f2774: RLP; add rsp, 0x80 ; mov rdx, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rip + 0x277f8b] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rax, qword ptr [rdi + 8] ; cmp rax, qword ptr [rdi + 0x10] ; jae 0xf2884
write: rax rdi rdx rflags rsp 
000f28fa: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f2ad8: RLP; mov rdi, qword ptr [rsp + 0x20] ; call 0x1f46c
write: rdi rsp 
000f2cfe: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f306f: RLP; add rsp, 0x80 ; mov rdx, qword ptr [r13 + 0x88] ; mov qword ptr [rdx + 8], r8 ; add dword ptr [rdx + 4], 1 ; mov rdx, rbx ; mov rsi, r9 ; mov rdi, r13 ; call 0x7994c
write: rdi rdx rflags rsi rsp 
000f318c: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f36d3: RLP; mov esi, 1 ; mov rdi, rbx ; call 0x73bdc
write: esi rdi rsp 
000f370f: RLP; mov rdx, r14 ; mov rdi, rbx ; mov rsi, r13 ; call 0x525dc
write: rdi rdx rsi rsp 
000f3949: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f3b26: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f3bb1: RLP; add rsp, 0x80 ; mov r8, qword ptr [rbx + 0x88] ; mov rdi, qword ptr [rbp] ; mov qword ptr [r8 + 8], r13 ; add dword ptr [r8 + 4], 1 ; test r12d, r12d ; jle 0xf3bd5
write: r8 rdi rflags rsp 
000f3caa: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f3e09: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f3fd6: RLP; add rsp, 0x80 ; mov rdi, rsi ; call 0x2203c
write: rdi rflags rsp 
000f441e: RLP; lea rax, [rip + 0x274337] ; mov rcx, rbx ; mov edx, 0x64 ; mov rsi, rbx ; mov rdi, rsp ; mov rbp, rsp ; mov qword ptr [rsp + 0xd8], rax ; call 0x7aedc
write: edx rax rbp rcx rdi rsi rsp 
000f4518: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
000f465b: RLP; lea rax, [rip + 0x27403a] ; mov rdi, rsp ; mov qword ptr [rsp + 0xd8], rax ; call 0x77edc
write: rax rdi rsp 
000f4676: RLP; mov esi, ebp ; mov rdi, rsp ; call 0x786dc
write: esi rdi rsp 
000f46b3: RLP; mov ebp, eax ; mov rax, qword ptr [rsp + 0xd8] ; xor esi, esi ; mov rdi, rbx ; call qword ptr [rax + 0x10]
write: ebp esi rax rdi rflags rsp 
000f4749: RLP; lea rax, [rip + 0x271bec] ; mov rcx, qword ptr [rbx + 0x18] ; mov rsi, qword ptr [rbx + 0x10] ; mov qword ptr [rsp + 0xe8], rax ; mov rax, qword ptr [rbx + 0x20] ; mov rdi, rcx ; sub rdi, rsi ; sub rax, rcx ; add edi, eax ; jne 0xf482c
read: eax edi rax rcx rdi rflags rsi 
write: edi rax rcx rdi rflags rsi 
000f4a31: RLP; nop ; mov rdi, r10 ; mov esi, ebx ; mov rbx, qword ptr [rdi] ; mov r12, qword ptr [rdi + 0x10] ; mov r13, qword ptr [rdi + 0x18] ; mov r14, qword ptr [rdi + 0x20] ; mov r15, qword ptr [rdi + 0x28] ; mov eax, esi ; mov rsp, r8 ; mov rbp, r9 ; jmp rdx
write: eax esi r12 r13 r14 r15 rbp rbx rdi rsp 
000f4c18: RLP; mov rdi, qword ptr [rip + 0x2785ad] ; lea rsi, [rip + 0x421ff] ; mov qword ptr [rip + 0x278597], rax ; call 0x11c3dc
write: rdi rsi rsp 
000f4db9: RLP; mov rcx, qword ptr [rip + 0x27840c] ; mov edx, dword ptr [rsp + 0x1c] ; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, qword ptr [rsp + 8] ; jmp 0xf4d7b
write: edx rcx rdi rsi 
000f4ef6: RLP; lea rdx, [rip + 0x41f42] ; mov dword ptr [rsp], ebx ; mov r9d, r14d ; lea rbp, [rax + 0x58] ; mov r8d, r13d ; mov ecx, r12d ; mov esi, 0x12 ; xor eax, eax ; mov rdi, rbp ; call 0x5227c
write: eax ecx esi r8d r9d rbp rdi rdx rflags rsp 
000f5404: RLP; mov qword ptr [rsp + 8], rbx ; mov qword ptr [rsp], r15 ; mov rcx, r12 ; mov r9, qword ptr [rsp + 0x20] ; mov r8, qword ptr [rsp + 0x18] ; mov esi, ebp ; mov edx, dword ptr [rsp + 0x14] ; mov rdi, r14 ; call qword ptr [rsp + 0x40]
write: edx esi r8 r9 rcx rdi rsp 
000f550d: RLP; mov rdi, r12 ; call 0x103e0c
write: rdi rsp 
000f5cc1: RLP; mov r8, r14 ; mov qword ptr [rsp], rbx ; mov r9, r15 ; mov rcx, qword ptr [rsp + 0x38] ; mov rdx, rbp ; mov esi, r13d ; mov rdi, r12 ; call qword ptr [rsp + 0x50]
write: esi r8 r9 rcx rdi rdx rsp 
000f60b7: RLP; mov r8, r14 ; mov r9, rbx ; mov rcx, r13 ; mov rdx, qword ptr [rsp + 0x38] ; mov rsi, rbp ; mov rdi, r12 ; call qword ptr [rsp + 0x50]
write: r8 r9 rcx rdi rdx rsi rsp 
000f6320: RLP; add rsp, 0x80 ; mov r9, qword ptr [rip + 0x272b26] ; add r9, qword ptr fs:[0] ; lea r8, [rip + 0x276f9e] ; lea rdx, [rip + 0x2744d7] ; lea rsi, [rip + 0x276fb0] ; lea rdi, [rip + 0x229] ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9 rdi rdx rflags rsi rsp 
000f6403: RLP; add rsp, 0x80 ; lea rax, [rip + 0x276f17] ; lea r8, [rip + 0x276f1c] ; lea rcx, [rip + 0x276f0d] ; lea rdx, [rip + 0x276f16] ; lea rsi, [rip + 0xfb1f] ; lea rdi, [rip + 0x40a37] ; mov qword ptr [rsp], rax ; mov dword ptr [rsp + 8], 1 ; call 0x1053dc
write: r8 rax rcx rdi rdx rflags rsi rsp 
000f64ee: RLP; add rsp, 0x80 ; lea r8, [rip + 0x276e38] ; lea rcx, [rip + 0x276e29] ; lea rdx, [rip + 0x276e32] ; lea rsi, [rip + 0xfa3b] ; lea rdi, [rip + 0x4095e] ; mov r9d, 1 ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000f65ca: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x27287c] ; add rax, qword ptr fs:[0] ; lea r8, [rip + 0x276d44] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x276d43] ; lea r9, [rip + 0x276d34] ; lea rdx, [rip + 0xf945] ; lea rsi, [rip + 0x4085d] ; lea rdi, [rip + 0x4086c] ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov qword ptr [rsp + 0x30], rax ; lea rax, [rip + 0x276cfd]
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000f6d60: RLP; add rsp, 0x80 ; mov r9, qword ptr [rip + 0x2720e6] ; add r9, qword ptr fs:[0] ; lea r8, [rip + 0x27663e] ; lea rdx, [rip + 0x273aaf] ; lea rsi, [rip + 0x276640] ; lea rdi, [rip + 0x229] ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9 rdi rdx rflags rsi rsp 
000f6e43: RLP; add rsp, 0x80 ; lea rax, [rip + 0x27659f] ; lea r8, [rip + 0x2765a4] ; lea rcx, [rip + 0x276595] ; lea rdx, [rip + 0x27659e] ; lea rsi, [rip + 0xf16f] ; lea rdi, [rip + 0x40029] ; mov qword ptr [rsp], rax ; mov dword ptr [rsp + 8], 1 ; call 0x1053dc
write: r8 rax rcx rdi rdx rflags rsi rsp 
000f6f2e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2764c0] ; lea rcx, [rip + 0x2764b1] ; lea rdx, [rip + 0x2764ba] ; lea rsi, [rip + 0xf08b] ; lea rdi, [rip + 0x3ff4f] ; mov r9d, 1 ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000f700a: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x271e3c] ; add rax, qword ptr fs:[0] ; lea r8, [rip + 0x2763cc] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x2763cb] ; lea r9, [rip + 0x2763bc] ; lea rdx, [rip + 0xef95] ; lea rsi, [rip + 0x3fe4f] ; lea rdi, [rip + 0x3fe5c] ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov qword ptr [rsp + 0x30], rax ; lea rax, [rip + 0x276385]
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000f71c4: RLP; mov r9, rbx ; mov r8, r15 ; mov rcx, r14 ; mov rdx, r13 ; mov rsi, rbp ; mov rdi, qword ptr [rsp + 8] ; call qword ptr [rsp + 0x30]
write: r8 r9 rcx rdi rdx rsi rsp 
000f77b0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x275cae] ; lea rdx, [rip + 0x27307f] ; lea rsi, [rip + 0x275cb0] ; lea rdi, [rip + 0x239] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000f7893: RLP; add rsp, 0x80 ; lea rax, [rip + 0x275bff] ; lea r8, [rip + 0x275c04] ; lea rcx, [rip + 0x275bf5] ; lea rdx, [rip + 0x275bfe] ; lea rsi, [rip + 0xe58f] ; lea rdi, [rip + 0x3f61b] ; mov qword ptr [rsp], rax ; mov dword ptr [rsp + 8], 0 ; call 0x1053dc
write: r8 rax rcx rdi rdx rflags rsi rsp 
000f797e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x275b20] ; lea rcx, [rip + 0x275b11] ; lea rdx, [rip + 0x275b1a] ; lea rsi, [rip + 0xe4ab] ; lea rdi, [rip + 0x3f543] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000f7a5a: RLP; add rsp, 0x80 ; lea rax, [rip + 0x275a38] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea r8, [rip + 0x275a2b] ; lea r9, [rip + 0x275a2c] ; lea rcx, [rip + 0x275a2d] ; lea rdx, [rip + 0xe3be] ; lea rsi, [rip + 0x3f44a] ; lea rdi, [rip + 0x3f45b] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], rax
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000f7d6a: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000f817a: RLP; mov r9, r15 ; mov r8, r14 ; mov rcx, r13 ; mov rdx, rbx ; mov rsi, r12 ; mov rdi, qword ptr [rsp + 8] ; call qword ptr [rsp + 0x30]
write: r8 r9 rcx rdi rdx rsi rsp 
000f8800: RLP; add rsp, 0x80 ; lea r8, [rip + 0x274dae] ; lea rdx, [rip + 0x27204f] ; lea rsi, [rip + 0x274dc0] ; lea rdi, [rip + 0x239] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000f88e3: RLP; add rsp, 0x80 ; lea rax, [rip + 0x274d17] ; lea r8, [rip + 0x274d1c] ; lea rcx, [rip + 0x274d0d] ; lea rdx, [rip + 0x274d16] ; lea rsi, [rip + 0xd5bf] ; lea rdi, [rip + 0x3e622] ; mov qword ptr [rsp], rax ; mov dword ptr [rsp + 8], 0 ; call 0x1053dc
write: r8 rax rcx rdi rdx rflags rsi rsp 
000f89ce: RLP; add rsp, 0x80 ; lea r8, [rip + 0x274c38] ; lea rcx, [rip + 0x274c29] ; lea rdx, [rip + 0x274c32] ; lea rsi, [rip + 0xd4db] ; lea rdi, [rip + 0x3e549] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000f8aaa: RLP; add rsp, 0x80 ; lea rax, [rip + 0x274b50] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea r8, [rip + 0x274b43] ; lea r9, [rip + 0x274b44] ; lea rcx, [rip + 0x274b45] ; lea rdx, [rip + 0xd3ee] ; lea rsi, [rip + 0x3e451] ; lea rdi, [rip + 0x3e460] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], rax
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000f8bb0: RLP; add rsp, 0x80 ; lea r8, [rip + 0x274a6e] ; lea rdx, [rip + 0x271ca7] ; lea rsi, [rip + 0x274a70] ; lea rdi, [rip + 0x579] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000f8fd3: RLP; add rsp, 0x80 ; lea rax, [rip + 0x2746d7] ; lea r8, [rip + 0x2746dc] ; lea rcx, [rip + 0x2746cd] ; lea rdx, [rip + 0x2746d6] ; lea rsi, [rip + 0xd18f] ; lea rdi, [rip + 0x3df55] ; mov qword ptr [rsp], rax ; mov dword ptr [rsp + 8], 0 ; call 0x1053dc
write: r8 rax rcx rdi rdx rflags rsi rsp 
000f90be: RLP; add rsp, 0x80 ; lea r8, [rip + 0x2745f8] ; lea rcx, [rip + 0x2745e9] ; lea rdx, [rip + 0x2745f2] ; lea rsi, [rip + 0xd0ab] ; lea rdi, [rip + 0x3de7b] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000f919a: RLP; add rsp, 0x80 ; lea rax, [rip + 0x274510] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea r8, [rip + 0x274503] ; lea r9, [rip + 0x274504] ; lea rcx, [rip + 0x274505] ; lea rdx, [rip + 0xcfbe] ; lea rsi, [rip + 0x3dd84] ; lea rdi, [rip + 0x3dd91] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], rax
write: r8 r9 rax rcx rdi rdx rflags rsi rsp 
000f930a: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000f9871: RLP; lea rsi, [rip + 0x3d721] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov rcx, r13 ; mov rdi, r14 ; mov ebx, eax ; call 0x10506c
write: ebx edx r8d r9d rcx rdi rflags rsi rsp 
000f9bf1: RLP; lea rsi, [rip + 0x3d3c0] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov rcx, r13 ; mov rdi, r14 ; mov ebx, eax ; call 0x10506c
write: ebx edx r8d r9d rcx rdi rflags rsi rsp 
000fa3ce: RLP; lea rdx, [rax + 0x1e] ; lea rsi, [rbp - 0x60] ; lea r8, [rbp - 0x68] ; mov rcx, rax ; mov rdi, rbx ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; lea rdx, [rsp + 0xf] ; and rdx, 0xfffffffffffffff0 ; call 0xb1ddc
write: r8 rcx rdi rdx rflags rsi rsp 
000fa42c: RLP; mov rdi, rax ; lea rax, [rax + 0x27] ; mov ecx, 0x10 ; xor edx, edx ; mov rsi, qword ptr [rbp - 0x88] ; div rcx ; mov rdx, rdi ; shl rax, 4 ; sub rsp, rax ; lea rcx, [rsp + 0xf] ; and rcx, 0xfffffffffffffff0 ; mov rdi, rcx ; mov qword ptr [rbp - 0x88], rcx ; call 0x892cc
read: edx rax rcx rdi rdx rip rsp 
write: ecx edx rax rcx rdi rdx rflags rsi rsp 
000fa497: RLP; mov rax, qword ptr [rbp - 0x68] ; mov rcx, qword ptr [rbp - 0x88] ; mov esi, dword ptr [rax + 0x10] ; mov rdi, rcx ; call 0xf9cac
write: esi rax rcx rdi rsp 
000fa4d7: RLP; mov r10, qword ptr [rbp - 0x78] ; mov r12d, eax ; mov rdi, r10 ; call 0x6bf5c
write: r10 r12d rdi rsp 
000fa54b: RLP; mov r11, qword ptr [rbp - 0x88] ; mov r12d, eax ; mov rdi, r11 ; call 0x6bf5c
write: r11 r12d rdi rsp 
000fa75f: RLP; mov ecx, 6 ; mov r14d, eax ; mov rdi, rbp ; xor eax, eax ; lea rdx, [rip + 0x3b6eb] ; mov esi, 8 ; rep stosq qword ptr [rdi], rax ; mov dword ptr [rsp + 0xc4], r12d ; lea r12, [rsp + 0x60] ; mov dword ptr [rsp + 0xc0], 2 ; ror bx, 8 ; mov rdi, r12 ; movzx ecx, bx ; mov dword ptr [rsp + 0xc8], 1 ; call 0x5227c
read: bx eax r12 r12d rax rbp rcx rdi rflags rip rsp 
write: bx eax ecx esi r12 r14d rcx rdi rdx rflags rsp 
000fa7b1: RLP; mov rax, qword ptr [rsp + 0x20] ; lea rcx, [rsp + 0x68] ; mov rdx, rbp ; mov rsi, r12 ; mov rdi, qword ptr [rax] ; call 0xd01ec
write: rax rcx rdi rdx rsi rsp 
000fa80f: RLP; mov rax, qword ptr [rsp + 0x68] ; mov rdi, qword ptr [rax + 0x20] ; call 0x853ec
write: rax rdi rsp 
000fa857: RLP; mov dword ptr [rsp + 0x4c], eax ; lea rax, [rsp + 0x58] ; mov dword ptr [rsp + 0x58], 0x3ff ; mov dword ptr [rsp + 0x48], 1 ; mov qword ptr [rsp + 0x10], rax ; lea rax, [rsp + 0x120] ; mov qword ptr [rsp + 0x18], rax ; nop word ptr cs:[rax + rax] ; movzx esi, word ptr [rbx + 4] ; mov rdi, qword ptr [rsp + 0x10] ; call 0xfa57c
write: esi rax rdi rsp 
000fa93e: RLP; lea rsi, [rip + 0x3c765] ; lea rdi, [rip + 0x3a061] ; mov edx, 5 ; call 0x2f4bc
write: edx rdi rsi rsp 
000fa95a: RLP; mov rdi, qword ptr [rsp + 0x18] ; mov rsi, rax ; mov rdx, r12 ; xor eax, eax ; call 0x523bc
write: eax rdi rdx rflags rsi rsp 
000fa990: RLP; mov rdi, qword ptr [rsp + 0x120] ; call 0x1f46c
write: rdi rsp 
000fa9b0: RLP; mov rbx, qword ptr [rbx + 0x28] ; xor r9d, r9d ; xor r8d, r8d ; mov ecx, 0x2e ; mov rdx, r12 ; mov esi, dword ptr [rbx + 0x10] ; mov rdi, qword ptr [rbx + 0x18] ; mov dword ptr [rsp], 1 ; call 0xfdb6c
write: ecx esi r8d r9d rbx rdi rdx rflags rsp 
000fa9d9: RLP; lea rsi, [rip + 0x3c6e2] ; lea rdi, [rip + 0x39fc6] ; mov edx, 5 ; call 0x2f4bc
write: edx rdi rsi rsp 
000fa9f5: RLP; mov rdi, qword ptr [rsp + 0x18] ; mov rsi, rax ; mov rdx, r12 ; xor eax, eax ; call 0x523bc
write: eax rdi rdx rflags rsi rsp 
000faa2f: RLP; mov rdi, qword ptr [rsp + 0x120] ; call 0x1f46c
write: rdi rsp 
000fab0e: RLP; mov rdi, qword ptr [rsp + 0x68] ; call 0xd019c
write: rdi rsp 
000fab78: RLP; mov ecx, dword ptr [rsp + 0x58] ; lea rdx, [rip + 0x3b2db] ; mov esi, 8 ; mov rdi, rbx ; xor eax, eax ; call 0x5227c
write: eax ecx esi rdi rdx rflags rsp 
000fad1c: RLP; add rax, 1 ; mov qword ptr [rsp + 0xf8], rax ; mov rax, qword ptr [rsp + 0x38] ; mov rdi, rax ; mov qword ptr [rsp + 0x100], rax ; call 0x856dc
write: rax rdi rflags rsp 
000fad41: RLP; add rax, 1 ; mov qword ptr [rsp + 0x108], rax ; mov rax, qword ptr [rsp + 0x40] ; mov rdi, rax ; mov qword ptr [rsp + 0x110], rax ; call 0x856dc
write: rax rdi rflags rsp 
000fae55: RLP; lea rdi, [rsp + 0x120] ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax rdi rflags rsi rsp 
000fae8b: RLP; mov rdi, qword ptr [rsp + 0x120] ; call 0x1f46c
write: rdi rsp 
000faf64: RLP; mov rdi, qword ptr [rsp + 0x68] ; call 0xd019c
write: rdi rsp 
000fb05d: RLP; mov rdi, qword ptr [rsp + 0x70] ; call 0x1f46c
write: rdi rsp 
000fb0c4: RLP; mov rdi, r13 ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax rdi rflags rsi rsp 
000fb10a: RLP; lea rdi, [rsp + 0xf0] ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax rdi rflags rsi rsp 
000fb144: RLP; mov rdi, qword ptr [rsp + 0xf0] ; call 0x1f46c
write: rdi rsp 
000fb17e: RLP; mov rdi, r13 ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax rdi rflags rsi rsp 
000fb240: RLP; lea rdi, [rsp + 0x70] ; mov rsi, rax ; xor eax, eax ; mov rdx, rbx ; call 0x523bc
write: eax rdi rdx rflags rsi rsp 
000fb520: RLP; lea rdx, [rsp + 0xa0] ; xor eax, eax ; mov ecx, 6 ; movzx ebx, bx ; mov rsi, r12 ; mov byte ptr [rsp + 0x7f], 0 ; mov rdi, rdx ; rep stosq qword ptr [rdi], rax ; mov rdi, qword ptr [r13] ; lea rcx, [rsp + 0x58] ; mov dword ptr [rsp + 0xa4], ebx ; mov dword ptr [rsp + 0xa8], 1 ; mov dword ptr [rsp + 0xa0], 2 ; call 0xd01ec
read: bx eax ebx r12 rax rcx rdi rdx rflags rip rsp 
write: eax ebx ecx rcx rdi rdx rflags rsi rsp 
000fb597: RLP; mov rax, qword ptr [rsp + 0x58] ; mov rdi, qword ptr [rax + 0x20] ; call 0x853ec
write: rax rdi rsp 
000fb839: RLP; mov rdi, qword ptr [rsp + 0x40] ; add rax, 1 ; mov qword ptr [rsp + 0x158], rax ; mov qword ptr [rsp + 0x160], rdi ; call 0x856dc
read: rax rdi rip rsp 
write: rax rdi rflags rsp 
000fb85b: RLP; add rax, 1 ; mov qword ptr [rsp + 0x168], rax ; mov rax, qword ptr [rsp + 0x20] ; mov rdi, rax ; mov qword ptr [rsp + 0x170], rax ; call 0x856dc
write: rax rdi rflags rsp 
000fb8d0: RLP; mov rdi, qword ptr [rsp + 0x40] ; cmp rdi, qword ptr [rsp + 0x18] ; je 0xfb8e5
read: rdi rflags 
write: rdi rflags 
000fb98b: RLP; mov rdi, qword ptr [rsp + 0x58] ; call 0xd019c
write: rdi rsp 
000fb9d5: RLP; lea rdi, [rip + 0x3b751] ; call 0x694fc
write: rdi rsp 
000fbcd3: RLP; mov rdi, qword ptr [rip + 0x271aea] ; jmp 0xfbb5c
write: rdi 
000fbce8: RLP; mov rdi, qword ptr [rip + 0x271ad5] ; jmp 0xfbc3e
write: rdi 
000fbd49: RLP; add rax, 0x26 ; mov rsi, r14 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea r12, [rsp + 0xf] ; and r12, 0xfffffffffffffff0 ; mov rdi, r12 ; call 0x898ec
write: r12 rax rdi rflags rsi rsp 
000fbd6c: RLP; movabs rcx, 0x637274656e2e2f ; lea rsi, [rip + 0x38777] ; mov rdi, r12 ; mov qword ptr [rax], rcx ; call 0x6ca9c
write: rcx rdi rsi rsp 
000fbf01: RLP; lea rsi, [rip + 0x271854] ; mov rdi, rax ; xor eax, eax ; call 0xe1f5c
write: eax rdi rflags rsi rsp 
000fbfd3: RLP; test rax, rax ; mov rdi, rax ; mov rdx, qword ptr [rbp - 0x4d8] ; je 0xfc1e8
write: rdi rdx rflags 
000fc0ae: RLP; test rax, rax ; mov rdi, rax ; mov rdx, qword ptr [rbp - 0x4d8] ; je 0xfc1e8
write: rdi rdx rflags 
000fc18c: RLP; mov rdi, rax ; xor eax, eax ; call 0xe1f5c
write: eax rdi rflags rsp 
000fc19a: RLP; lea rsi, [rip + 0x3fecb] ; mov edx, 5 ; lea rdi, [rip + 0x38800] ; mov ebx, 0xffffffff ; call 0x2f4bc
write: ebx edx rdi rsi rsp 
000fc1bb: RLP; mov rdi, rax ; xor eax, eax ; call 0xe1f5c
write: eax rdi rflags rsp 
000fc1c9: RLP; mov rdi, qword ptr [rip + 0x2715f4] ; call 0x6bf5c
write: rdi rsp 
000fc31e: RLP; mov rsi, r14 ; mov rdi, r15 ; call 0xfc24c
write: rdi rsi rsp 
000fc355: RLP; mov rsi, rbx ; mov rdi, r13 ; call qword ptr [rsp + 0x10]
write: rdi rsi rsp 
000fc363: RLP; lea rsi, [rip + 0x3adfa] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov rcx, r15 ; mov rdi, r14 ; mov ebp, eax ; mov r12, qword ptr [rbx + 0x50] ; call 0x10506c
write: ebp edx r12 r8d r9d rcx rdi rflags rsi rsp 
000fc397: RLP; lea rdi, [rax + 9] ; lea r14, [rax + 1] ; call 0x1f3cc
write: r14 rdi rsp 
000fc420: RLP; mov rdi, rbx ; call rbp
write: rdi rsp 
000fc4cb: RLP; lea rdi, [rax + 1] ; mov qword ptr [rbx + 0x30], rdi ; cmp byte ptr [rax + 1], 0 ; mov rax, rbp ; cmovne rax, rdi ; xor esi, esi ; mov qword ptr [rbx + 0x10], rax ; call 0x9023c
read: esi rax rbp rdi rflags rip rsp 
write: esi rax rdi rflags rsp 
000fc4ed: RLP; lea rdi, [rax + 1] ; mov qword ptr [rbx + 0x30], rdi ; cmp byte ptr [rax + 1], 0 ; cmovne rbp, rdi ; xor esi, esi ; mov qword ptr [rbx + 0x18], rbp ; call 0x9023c
read: esi rbp rdi rflags rip rsp 
write: esi rbp rdi rflags rsp 
000fc55c: RLP; mov rdi, qword ptr [rbp] ; test rdi, rdi ; jne 0xfc54c
read: rdi rflags 
write: rdi rflags 
000fc583: RLP; mov rdi, qword ptr [rbx] ; test rdi, rdi ; jne 0xfc574
read: rdi rflags 
write: rdi rflags 
000fc5bd: RLP; mov rdx, qword ptr [rip + 0x26c8a0] ; add rdx, qword ptr fs:[0] ; mov rsi, rbx ; mov rdi, rbp ; call 0xfc2ec
write: rdi rdx rflags rsi rsp 
000fc6fd: RLP; lea rsi, [rbx + 0x48] ; lea rdi, [rbx + 0x40] ; call 0xfc52c
write: rdi rsi rsp 
000fc760: RLP; add rsp, 0x80 ; lea rdi, [rip + 0x27108e] ; call 0xfc1fc
write: rdi rflags rsp 
000fc777: RLP; lea rsi, [rip + 0x2710c6] ; lea rdi, [rip + 0x2710b7] ; call 0xfc52c
write: rdi rsi rsp 
000fc861: RLP; mov rcx, r14 ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, qword ptr [rsp + 8] ; mov rdi, rbx ; call r13
write: rcx rdi rdx rsi rsp 
000fc8fd: RLP; lea rdi, [rax + 9] ; mov qword ptr [rsp + 0x38], rax ; call 0x1f3cc
write: rdi rsp 
000fc985: RLP; mov rdi, qword ptr [rbx + 0x48] ; test rdi, rdi ; jne 0xfc95c
read: rdi rflags 
write: rdi rflags 
000fca5d: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x26c3f9] ; add rax, qword ptr fs:[0] ; lea rcx, [rip + 0x270d81] ; mov r9, r8 ; mov rsi, rbp ; mov r8, r12 ; mov rdi, rbx ; mov qword ptr [rsp], rax ; call 0xfc7dc
write: r8 r9 rax rcx rdi rflags rsi rsp 
000fcbb8: RLP; mov rdi, r12 ; call rbp
write: rdi rsp 
000fcc14: RLP; mov rsi, r12 ; mov rdi, qword ptr [rsp + 0x10] ; call qword ptr [rsp + 0x50]
write: rdi rsi rsp 
000fcc70: RLP; mov rcx, r14 ; mov edx, 0x400 ; mov rsi, qword ptr [rsp] ; mov rdi, r12 ; call rbp
write: edx rcx rdi rsi rsp 
000fcdf6: RLP; lea rdx, [rax + 1] ; lea rdi, [rax + 9] ; mov qword ptr [rsp + 0x48], rdx ; call 0x1f3cc
write: rdi rdx rsp 
000fd040: RLP; add rsp, 0x80 ; lea r8, [rip + 0x27081e] ; lea rcx, [rip + 0x27080f] ; lea rdx, [rip + 0x270818] ; lea rsi, [rip + 0x93c9] ; lea rdi, [rip + 0x3a161] ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; xor r9d, r9d ; call 0x1053dc
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000fd12e: RLP; add rsp, 0x80 ; lea r8, [rip + 0x270730] ; lea rcx, [rip + 0x270721] ; lea rdx, [rip + 0x27072a] ; lea rsi, [rip + 0x92db] ; lea rdi, [rip + 0x3a07f] ; xor r9d, r9d ; call 0x10550c
write: r8 r9d rcx rdi rdx rflags rsi rsp 
000fd20a: RLP; add rsp, 0x80 ; lea r8, [rip + 0x27064c] ; mov qword ptr [rsp + 0x20], rdx ; mov qword ptr [rsp + 0x10], r9 ; lea rcx, [rip + 0x27064b] ; lea r9, [rip + 0x27063c] ; lea rdx, [rip + 0x91f5] ; lea rsi, [rip + 0x39f8d] ; lea rdi, [rip + 0x39f9e] ; mov qword ptr [rsp + 0x30], 0 ; mov qword ptr [rsp + 0x28], rbx ; mov qword ptr [rsp + 0x18], r10 ; mov dword ptr [rsp + 8], 0 ; mov qword ptr [rsp], 0 ; call 0x1055fc
write: r8 r9 rcx rdi rdx rflags rsi rsp 
000fd310: RLP; add rsp, 0x80 ; lea r8, [rip + 0x27055e] ; lea rdx, [rip + 0x26d577] ; lea rsi, [rip + 0x270570] ; lea rdi, [rip - 0x177] ; xor r9d, r9d ; mov ecx, 0x400 ; call 0x10522c
write: ecx r8 r9d rdi rdx rflags rsi rsp 
000fd5fa: RLP; mov r8, r14 ; mov rcx, r13 ; mov rdx, r12 ; mov rsi, rbx ; mov rdi, rbp ; call qword ptr [rsp + 0x20]
write: r8 rcx rdi rdx rsi rsp 
000fe25e: RLP; lea rdx, [rax + 1] ; add rax, 0x1f ; mov r8, qword ptr [rbp - 0x218] ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0x1f] ; mov rsi, r8 ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: r8 rax rdi rip rsp 
write: r8 rax rdi rdx rflags rsi rsp 
000fe289: RLP; mov rcx, qword ptr [rbp - 0x210] ; mov r8, qword ptr [rbp - 0x218] ; mov qword ptr [rcx], rax ; mov rdi, r8 ; call 0x1f46c
write: r8 rcx rdi rsp 
000fe2a6: RLP; mov rax, qword ptr [rbp - 0x1e8] ; mov r10d, dword ptr [rbp - 0x21c] ; mov r14, qword ptr [rax] ; mov rdi, r14 ; mov dword ptr [rbp - 0x210], r10d ; call 0x856dc
write: r10d r14 rax rdi rsp 
000fe611: RLP; mov rdi, qword ptr [rbx + 8] ; test rdi, rdi ; jne 0xfe604
read: rdi rflags 
write: rdi rflags 
000fe89b: RLP; mov rdi, r12 ; call 0xfed8c
write: rdi rsp 
000fe975: RLP; movsxd rdi, ebx ; mov edx, eax ; mov eax, 3 ; syscall ; test edx, edx ; js 0xfe9ac
write: eax edx rdi rflags 
000fefc7: RLP; mov rdi, r14 ; call 0xfed8c
write: rdi rsp 
000ffb4f: RLP; mov rbp, qword ptr [rbx] ; movsxd rsi, r12d ; mov rdi, rbx ; add rsi, rbp ; mov qword ptr [rbx], rsi ; neg esi ; and esi, 7 ; call 0xffa8c
write: esi rbp rdi rflags rsi rsp 
00100132: RLP; mov rdi, rbx ; mov r12d, eax ; call 0x1f46c
write: r12d rdi rsp 
00100410: RLP; mov r8d, dword ptr [rbp - 0x38] ; mov r9d, dword ptr [rbp - 0x3c] ; lea rdi, [rbx + 0x90] ; mov rsi, qword ptr [rbp + 0x10] ; mov rdx, r12 ; mov dword ptr [rbx + 0x88], r8d ; mov dword ptr [rbx + 0x8c], r9d ; call 0x8e3dc
write: r8d r9d rdi rdx rsi rsp 
0010094d: RLP; movzx edi, byte ptr [rbx + 1] ; shl edi, 3 ; movsxd rdi, edi ; shr rdi, 4 ; mov r12d, edi ; sar r12d, 1 ; je 0x1009b8
read: edi r12d rdi rflags 
write: edi r12d rdi rflags 
00100f53: RLP; mov dword ptr [r12], eax ; movzx eax, byte ptr [rbp - 0xd2] ; mov rdi, r15 ; mov qword ptr [r12 + 0x10], rbx ; mov dword ptr [r12 + 4], 2 ; mov byte ptr [r12 + 9], 1 ; mov byte ptr [r12 + 8], al ; lea rax, [rbx + rbx*2 - 3] ; lea rbx, [r12 + rax*8 + 0x18] ; jmp 0x100f98
write: eax rax rbx rdi 
001017de: RLP; mov dword ptr [r13], r14d ; movsxd r14, r14d ; mov rdi, qword ptr [rsp + 8] ; lea rsi, [r14 + r14*4] ; shl rsi, 3 ; call 0x1f3ac
write: r14 rdi rflags rsi rsp 
0010195a: RLP; mov rdi, rax ; mov qword ptr [rbx], rax ; call 0x856dc
write: rdi rsp 
00102933: RLP; mov byte ptr [rbx + 0x17f], 0 ; mov esi, 0xa ; mov rdi, rbp ; call 0x83a5c
write: esi rdi rsp 
0010304f: RLP; test eax, eax ; mov dword ptr [r12 + 0x18], eax ; mov rdi, rbp ; je 0x103008
write: rdi rflags 
001032fb: RLP; mov rdx, qword ptr [rsp + 8] ; lea rdi, [rsp + 0x18] ; mov rsi, rax ; mov r8d, 4 ; xor eax, eax ; mov ecx, r14d ; call 0x523bc
write: eax ecx r8d rdi rdx rflags rsi rsp 
00103339: RLP; mov rdi, qword ptr [rsp + 0x18] ; call 0x1f46c
write: rdi rsp 
00103374: RLP; mov rdx, qword ptr [rsp + 8] ; lea rdi, [rsp + 0x18] ; mov rsi, rax ; mov ecx, r14d ; xor eax, eax ; call 0x523bc
write: eax ecx rdi rdx rflags rsi rsp 
00103518: RLP; lea rdi, [rsp + 8] ; mov rsi, rax ; mov r8, rbx ; xor eax, eax ; mov ecx, r13d ; mov rdx, r12 ; call 0x523bc
write: eax ecx r8 rdi rdx rflags rsi rsp 
00103551: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
001035a2: RLP; test rax, rax ; mov rsi, rax ; lea rax, [rip + 0x33da7] ; cmovne rax, rsi ; lea rsi, [rip + 0x30f3a] ; mov rdi, rax ; mov qword ptr [rsp + 0x10], rax ; call 0x6ca9c
write: rax rdi rflags rsi rsp 
0010368a: RLP; mov r15, rax ; mov r13, rax ; sub r15, rbx ; nop word ptr [rax + rax] ; mov rdx, r15 ; mov rsi, r12 ; mov rdi, rbx ; call 0x8bd2c
write: r13 r15 rdi rdx rflags rsi rsp 
0010371f: RLP; mov ecx, dword ptr [rsp + 4] ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, rax ; mov rdi, qword ptr [rsp + 0x18] ; xor eax, eax ; mov r8, rbx ; call 0x523bc
write: eax ecx r8 rdi rdx rflags rsi rsp 
0010375f: RLP; mov rdi, qword ptr [rsp + 0x28] ; call 0x1f46c
write: rdi rsp 
0010383d: RLP; lea rdi, [rip + 0x33b32] ; call 0x3819c
write: rdi rsp 
0010385e: RLP; lea rdi, [rip + 0x33b24] ; call 0x3819c
write: rdi rsp 
00103890: RLP; lea rdi, [rip + 0x33aff] ; call 0x3819c
write: rdi rsp 
001038c2: RLP; lea rdi, [rip + 0x33adc] ; call 0x3819c
write: rdi rsp 
001038ef: RLP; lea rdi, [rip + 0x33ac7] ; call 0x3819c
write: rdi rsp 
00103c69: RLP; test eax, eax ; mov rdi, qword ptr [rip + 0x266c42] ; mov r11, qword ptr [rsp + 0x10] ; mov r10, qword ptr [rsp + 0x18] ; js 0x103c00
write: r10 r11 rdi rflags 
00103e39: RLP; mov rax, qword ptr [rbp + 8] ; mov rdi, qword ptr [rax] ; test rdi, rdi ; je 0x103e66
read: rdi rflags 
write: rax rdi rflags 
00103e55: RLP; mov rax, qword ptr [rbp + 8] ; mov rdi, qword ptr [rax + rbx] ; add rbx, 8 ; test rdi, rdi ; jne 0x103e4c
read: rbx rdi rflags 
write: rax rbx rdi rflags 
00103e95: RLP; mov rdi, qword ptr [rax] ; mov ecx, dword ptr [rdi] ; test ecx, ecx ; jne 0x103ea4
write: ecx rdi rflags 
00103efe: RLP; mov esi, 1 ; mov rdi, qword ptr [rax] ; call 0x1025ac
write: esi rdi rsp 
00103f85: RLP; mov rdi, rbx ; mov esi, 1 ; call 0x1025ac
write: esi rdi rsp 
00104042: RLP; mov qword ptr [rsp + 0x18], r12 ; mov dword ptr [rsp + 0x14], eax ; mov rdx, rsp ; movsxd rdi, dword ptr [rsp + 0x10] ; movsxd rsi, ebp ; mov eax, 0x81 ; syscall ; cmp rax, -0x1000 ; ja 0x10406e
write: eax rdi rdx rflags rsi 
00104528: RLP; mov rbp, qword ptr [rbx] ; mov rdi, rbx ; call 0x1f46c
write: rbp rdi rsp 
00104615: RLP; mov rcx, qword ptr [rip + 0x264848] ; add rax, 0x1c ; mov rsi, r12 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; movabs rax, 0x5f73736e62696c ; mov ecx, dword ptr fs:[rcx] ; lea rdi, [rsp + 7] ; mov qword ptr [rsp], rax ; mov dword ptr [rbp - 0x34], ecx ; call 0x898ec
write: ecx rax rcx rdi rflags rsi rsp 
0010464c: RLP; mov ecx, 0x322e ; mov dword ptr [rax], 0x6f732e ; mov byte ptr [rax + 5], 0 ; mov word ptr [rax + 3], cx ; mov r15, qword ptr [rbx + 0x20] ; mov esi, 0x80000001 ; mov rdi, rsp ; call 0x11c37c
write: ecx esi r15 rdi rsp 
00104713: RLP; xor edx, edx ; add rax, 0x1a ; mov rsi, r12 ; div r14 ; shl rax, 4 ; sub rsp, rax ; lea rdi, [rsp + 5] ; mov dword ptr [rsp], 0x73736e5f ; mov byte ptr [rsp + 4], 0x5f ; call 0x898ec
write: edx rax rdi rdx rflags rsi rsp 
00104740: RLP; mov edx, 0x74 ; mov dword ptr [rax], 0x696e695f ; mov rsi, rsp ; mov word ptr [rax + 4], dx ; mov rax, qword ptr [rbx + 0x20] ; mov rdi, qword ptr [rax + 8] ; call 0x11c3dc
write: edx rax rdi rsi rsp 
00104b10: RLP; lea rdx, [rax + 1] ; lea rdi, [rax + 0x11] ; mov qword ptr [rsp + 0x20], rdx ; call 0x1f3cc
write: rdi rdx rsp 
00104b4b: RLP; mov rdi, qword ptr [rsp + 0x18] ; call 0x1040bc
write: rdi rsp 
00104b9f: RLP; mov rdi, r14 ; call 0x6bf5c
write: rdi rsp 
00104c2d: RLP; mov rax, qword ptr [rsp + 8] ; mov rdi, qword ptr [rax] ; test rdi, rdi ; mov qword ptr [rsp + 8], rdi ; jne 0x104c24
read: rdi rflags 
write: rax rdi rflags 
00104de4: RLP; add rsp, 0x80 ; lea r14, [r12 + 0x28] ; lea r13, [rbp - 0x38] ; lea rdx, [rip - 0xd6f] ; mov rsi, r14 ; mov rdi, r13 ; call 0xe13dc
write: r13 r14 rdi rdx rflags rsi rsp 
00104edb: RLP; mov r13, qword ptr [rbp - 0x38] ; mov rbx, rax ; mov rdi, r13 ; call 0x856dc
write: r13 rbx rdi rsp 
00104eee: RLP; lea rax, [rbx + rax + 0x16] ; mov rsi, r14 ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 5] ; mov dword ptr [rsp], 0x73736e5f ; mov byte ptr [rsp + 4], 0x5f ; call 0x898ec
write: rax rdi rflags rsi rsp 
00104f17: RLP; lea rdi, [rax + 1] ; mov rsi, r13 ; mov byte ptr [rax], 0x5f ; call 0x8510c
write: rdi rsi rsp 
00104f2a: RLP; mov rax, qword ptr [r12 + 0x20] ; mov rsi, rsp ; mov rdi, qword ptr [rax + 8] ; call 0x11c3dc
write: rax rdi rsi rsp 
00104f82: RLP; mov rdi, r15 ; call 0x1f46c
write: rdi rsp 
001051a6: RLP; lea rsi, [rip + 0x3712f] ; lea rdi, [rip + 0x316d4] ; call 0x104bec
write: rdi rsi rsp 
001051bd: RLP; lea rsi, [rip + 0x31459] ; lea rdi, [rip + 0x3146e] ; call 0x104bec
write: rdi rsi rsp 
001051d4: RLP; lea rdi, [rip + 0x322a7] ; xor esi, esi ; call 0x104bec
write: esi rdi rflags rsp 
00105484: RLP; mov r8d, eax ; mov rcx, qword ptr [rsp] ; xor r9d, r9d ; xor edx, edx ; mov rsi, r15 ; mov rdi, rbx ; call 0x10506c
write: edx r8d r9d rcx rdi rflags rsi rsp 
001056c2: RLP; mov r8, qword ptr [rsp + 0x20] ; mov rcx, qword ptr [rsp + 0x28] ; mov rdx, qword ptr [rsp + 0xb0] ; mov rsi, qword ptr [rsp + 0xa8] ; mov rdi, qword ptr [rsp + 0xa0] ; call qword ptr [rsp + 0x30]
write: r8 rcx rdi rdx rsi rsp 
0010661c: RLP; lea rsi, [rip + 0x267859] ; mov rdi, rsp ; call 0x10826c
write: rdi rsi rsp 
0010662f: RLP; lea rsi, [rip + 0x26785e] ; mov rdi, rsp ; call 0x10826c
write: rdi rsi rsp 
00106642: RLP; mov rax, qword ptr [rsp + 8] ; mov rdi, rsp ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
00106a55: RLP; mov rdi, qword ptr [rax + 0xb8] ; mov eax, 0x10 ; test rdi, rdi ; je 0x106a7c
read: rdi rflags 
write: eax rdi rflags 
00106b76: RLP; mov rax, qword ptr [rbx + 0x20] ; xor esi, esi ; mov rdi, rbp ; mov dword ptr [rbx + 0x18], 1 ; call qword ptr [rax + 0x28]
write: esi rax rdi rflags rsp 
00106b8d: RLP; mov rax, qword ptr [rip + 0x267358] ; mov rsi, r13 ; mov rdi, rbp ; mov qword ptr [rsp + 0x78], rax ; mov rax, qword ptr [rip + 0x26734e] ; mov qword ptr [rsp + 0x80], rax ; mov rax, qword ptr [rip + 0x267347] ; mov qword ptr [rsp + 0x88], rax ; mov rax, qword ptr [rsp + 0x28] ; mov qword ptr [rsp + 0x98], rax ; mov rax, qword ptr [rsp + 0x20] ; mov qword ptr [rsp + 0xa0], rax ; call 0x10837c
write: rax rdi rsi rsp 
00106bf9: RLP; mov r15d, dword ptr [rsp + 0x40] ; mov rdi, qword ptr [r12] ; test r15d, r15d ; mov rax, qword ptr [rdi + 0x38] ; je 0x106c74
write: r15d rax rdi rflags 
00106c2d: RLP; mov rax, qword ptr [rbx + 0x20] ; add qword ptr [rbx + 0x22a8], 1 ; mov rdi, rbp ; mov edx, dword ptr [rbx + 0x22c0] ; mov rsi, qword ptr [rsp + 8] ; call qword ptr [rax + 0x18]
write: edx rax rdi rflags rsi rsp 
00106d55: RLP; mov rsi, rsp ; mov rdi, rbp ; call 0x1083ec
write: rdi rsi rsp 
00106d92: RLP; lea rsi, [rbx + 0x48] ; mov ecx, 2 ; mov edx, 0x2260 ; mov rdi, rbp ; call 0x11493c
write: ecx edx rdi rsi rsp 
00106df0: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00106edd: RLP; mov dword ptr [r14 + 8], 0xffffffff ; mov r14, qword ptr [rbp - 0x78] ; mov rdi, qword ptr [r14] ; test rdi, rdi ; je 0x106f03
read: rdi rflags 
write: r14 rdi rflags 
00106fb9: RLP; mov r14, qword ptr [rbp - 0x78] ; xor edx, edx ; mov rsi, qword ptr [rbp - 0x80] ; mov word ptr [rbp - 0x5e], dx ; mov rdx, qword ptr [rbp - 0x88] ; mov eax, 2 ; xor r8d, r8d ; mov ecx, 5 ; mov rdi, r12 ; lea r9, [r14 + 8] ; mov word ptr [rbp - 0x60], ax ; call 0x11028c
write: eax ecx edx r14 r8d r9 rdi rdx rflags rsi rsp 
0010702f: RLP; mov rax, qword ptr [r14 + 0x28] ; mov byte ptr [rax + 0xff], 0 ; mov rax, qword ptr [rbp - 0x78] ; mov r9, qword ptr [rbp + 0x18] ; mov r8, qword ptr [rbp + 0x10] ; mov rcx, qword ptr [rbp - 0xa0] ; mov rdx, qword ptr [rbp - 0x98] ; mov rsi, qword ptr [rbp - 0x90] ; mov rdi, qword ptr [rax] ; mov rax, qword ptr [rdi + 8] ; mov qword ptr [rsp], 0x19 ; mov qword ptr [rsp + 8], 0 ; call qword ptr [rax]
write: r8 r9 rax rcx rdi rdx rsi rsp 
00107169: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
00107288: RLP; xor edx, edx ; mov ecx, dword ptr [rbp - 0x84] ; mov rsi, qword ptr [rbp - 0x78] ; mov word ptr [rbp - 0x5e], dx ; mov rdx, qword ptr [rbp - 0x80] ; mov eax, 2 ; mov rdi, rbx ; mov word ptr [rbp - 0x60], ax ; call 0x11136c
write: eax ecx edx rdi rdx rflags rsi rsp 
001074c8: RLP; mov rdi, rbx ; mov rsi, rax ; call 0x10e98c
write: rdi rsi rsp 
001075c9: RLP; mov rax, qword ptr [rbx + 8] ; mov rdi, rbx ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
00107616: RLP; lea rcx, [rsp + 0x14] ; mov r9d, 0x1f4 ; mov r8d, 0x32 ; mov edx, 2 ; mov esi, 0x186a0 ; mov rdi, rbx ; mov r12d, eax ; mov dword ptr [rsp + 0x14], eax ; call 0x10f1fc
write: edx esi r12d r8d r9d rcx rdi rsp 
001076e0: RLP; mov rdi, rbp ; mov rsi, rax ; call 0x10e98c
write: rdi rsi rsp 
00107943: RLP; lea rsi, [rsp + 8] ; mov rdi, rbx ; mov r12d, eax ; call 0x113a7c
write: r12d rdi rsi rsp 
00107969: RLP; mov rsi, qword ptr [rbp + 0x20] ; mov r13d, eax ; mov rdi, rbx ; xor eax, eax ; call qword ptr [rbp + 0x28]
write: eax r13d rdi rflags rsi rsp 
00107992: RLP; mov edx, eax ; mov r14d, eax ; mov rax, qword ptr [rbx + 8] ; sub rdx, r13 ; mov esi, r12d ; mov rdi, rbx ; mov qword ptr [rbp + 0x18], rdx ; call qword ptr [rax + 0x28]
write: edx esi r14d rax rdi rdx rflags rsp 
001079af: RLP; lea rsi, [rbp + 0x18] ; mov rdi, rbx ; call 0x113a7c
write: rdi rsi rsp 
00107ae6: RLP; mov rdx, qword ptr [rbx + 8] ; mov dword ptr [rsp + 0x18], eax ; mov rdi, rbx ; call qword ptr [rdx + 0x20]
write: rdi rdx rsp 
00107dad: RLP; lea rax, [rsp + 0x180] ; mov rdi, r14 ; mov rsi, rax ; mov qword ptr [rsp + 0x10], rax ; call 0x10859c
write: rax rdi rsi rsp 
00107dfd: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00107e15: RLP; mov rdx, qword ptr [rbx + 0x38] ; mov rdi, rbx ; call qword ptr [rdx + 0x20]
write: rdi rdx rsp 
0010809e: RLP; mov rsi, qword ptr [rsp + 0x10] ; mov rdi, rbx ; call 0x10837c
write: rdi rsi rsp 
001080f4: RLP; xor eax, eax ; mov rsi, qword ptr [rsp + 0x2a00] ; mov rdi, rbx ; mov rcx, qword ptr [rsp + 8] ; call rcx
write: eax rcx rdi rflags rsi rsp 
00108173: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00108779: RLP; mov rax, qword ptr [rbp + 8] ; mov esi, 8 ; mov rdi, rbp ; call qword ptr [rax + 0x30]
write: esi rax rdi rsp 
00108a5c: RLP; mov rax, qword ptr [rsp + 0x18] ; mov esi, r12d ; mov rdi, rbp ; call qword ptr [rax + 0x30]
write: esi rax rdi rsp 
00108aef: RLP; mov rcx, qword ptr [rsp] ; mov rax, qword ptr [rbx + 8] ; mov edi, r14d ; mov r8, qword ptr [rsp + 8] ; add rdi, rcx ; mov byte ptr [rax + r8], 0 ; mov eax, dword ptr [rdi] ; bswap eax ; mov dword ptr [rbx + 0x10], eax ; mov eax, dword ptr [rdi + 4] ; bswap eax ; mov dword ptr [rbx + 0x14], eax ; mov edx, dword ptr [rdi + 8] ; bswap edx ; cmp edx, 0x10
read: eax edx r14d rcx rdi 
write: eax edi edx r8 rax rcx rdi rflags 
00108c25: RLP; mov rdi, qword ptr [rax + 0xf0] ; xor eax, eax ; test rdi, rdi ; je 0x108c4d
read: eax rdi rflags 
write: eax rdi rflags 
00108c75: RLP; mov rdi, qword ptr [rax + 0xf0] ; xor eax, eax ; test rdi, rdi ; je 0x108c93
read: eax rdi rflags 
write: eax rdi rflags 
00108ce0: RLP; mov rsi, r12 ; mov rdi, rbp ; call 0x10837c
write: rdi rsi rsp 
00108d64: RLP; mov rsi, rbp ; mov rdi, rbx ; call 0x10859c
write: rdi rsi rsp 
00108e9c: RLP; mov rax, qword ptr [r13 + 8] ; mov rsi, qword ptr [rbx + 0x10] ; mov rdx, rbp ; mov rdi, r13 ; call qword ptr [rax + 0x10]
write: rax rdi rdx rsi rsp 
00108f05: RLP; lea rdi, [rsp + 8] ; mov edx, ebx ; jmp 0x108f38
write: edx rdi 
00108f30: RLP; lea rdi, [rsp + 8] ; mov edx, r14d ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax edx rdi rflags rsi rsp 
00108f68: RLP; mov rdi, qword ptr [rsp + 8] ; call 0x1f46c
write: rdi rsp 
00109074: RLP; mov rdi, qword ptr [r12 + 0x100] ; lea rcx, [rip - 0x267] ; mov r8d, 0x11 ; mov rdx, r15 ; mov rsi, rbx ; call 0x11181c
write: r8d rcx rdi rdx rsi rsp 
001090b8: RLP; lea rdi, [rsp + 0x18] ; mov rsi, rax ; mov rcx, r15 ; xor eax, eax ; mov rdx, rbx ; call 0x523bc
write: eax rcx rdi rdx rflags rsi rsp 
001090fc: RLP; mov rdi, qword ptr [rsp + 0x18] ; call 0x1f46c
write: rdi rsp 
00109180: RLP; lea rdi, [rsp + 0x18] ; xor edx, edx ; mov rsi, rax ; xor eax, eax ; call 0x523bc
write: eax edx rdi rflags rsi rsp 
001091ec: RLP; mov rdi, rax ; call 0x853ec
write: rdi rsp 
001094a2: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
001099ea: RLP; mov rdi, rbp ; add rdi, qword ptr [r12 + 0x20] ; mov r14, qword ptr [r12 + 0x28] ; cmp rdi, r14 ; mov qword ptr [r12 + 0x20], rdi ; jne 0x1099c4
read: r14 rbp rdi rflags 
write: r14 rdi rflags 
00109ba6: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
00109bb2: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
00109dbf: RLP; lea rsi, [rip + 0x2d81d] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov rcx, r14 ; mov rdi, r15 ; mov ebx, eax ; call 0x10506c
write: ebx edx r8d r9d rcx rdi rflags rsi rsp 
00109ed3: RLP; mov rcx, qword ptr [rsp + 8] ; lea rsi, [rip + 0x2d711] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov rdi, r15 ; mov ebx, eax ; call 0x10506c
write: ebx edx r8d r9d rcx rdi rflags rsi rsp 
0010b17b: RLP; mov r12, qword ptr [rip + 0x25dc1a] ; mov rdi, qword ptr [r12] ; call 0x6c45c
write: r12 rdi rsp 
0010b1c4: RLP; xor edx, edx ; mov rsi, rbp ; mov rdi, rbp ; xor eax, eax ; call 0xb36bc
write: eax edx rdi rflags rsi rsp 
0010b1d7: RLP; lea rdi, [rip + 0x2b6ce] ; call 0x694fc
write: rdi rsp 
0010b657: RLP; mov rsi, qword ptr [rsp + 8] ; lea rdx, [rax + 1] ; mov rdi, rbx ; call 0x88bbc
write: rdi rdx rsi rsp 
0010ba98: RLP; mov r13, qword ptr [rbp + 8] ; or r12, 0xffffffffffffffff ; xor eax, eax ; mov rcx, r12 ; mov rdi, r13 ; repne scasb al, byte ptr [rdi] ; mov rbp, rcx ; not rbp ; mov edi, ebp ; call 0x1f3cc
read: al eax ebp r12 r13 rbp rcx rdi rflags rip rsp 
write: eax edi r12 r13 rbp rcx rdi rflags rsp 
0010bd33: RLP; mov r9, qword ptr [rsp] ; mov r10, qword ptr [rsp + 8] ; mov rax, qword ptr [r9 + 0xd0] ; mov qword ptr [rax + r10 + 0x20], 0 ; cmp dword ptr [rsp + 0x1c], 0x10000 ; mov ebp, 0x10000 ; mov qword ptr [rsp + 8], r10 ; cmovge ebp, dword ptr [rsp + 0x1c] ; mov qword ptr [rsp], r9 ; movsxd rax, ebp ; lea rdi, [rax*4 + 0x10] ; call 0x1f3cc
write: ebp r10 r9 rax rdi rflags rsp 
0010be61: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010be6d: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010c88b: RLP; mov qword ptr [rsp + 0x30], r12 ; lea r12, [r14 + 0xc8] ; lea rsi, [r14 + 0xa8] ; xor ecx, ecx ; mov edx, 0x18 ; mov qword ptr [rsp + 0x10], rax ; mov rdi, r12 ; mov dword ptr [rsp + 0x18], 0 ; mov qword ptr [rsp + 0x20], 2 ; mov qword ptr [rsp + 0x28], r13 ; call 0x11493c
write: ecx edx r12 rdi rflags rsi rsp 
0010c8cc: RLP; lea rsi, [rsp + 0x10] ; mov rdi, r12 ; call 0x1083ec
write: rdi rsi rsp 
0010c916: RLP; mov edx, dword ptr [rsp + 8] ; mov esi, dword ptr [rsp + 4] ; lea r9, [rip - 0x419] ; lea r8, [rip - 0x390] ; mov rcx, r14 ; mov rdi, r12 ; call 0x109a4c
write: edx esi r8 r9 rcx rdi rsp 
0010c981: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010c9d1: RLP; lea rdi, [r15 + 2] ; mov dword ptr [rbp], eax ; mov dword ptr [rsp + 0xc], eax ; call 0x856dc
write: rdi rsp 
0010ca25: RLP; lea rsi, [rip + 0x2ab9a] ; lea rdi, [rip + 0x27f7a] ; mov edx, 5 ; mov rbp, rax ; call 0x2f4bc
write: edx rbp rdi rsi rsp 
0010cb5f: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010cb6b: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010cc07: RLP; lea rax, [rip + 0x259bce] ; mov qword ptr [rbx + 0x40], rbp ; xor edx, edx ; add rbp, 0x40 ; mov rdi, rbx ; mov dword ptr [rbx], r12d ; mov qword ptr [rbx + 0x30], rbp ; mov qword ptr [rbx + 8], rax ; mov qword ptr [rbx + 0x48], 0 ; mov dword ptr [rbx + 0x10], 0 ; mov word ptr [rbx + 4], dx ; call 0x1115cc
write: edx rax rbp rdi rflags rsp 
0010cc8e: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010cc9a: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010cdb8: RLP; mov rdi, rbx ; mov esi, 1 ; mov ebp, eax ; call 0x109ccc
write: ebp esi rdi rsp 
0010ce32: RLP; mov rsi, rbp ; mov rdi, r12 ; call 0x10859c
write: rdi rsi rsp 
0010d1b9: RLP; lea rdi, [rbx + 2] ; lea edx, [rax + 1] ; mov r14, rax ; mov rsi, r12 ; call 0x8e3dc
write: edx r14 rdi rsi rsp 
0010d218: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
0010d376: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
0010d382: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010d3b1: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
0010d45d: RLP; mov rdi, qword ptr [rsp + 8] ; xor rdi, qword ptr [rsp] ; movsxd rax, ebx ; lea rsi, [rip + 0x260b1c] ; xor rdi, rax ; call 0x39ebc
read: ebx rax rdi rip rsp 
write: rax rdi rflags rsi rsp 
0010d47c: RLP; mov dword ptr [rip + 0x260b22], ebx ; lea rdi, [rip + 0x260b03] ; mov rsi, rbp ; call 0x39dbc
write: rdi rsi rsp 
0010d509: RLP; mov rdi, qword ptr [rbx + 0x10] ; call 0x1f46c
write: rdi rsp 
0010d516: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010d522: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010d858: RLP; mov rdi, qword ptr [rbx + 0x10] ; lea rdx, [rbx + 0x7c] ; add eax, 1 ; mov rsi, r12 ; mov dword ptr [rsp + 0x10], eax ; call 0x11088c
write: eax rdi rdx rflags rsi rsp 
0010d9b3: RLP; mov rdi, qword ptr [r14 + 0x10] ; test rdi, rdi ; je 0x10d9c5
read: rdi rflags 
write: rdi rflags 
0010d9c5: RLP; mov rdi, r14 ; call 0x1f46c
write: rdi rsp 
0010da1a: RLP; mov rdi, r15 ; call 0x110f2c
write: rdi rsp 
0010da84: RLP; mov rdi, r13 ; mov qword ptr [r14], rax ; mov qword ptr [rsp + 8], rax ; call 0x856dc
write: rdi rsp 
0010da98: RLP; mov dword ptr [r14 + 0x18], eax ; add eax, 1 ; mov rdi, rax ; mov qword ptr [rsp + 0x10], rax ; call 0x1f3cc
write: eax rdi rflags rsp 
0010dae4: RLP; mov rcx, qword ptr [rsp + 8] ; mov rdx, qword ptr [rsp + 0x10] ; mov rsi, r13 ; mov rdi, rcx ; call 0x8e3dc
write: rcx rdi rdx rsi rsp 
0010dcba: RLP; mov rdi, qword ptr [rbp + 0x20] ; test rdi, rdi ; je 0x10dccc
read: rdi rflags 
write: rdi rflags 
0010dccc: RLP; mov rdi, qword ptr [rbx + 0x40] ; call 0x1f46c
write: rdi rsp 
0010dcd9: RLP; mov rdi, qword ptr [rbx + 0x20] ; test rdi, rdi ; je 0x10dceb
read: rdi rflags 
write: rdi rflags 
0010dceb: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010dd3a: RLP; mov rsi, rbp ; mov rdi, rsp ; call 0x10826c
write: rdi rsi rsp 
0010dd7d: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
0010de35: RLP; mov rsi, r14 ; mov rdi, rbp ; call 0x10670c
write: rdi rsi rsp 
0010de9a: RLP; mov rax, qword ptr [rsp] ; xor esi, esi ; mov rdi, rbp ; mov dword ptr [rsp + 0x40], 0 ; mov qword ptr [rsp + 0x10], rax ; mov rax, qword ptr [rsp + 0x48] ; call qword ptr [rax + 0x28]
write: esi rax rdi rflags rsp 
0010debc: RLP; mov rsi, r14 ; mov rdi, rbp ; call 0x10670c
write: rdi rsi rsp 
0010df48: RLP; mov rdi, qword ptr [rbp + 0x20] ; test rdi, rdi ; je 0x10df62
read: rdi rflags 
write: rdi rflags 
0010df5a: RLP; mov qword ptr [rbp + 0x20], 0 ; lea r13, [rbp + 0x18] ; mov rdi, r12 ; mov rsi, r13 ; call 0x10826c
write: r13 rdi rsi rsp 
0010e099: RLP; mov rax, qword ptr [rsp + 0x10] ; mov dword ptr [rsp + 0x38], r12d ; lea r12, [rsp + 0x80] ; mov qword ptr [rsp + 0x40], rbp ; lea rbp, [rsp + 0x50] ; xor ecx, ecx ; mov edx, 0x190 ; mov rsi, r12 ; mov qword ptr [rsp + 0x28], r15 ; mov qword ptr [rsp + 0x20], rax ; mov eax, dword ptr [rsp + 0xc] ; mov rdi, rbp ; mov dword ptr [rsp + 0x30], r14d ; mov dword ptr [rsp + 0x34], eax ; call 0x11493c
write: eax ecx edx r12 rax rbp rdi rflags rsi rsp 
0010e0e2: RLP; lea rsi, [rsp + 0x20] ; mov rdi, rbp ; call 0x10670c
write: rdi rsi rsp 
0010e10a: RLP; mov ebp, eax ; mov dword ptr [rbx + 0x10], eax ; mov dword ptr [rbx], 1 ; mov rdi, rbp ; call 0x1f3cc
write: ebp rdi rsp 
0010e13c: RLP; mov rax, qword ptr [rbx] ; mov rdi, r13 ; mov qword ptr [r13], rax ; mov rax, qword ptr [rbx + 8] ; mov qword ptr [r13 + 8], rax ; mov rax, qword ptr [rbx + 0x10] ; mov qword ptr [r13 + 0x10], rax ; call 0x10dd0c
write: rax rdi rsp 
0010e1b6: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
0010e1c2: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010e3fb: RLP; mov rdx, qword ptr [rbp - 0x108] ; mov rsi, qword ptr [rbp - 0x100] ; lea rcx, [rbp - 0xe8] ; xor r9d, r9d ; xor r8d, r8d ; mov rdi, rbx ; mov dword ptr [rbp - 0xe8], 0xffffffff ; call 0x10c77c
write: r8d r9d rcx rdi rdx rflags rsi rsp 
0010e78e: RLP; lea rdi, [rsp + 8] ; mov rsi, rax ; mov r9, r13 ; mov r8, r12 ; mov rcx, rbp ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax r8 r9 rcx rdi rdx rflags rsi rsp 
0010e7be: RLP; mov rdx, qword ptr [rsp + 8] ; mov rdi, qword ptr [rax + 0xb0] ; mov qword ptr [rax + 0xb0], rdx ; call 0x1f46c
write: rdi rdx rsp 
0010e83c: RLP; lea rdi, [rsp + 8] ; mov rsi, rax ; mov r8d, r12d ; mov rcx, rbp ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax r8d rcx rdi rdx rflags rsi rsp 
0010e8a7: RLP; lea rdi, [rsp + 8] ; lea rsi, [rip + 0x28d8e] ; mov r8, rax ; mov rcx, rbp ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax r8 rcx rdi rdx rflags rsi rsp 
0010e95a: RLP; lea rdi, [rsp + 8] ; mov rsi, rax ; mov r8, r12 ; mov rcx, rbp ; mov rdx, rbx ; xor eax, eax ; call 0x523bc
write: eax r8 rcx rdi rdx rflags rsi rsp 
0010ea2d: RLP; lea rdi, [rsp + 8] ; lea rsi, [rip + 0x28c4d] ; mov rcx, rax ; mov r9, rbp ; xor eax, eax ; mov r8, rbx ; mov rdx, r12 ; call 0x523bc
write: eax r8 r9 rcx rdi rdx rflags rsi rsp 
0010ea61: RLP; mov rdx, qword ptr [rsp + 8] ; mov rdi, qword ptr [rax + 0xb0] ; mov qword ptr [rax + 0xb0], rdx ; call 0x1f46c
write: rdi rdx rsp 
0010ebab: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010ebb7: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010f2a7: RLP; mov qword ptr [rsp + 0x30], r12 ; lea r12, [r14 + 0x68] ; lea rsi, [r14 + 0x48] ; xor ecx, ecx ; mov edx, 0x18 ; mov qword ptr [rsp + 0x10], rax ; mov rdi, r12 ; mov dword ptr [rsp + 0x18], 0 ; mov qword ptr [rsp + 0x20], 2 ; mov qword ptr [rsp + 0x28], r13 ; call 0x11493c
write: ecx edx r12 rdi rflags rsi rsp 
0010f2e2: RLP; lea rsi, [rsp + 0x10] ; mov rdi, r12 ; call 0x1083ec
write: rdi rsi rsp 
0010f323: RLP; mov edx, dword ptr [rsp + 0xc] ; mov esi, dword ptr [rsp + 8] ; lea r9, [rip - 0x2d6] ; lea r8, [rip - 0x25d] ; mov rcx, r14 ; mov rdi, r12 ; call 0x109a4c
write: edx esi r8 r9 rcx rdi rsp 
0010f421: RLP; mov rdi, r14 ; call 0x1f46c
write: rdi rsp 
0010f42d: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010f455: RLP; lea rsi, [rip + 0x2816a] ; lea rdi, [rip + 0x2554a] ; mov edx, 5 ; mov rbp, rax ; call 0x2f4bc
write: edx rbp rdi rsi rsp 
0010f74b: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0010f757: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0010f8a5: RLP; mov rax, qword ptr [r14 + 0x90] ; mov rsi, qword ptr [rbp - 0x180] ; mov rdi, r13 ; add dword ptr [rax], 1 ; mov rax, qword ptr [r14 + 0x60] ; call qword ptr [rax + 8]
write: rax rdi rflags rsi rsp 
0010fb82: RLP; mov rax, qword ptr [rbp - 0x1c8] ; lea r12, [rbp - 0x90] ; mov rsi, r12 ; mov rdi, rax ; call 0x10837c
write: r12 rax rdi rsi rsp 
0010ff8b: RLP; mov rbx, rax ; mov eax, dword ptr [rsp + 0xe0] ; lea r13d, [rax + 3] ; mov eax, dword ptr [rsp + 0xe8] ; and r13d, 0xfffffffc ; lea r14d, [rax + 3] ; mov eax, r13d ; and r14d, 0xfffffffc ; mov r12d, r14d ; lea rdi, [r12 + rax + 0xa0] ; call 0x1f3cc
write: eax r12d r13d r14d rbx rdi rflags rsp 
001100bc: RLP; mov qword ptr [rsp + 0x40], rax ; mov rax, qword ptr [rsp + 8] ; xor ecx, ecx ; mov rsi, qword ptr [r15 + 0x90] ; mov edx, r13d ; mov rdi, rbp ; mov dword ptr [rsp + 0x48], 0 ; mov qword ptr [rsp + 0x50], 2 ; mov qword ptr [rsp + 0x58], rax ; mov rax, qword ptr [rsp + 0x10] ; mov qword ptr [rsp + 0x60], rax ; call 0x11493c
write: ecx edx rax rdi rflags rsi rsp 
001100fe: RLP; lea rsi, [rsp + 0x40] ; mov rdi, rbp ; call 0x1083ec
write: rdi rsi rsp 
0011016d: RLP; lea rsi, [rip + 0x27452] ; lea rdi, [rip + 0x24832] ; mov edx, 5 ; mov rbp, rax ; call 0x2f4bc
write: edx rbp rdi rsi rsp 
001103cc: RLP; mov rdi, qword ptr [rbx] ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
001103da: RLP; mov qword ptr [rbx], 0 ; movsxd rdx, dword ptr [rsp + 0xc] ; lea rcx, [rip + 0x27235] ; lea rdi, [rip + 0x272bc] ; mov esi, 0x186bd ; call 0x10e37c
write: esi rcx rdi rdx rsp 
00110423: RLP; mov esi, dword ptr [rbx + 0xc] ; lea rdi, [rip + 0x244e5] ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; mov dword ptr [rbx + 8], eax ; mov rbp, qword ptr [rbx] ; call 0x10dfec
write: ecx edx esi r8d rbp rdi rflags rsp 
00110443: RLP; mov rdi, qword ptr [rbx] ; mov qword ptr [rbp], rax ; cmp qword ptr [rdi], 0 ; je 0x1105c5
write: rdi rflags 
0011047b: RLP; mov rdi, qword ptr [rbx] ; lea rdx, [rsp + 0x18] ; mov esi, 6 ; mov rax, qword ptr [rdi + 8] ; call qword ptr [rax + 0x28]
write: esi rax rdi rdx rsp 
00110510: RLP; mov dword ptr [rbx + 0xc], eax ; mov rax, qword ptr [rbx] ; mov rdi, qword ptr [rax] ; mov rax, qword ptr [rdi + 0x38] ; call qword ptr [rax + 0x20]
write: rax rdi rsp 
00110524: RLP; mov esi, dword ptr [rbx + 0xc] ; lea rdi, [rip + 0x243e4] ; xor r8d, r8d ; xor ecx, ecx ; xor edx, edx ; mov rbp, qword ptr [rbx] ; call 0x10dfec
write: ecx edx esi r8d rbp rdi rflags rsp 
00110541: RLP; mov rdi, qword ptr [rbx] ; mov qword ptr [rbp], rax ; cmp qword ptr [rdi], 0 ; je 0x1105c5
write: rdi rflags 
0011065a: RLP; mov rdi, rax ; xor edx, edx ; test rdi, rdi ; je 0x110695
read: edx rax rdi rflags 
write: edx rdi rflags 
001106f2: RLP; mov rdi, rax ; jmp 0x11065d
write: rdi 
00110aa5: RLP; mov ebp, eax ; mov rax, qword ptr [rbx + 8] ; mov rdi, rbx ; call qword ptr [rax + 0x20]
write: ebp rax rdi rsp 
00110bd1: RLP; mov rax, qword ptr [rbx] ; mov rdx, qword ptr [rax + 8] ; mov rdi, rax ; call qword ptr [rdx + 0x20]
write: rax rdi rdx rsp 
00110be2: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
00110cb6: RLP; mov rdi, rbp ; call 0x856dc
write: rdi rsp 
00110d45: RLP; mov byte ptr [rsp + 0x40], 0 ; mov esi, 0x2e ; mov rdi, rbp ; call 0x83a5c
write: esi rdi rsp 
00110ffe: RLP; mov rcx, qword ptr [rsp] ; mov rdi, qword ptr [rsp + 8] ; lea rsi, [rip + 0x266c9] ; xor r9d, r9d ; xor edx, edx ; mov r8d, eax ; mov ebx, eax ; call 0x10506c
write: ebx edx r8d r9d rcx rdi rflags rsi rsp 
00111328: RLP; lea rcx, [rsp + 0x2c] ; cmp eax, -1 ; mov r9d, 0x190 ; mov r8d, 0x190 ; mov edx, 2 ; mov esi, 0x186a0 ; mov rdi, rbx ; mov dword ptr [rsp + 0x2c], eax ; setne r12b ; call 0x10f1fc
write: edx esi r12b r8d r9d rcx rdi rflags rsp 
0011163b: RLP; mov rdi, qword ptr [rax] ; mov r13, rax ; xor ecx, ecx ; mov rdx, rdi ; jmp 0x111660
read: ecx rax rdi 
write: ecx r13 rdi rdx rflags 
00111715: RLP; movsxd rdi, eax ; shl rdi, 3 ; call 0x1f3cc
read: eax rdi rip rsp 
write: rdi rflags rsp 
0011191b: RLP; test rax, rax ; mov rdi, rax ; je 0x111974
write: rdi rflags 
00111943: RLP; lea rdx, [rsp + 0x18] ; mov rsi, r12 ; mov rdi, rbp ; call 0x11156c
write: rdi rdx rsi rsp 
0011198a: RLP; mov rdi, qword ptr [rsp + 8] ; mov rdx, qword ptr [rdi] ; mov qword ptr [rax + 0xe8], rdx ; jmp 0x111933
write: rdi rdx 
00111d82: RLP; mov rax, qword ptr [r15 + 8] ; mov rdi, r15 ; call qword ptr [rax + 8]
write: rax rdi rsp 
00111dc0: RLP; mov rax, qword ptr [r15 + 8] ; mov rdi, r15 ; call qword ptr [rax + 8]
write: rax rdi rsp 
00111f7d: RLP; mov rax, qword ptr [rax + 0xe0] ; add r15d, 1 ; mov rdi, qword ptr [rax + r12*8] ; call 0x11173c
write: r15d rax rdi rflags rsp 
0011211f: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
0011212b: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
001121c7: RLP; lea rax, [rip + 0x25478e] ; mov qword ptr [rbx + 0x40], rbp ; xor edx, edx ; add rbp, 0x40 ; mov rdi, rbx ; mov dword ptr [rbx], r12d ; mov qword ptr [rbx + 0x30], rbp ; mov qword ptr [rbx + 8], rax ; mov qword ptr [rbx + 0x48], 0 ; mov dword ptr [rbx + 0x10], 0 ; mov word ptr [rbx + 4], dx ; call 0x1115cc
write: edx rax rbp rdi rflags rsp 
0011224e: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0011225a: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
00112358: RLP; mov rdi, rbx ; mov esi, 1 ; mov ebp, eax ; call 0x109ccc
write: ebp esi rdi rsp 
001123d2: RLP; mov rsi, r12 ; mov rdi, rbp ; call 0x10859c
write: rdi rsi rsp 
001125d2: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00112756: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
00112762: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
00112791: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00112878: RLP; mov rdi, qword ptr [rbx + 0x40] ; call 0x1f46c
write: rdi rsp 
00112885: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
00112891: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
00112a05: RLP; mov r15, qword ptr [rsp + 8] ; mov rdi, r13 ; mov rsi, r15 ; call 0x10859c
write: r15 rdi rsi rsp 
00112c43: RLP; mov rax, qword ptr [rbx + 8] ; mov rsi, r13 ; mov rdi, r12 ; mov qword ptr [r13], rax ; call 0x10837c
write: rax rdi rsi rsp 
00112dd6: RLP; mov rdx, qword ptr [r13 + 0x30] ; mov rax, qword ptr [r14 + 8] ; mov qword ptr [r12 + 8], rdx ; mov rdx, qword ptr [r13 + 0x28] ; mov qword ptr [r12], rax ; mov qword ptr [r12 + 0x10], rdx ; mov rdx, qword ptr [r13 + 0x20] ; mov qword ptr [r12 + 0x18], rdx ; mov rsi, qword ptr [r13 + 0x38] ; mov rdi, qword ptr [r13 + 0x40] ; mov qword ptr [r12 + 0x20], rsi ; mov qword ptr [r12 + 0x28], rdi ; mov rdx, qword ptr [rbp + 0x48] ; mov rdx, qword ptr [rdx + 0x1d0] ; mov rcx, qword ptr [rdx]
read: rax rdi rdx rsi 
write: rax rcx rdi rdx rsi 
00112ea6: RLP; lea rsi, [rip + 0x296cf] ; mov edx, 5 ; lea rdi, [rip + 0x21af4] ; call 0x2f4bc
write: edx rdi rsi rsp 
001130ba: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00113176: RLP; mov rdi, rbp ; xor ebp, ebp ; call 0x1f46c
write: ebp rdi rflags rsp 
00113184: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
00113190: RLP; mov rdi, r14 ; call 0x1f46c
write: rdi rsp 
001131bf: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
0011331d: RLP; mov rdi, r12 ; call 0x1f46c
write: rdi rsp 
001134c0: RLP; mov rsi, rsp ; mov rdi, r14 ; call 0x11342c
write: rdi rsi rsp 
001134cf: RLP; lea r8, [rsp + 0x10] ; xor ecx, ecx ; mov edx, ebx ; mov rsi, rbp ; mov rdi, rsp ; mov qword ptr [rsp + 0x10], 0 ; call 0x10a05c
write: ecx edx r8 rdi rflags rsi rsp 
00113525: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
00113590: RLP; mov rsi, rsp ; mov rdi, r14 ; call 0x11342c
write: rdi rsi rsp 
0011359f: RLP; lea r8, [rsp + 0x10] ; mov ecx, 1 ; mov edx, ebx ; mov rsi, rbp ; mov rdi, rsp ; mov qword ptr [rsp + 0x10], 0 ; call 0x10a05c
write: ecx edx r8 rdi rsi rsp 
001135fd: RLP; mov rdi, rbp ; call 0x1f46c
write: rdi rsp 
001141cc: RLP; mov dword ptr [rsp + 0xc], eax ; lea rsi, [rsp + 0xc] ; mov rdi, rbx ; call 0x11399c
write: rdi rsi rsp 
00114bcc: RLP; mov rdi, r12 ; call 0x1f3cc
write: rdi rsp 
00114cb8: RLP; mov rdi, qword ptr [rsp + 0x18] ; mov ebx, eax ; call 0x1f46c
write: ebx rdi rsp 
00114f4a: RLP; mov rdi, qword ptr [rax] ; mov rbx, rax ; call 0x1f46c
write: rbx rdi rsp 
00115099: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
001150a5: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
001150d6: RLP; mov rdi, rax ; call 0x694fc
write: rdi rsp 
00115649: RLP; lea rsi, [rax + 1] ; mov qword ptr [rsp], r14 ; mov r9, r13 ; mov r8, r12 ; mov rcx, rbp ; xor edx, edx ; mov rdi, rbx ; call 0x11522c
write: edx r8 r9 rcx rdi rflags rsi rsp 
001156c9: RLP; lea rsi, [rbx + 0xc] ; mov qword ptr [rsp], r14 ; mov r9, r13 ; mov r8, r12 ; mov rcx, rbp ; mov edx, 1 ; sub rsi, rax ; mov rdi, rax ; call 0x11522c
write: edx r8 r9 rcx rdi rflags rsi rsp 
00115e04: RLP; lea rsi, [rax + 1] ; mov qword ptr [rsp], r14 ; mov r9, r13 ; mov r8, r12 ; mov rcx, rbp ; mov rdi, rbx ; mov edx, 2 ; call 0x1156fc
write: edx r8 r9 rcx rdi rsi rsp 
00115e79: RLP; lea rsi, [rbx + 0xc] ; mov qword ptr [rsp], r14 ; mov r9, r13 ; mov r8, r12 ; mov rcx, rbp ; mov edx, 3 ; sub rsi, rax ; mov rdi, rax ; call 0x1156fc
write: edx r8 r9 rcx rdi rflags rsi rsp 
001162f8: RLP; mov rax, qword ptr [r15 + 0x18] ; mov r10, qword ptr [rbp - 0x100] ; mov r11, qword ptr [rbp - 0xf0] ; mov rdi, qword ptr [rax] ; mov rsi, r10 ; mov qword ptr [rbp - 0xe0], r10 ; mov rdx, r11 ; call 0x8e3dc
write: r10 r11 rax rdi rdx rsi rsp 
00116735: RLP; mov r9, qword ptr [rsp + 0x18] ; add ebx, 5 ; lea rsi, [rax + 1] ; mov qword ptr [rsp], r15 ; mov r8, r13 ; mov rcx, r12 ; mov edx, ebx ; mov rdi, rbp ; mov qword ptr [rsp + 8], r9 ; mov r9, r14 ; call 0x115eac
write: ebx edx r8 r9 rcx rdi rflags rsi rsp 
001167ae: RLP; lea rsi, [rax + 1] ; mov rax, qword ptr [rsp + 0x50] ; add ebx, 4 ; mov qword ptr [rsp], r15 ; mov r9, r14 ; mov r8, r13 ; mov rcx, r12 ; mov edx, ebx ; mov rdi, rbp ; mov qword ptr [rsp + 8], rax ; call 0x115eac
write: ebx edx r8 r9 rax rcx rdi rflags rsi rsp 
00117234: RLP; mov rdx, qword ptr [rbp - 0x88] ; lea rdi, [rax + 1] ; mov byte ptr [rax], 0x2f ; mov rsi, r14 ; call 0x8e3dc
write: rdi rdx rsi rsp 
0011724e: RLP; mov rdi, qword ptr [rbp - 0xb0] ; lea rax, [rbp - 0x70] ; mov dword ptr [rbp - 0x88], 0 ; mov qword ptr [rbp - 0xa8], rax ; mov rax, rdi ; neg rax ; mov qword ptr [rbp - 0xb8], rax ; and qword ptr [rbp - 0xb8], 7 ; mov rax, rdi ; add rax, qword ptr [rbp - 0xb8] ; mov qword ptr [rbp - 0xd0], rax ; nop dword ptr [rax] ; cmp rbx, -1 ; je 0x11735c
read: rax rbx rdi rflags 
write: rax rdi rflags 
00117a49: RLP; mov qword ptr [rsp + 8], r15 ; mov qword ptr [rsp], r14 ; mov r9, r13 ; mov r8, r12 ; mov rdx, rbp ; mov rdi, rbx ; mov ecx, 0x10 ; mov rsi, rax ; call 0x11713c
write: ecx r8 r9 rdi rdx rsi rsp 
00117acd: RLP; sub rbx, rax ; mov qword ptr [rsp + 8], r15 ; mov qword ptr [rsp], r14 ; mov rsi, rbx ; mov r9, r13 ; mov r8, r12 ; mov rdx, rbp ; mov ecx, 0x11 ; mov rdi, rax ; call 0x11713c
write: ecx r8 r9 rbx rdi rdx rflags rsi rsp 
00117eb7: RLP; test r12, r12 ; lea rdi, [rax + 1] ; je 0x1180b5
write: rdi rflags 
00118233: RLP; mov rax, qword ptr [rsp + 0x18] ; lea rcx, [rax + 0x1f4] ; mov rax, rcx ; imul r13 ; mov rax, rcx ; sar rax, 0x3f ; sar rdx, 7 ; sub rax, rdx ; mov rdx, qword ptr [rsp + 0x10] ; imul rdx, rdx, -0x3e8 ; add rax, rdx ; lea rbx, [rax + r14] ; mov edx, ebx ; mov esi, 1 ; mov rdi, rbp
write: edx esi rax rbx rcx rdi rdx rflags 
0011872b: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
001188ac: RLP; mov rdx, qword ptr [rbp - 0x158] ; mov rdi, qword ptr [r15] ; mov eax, dword ptr [rbp - 0x15c] ; test rdi, rdi ; mov dword ptr fs:[r12], eax ; mov qword ptr [r15], rdx ; je 0x1188d4
read: eax rdi rdx rflags 
write: eax rdi rdx rflags 
00118ff5: RLP; lea rsi, [rbx + 5] ; lea rdi, [rsp + 0x18] ; mov edx, 0x20 ; lea rbp, [rsp + 0x10] ; call 0x8740c
write: edx rbp rdi rsi rsp 
00119011: RLP; lea rdx, [rsp + 8] ; lea rsi, [rsp + 0x190] ; mov rdi, rbp ; call 0x119c3c
write: rdi rdx rsi rsp 
001191b4: RLP; mov rax, qword ptr [rip + 0x251569] ; lea rdx, [rsp + 8] ; lea rsi, [rsp + 0x190] ; lea rdi, [rsp + 0x10] ; call qword ptr [rax + 0x18]
write: rax rdi rdx rsi rsp 
001198b6: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x250e60] ; mov rsi, r9 ; mov rdi, r8 ; call qword ptr [rax + 8]
write: rax rdi rflags rsi rsp 
00119963: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x250db3] ; mov rdi, rdx ; call qword ptr [rax + 0x20]
write: rax rdi rflags rsp 
00119bcf: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x250b47] ; mov rsi, r10 ; mov rdi, r9 ; call qword ptr [rax + 0x10]
write: rax rdi rflags rsi rsp 
00119c86: RLP; add rsp, 0x80 ; mov rax, qword ptr [rip + 0x250a90] ; mov rsi, r10 ; mov rdi, r9 ; call qword ptr [rax + 0x18]
write: rax rdi rflags rsi rsp 
00119d48: RLP; lea rsi, [rsp + 0x30] ; mov r13d, eax ; lea rax, [rip - 0x6b] ; mov ecx, 0x10 ; mov dword ptr [rsp + 0xb8], 0 ; mov r12d, 0xffffffff ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x30], rax ; xor eax, eax ; mov rdi, rdx ; mov rdx, rbp ; rep stosq qword ptr [rdi], rax ; mov edi, 0xe ; call 0x3617c
read: eax rax rbp rcx rdi rdx rflags rip rsp 
write: eax ecx edi r12d r13d rax rcx rdi rdx rflags rsi rsp 
0011a016: RLP; test eax, eax ; lea rdi, [rip + 0x1d86f] ; je 0x119fd2
write: rdi rflags 
0011a046: RLP; test eax, eax ; lea rdi, [rip + 0x1d830] ; je 0x119fd2
write: rdi rflags 
0011a072: RLP; test eax, eax ; lea rdi, [rip + 0x1d822] ; jne 0x119fd2
write: rdi rflags 
0011a0aa: RLP; lea rdi, [rip + 0x1d7fa] ; test eax, eax ; cmove rdi, qword ptr [rip + 0x24fe51] ; jmp 0x119fd2
read: eax rdi rflags 
write: rdi rflags 
0011a193: RLP; lea rsi, [rsp + 0x20] ; mov r14d, eax ; lea rax, [rip - 0x4b6] ; mov ecx, 0x10 ; lea r12, [rsp + 0xc0] ; mov dword ptr [rsp + 0xa8], 0 ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x20], rax ; xor eax, eax ; add rbx, 8 ; mov r13, rsp ; mov rdi, rdx ; mov rdx, r12 ; rep stosq qword ptr [rdi], rax ; mov edi, 0xe
read: eax r12 rax rbx rcx rdi rdx rflags rsp 
write: eax ecx edi r12 r13 r14d rax rbx rcx rdi rdx rflags rsi 
0011a478: RLP; lea rsi, [rsp + 0x20] ; mov r13d, eax ; lea rax, [rip - 0x79b] ; mov ecx, 0x10 ; mov dword ptr [rsp + 0xa8], 0 ; xor r14d, r14d ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x20], rax ; xor eax, eax ; mov rdi, rdx ; mov rdx, r12 ; rep stosq qword ptr [rdi], rax ; mov edi, 0xe ; call 0x3617c
read: eax r12 r14d rax rcx rdi rdx rflags rip rsp 
write: eax ecx edi r13d r14d rax rcx rdi rdx rflags rsi rsp 
0011a765: RLP; lea rsi, [rsp + 0x20] ; mov r14d, eax ; lea rax, [rip - 0xa88] ; mov ecx, 0x10 ; lea r12, [rsp + 0xc0] ; mov dword ptr [rsp + 0xa8], 0 ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x20], rax ; xor eax, eax ; mov r13, rsp ; mov rdi, rdx ; mov rdx, r12 ; rep stosq qword ptr [rdi], rax ; mov edi, 0xe ; call 0x3617c
read: eax r12 rax rcx rdi rdx rflags rip rsp 
write: eax ecx edi r12 r13 r14d rax rcx rdi rdx rflags rsi rsp 
0011ac43: RLP; lea rsi, [rsp + 0x20] ; mov r12d, eax ; lea rax, [rip - 0xf66] ; mov ecx, 0x10 ; mov dword ptr [rsp + 0xa8], 0 ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x20], rax ; xor eax, eax ; mov rdi, rdx ; mov rdx, rbp ; rep stosq qword ptr [rdi], rax ; mov edi, 0xe ; call 0x3617c
read: eax rax rbp rcx rdi rdx rflags rip rsp 
write: eax ecx edi r12d rax rcx rdi rdx rflags rsi rsp 
0011ad5f: RLP; lea rsi, [rsp + 0x20] ; mov r12d, eax ; lea rax, [rip - 0x1082] ; mov ecx, 0x20 ; mov dword ptr [rsp + 0xa8], 0 ; mov r13, rsp ; lea rdx, [rsi + 8] ; mov qword ptr [rsp + 0x20], rax ; mov eax, r14d ; mov rdi, rdx ; mov rdx, rbp ; rep stosd dword ptr [rdi], eax ; mov edi, 0xe ; call 0x3617c
read: eax r14d rax rbp rcx rdi rdx rflags rip rsp 
write: eax ecx edi r12d r13 rax rcx rdi rdx rsi rsp 
0011adb1: RLP; mov eax, r14d ; mov ecx, 8 ; mov rdi, rsp ; rep stosd dword ptr [rdi], eax ; mov edi, dword ptr [rip + 0x24e528] ; mov rdx, rsp ; mov esi, 7 ; mov word ptr [rsp], 1 ; call 0xd6efc
read: eax r14d rcx rdi rflags rip rsp 
write: eax ecx edi esi rcx rdi rdx rsp 
0011af06: RLP; test eax, eax ; lea rdi, [rip + 0x1c97f] ; je 0x11ab53
write: rdi rflags 
0011af36: RLP; test eax, eax ; lea rdi, [rip + 0x1c940] ; je 0x11ab53
write: rdi rflags 
0011af62: RLP; test eax, eax ; lea rdi, [rip + 0x1c932] ; jne 0x11ab53
write: rdi rflags 
0011af92: RLP; lea rdi, [rip + 0x1c912] ; test eax, eax ; cmove rdi, qword ptr [rip + 0x24ef69] ; jmp 0x11ab53
read: eax rdi rflags 
write: rdi rflags 
0011b0b0: RLP; mov r12, qword ptr [rip + 0x24ee55] ; lea rax, [rip + 0x24b9de] ; mov rdi, rbx ; mov qword ptr [rip + 0x24f65c], rax ; mov rsi, r12 ; call 0x83c8c
write: r12 rax rdi rsi rsp 
0011b68c: RLP; mov edx, 0x400 ; cmp rax, -1 ; lea rsi, [rbp - 0x10e0] ; cmove rax, rdx ; lea r8, [rbp - 0x10e8] ; lea rdi, [rip + 0x1a333] ; lea rdx, [rax + 0x1e] ; mov rcx, rax ; and rdx, 0xfffffffffffffff0 ; sub rsp, rdx ; lea rdx, [rsp + 0xf] ; and rdx, 0xfffffffffffffff0 ; call 0xb0acc
write: edx r8 rax rcx rdi rdx rflags rsi rsp 
0011be96: RLP; mov rdi, rbp ; call 0x1f42c
write: rdi rsp 
0011c914: RLP; mov rsi, qword ptr [rbp - 0x70] ; mov qword ptr [rbp - 0x90], rax ; mov rcx, r15 ; mov eax, r14d ; mov rdi, rsi ; repne scasb al, byte ptr [rdi] ; mov rdx, rcx ; not rdx ; lea rax, [rdx + 0x1e] ; and rax, 0xfffffffffffffff0 ; sub rsp, rax ; lea rdi, [rsp + 0x1f] ; and rdi, 0xfffffffffffffff0 ; call 0x8e3dc
read: al r14d r15 rax rcx rdi rdx rflags rip rsi rsp 
write: eax rax rcx rdi rdx rflags rsi rsp 
0011cc81: RLP; mov rdi, rbx ; mov qword ptr [rsp + 0x10], rax ; lea r13, [rax + 1] ; call 0xaeb5c
write: r13 rdi rsp 
0011cdd1: RLP; lea rdi, [r15 + r15] ; mov qword ptr [rip + 0x24f1e0], rdi ; call 0x1f3cc
read: rdi rip rsp 
write: rdi rsp 
0011ced2: RLP; mov rdi, r15 ; mov qword ptr [rsp], rax ; call 0xaeb5c
write: rdi rsp 
0011d48b: RLP; mov rdi, rbx ; add rdi, qword ptr [r13 + 0x10] ; call rbp
read: rbp rbx rdi rsp 
write: rdi rflags rsp 
0011d4bc: RLP; mov rax, qword ptr [r13 + 0x18] ; lea rdx, [rax + rax*2] ; lea rax, [rax + rdx*4] ; mov rdx, qword ptr [r13 + 0x10] ; lea rax, [rdx + rax*8] ; mov rdi, qword ptr [rax - 0x48] ; call 0x1f46c
write: rax rdi rdx rsp 
0011d4dd: RLP; mov rdi, qword ptr [r13 + 0x10] ; call 0x1f46c
write: rdi rsp 
0011d4ea: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
0011d54b: RLP; mov rdi, qword ptr [rbx + 0x30] ; test rdi, rdi ; je 0x11d56c
read: rdi rflags 
write: rdi rflags 
0011d5b6: RLP; mov rdi, qword ptr [rip + 0x250d9f] ; test rdi, rdi ; je 0x11d5d2
read: rdi rflags 
write: rdi rflags 
0011d5d2: RLP; mov rdi, qword ptr [rip + 0x250d93] ; test rdi, rdi ; je 0x11d5e7
read: rdi rflags 
write: rdi rflags 
0011d5e7: RLP; mov rdi, qword ptr [rip + 0x24d30e] ; test rdi, rdi ; je 0x11d603
read: rdi rflags 
write: rdi rflags 
0011d6a6: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0011d762: RLP; mov rdi, qword ptr [r12] ; lea rax, [rip + 0x18943] ; cmp rdi, rax ; je 0x11d786
read: rax rdi rflags 
write: rax rdi rflags 
0011d7a4: RLP; mov rdi, r15 ; call 0x1f46c
write: rdi rsp 
0011d8a3: RLP; mov rdi, qword ptr [r12 + 0x10] ; call 0x1f46c
write: rdi rsp 
0011d932: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0011d9a5: RLP; mov rdi, qword ptr [rbx + 0x10] ; call 0x1f46c
write: rdi rsp 
0011d9b2: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0011d9e3: RLP; mov rdi, qword ptr [rip + 0x24d172] ; mov rsi, qword ptr [rip + 0x24b5a3] ; call 0xe1a4c
write: rdi rsi rsp 
0011d9fa: RLP; mov rdi, qword ptr [rip + 0x24d153] ; mov qword ptr [rip + 0x24d150], 0 ; test rdi, rdi ; jne 0x11da1f
read: rdi rflags 
write: rdi rflags 
0011da71: RLP; mov rdi, qword ptr [rbx] ; mov rbp, qword ptr [rbx + 0x18] ; call 0x1f46c
write: rbp rdi rsp 
0011da81: RLP; mov rdi, rbx ; call 0x1f46c
write: rdi rsp 
0011db10: RLP; mov rdi, qword ptr [rbx + 0x10] ; lea rax, [rdi - 1] ; cmp rax, -3 ; ja 0x11dadc
write: rax rdi rflags 
0011db39: RLP; mov rdi, qword ptr [r13 + 0x20] ; call 0x1f46c
write: rdi rsp 
0011db5b: RLP; mov rdi, r13 ; call 0x1f46c
write: rdi rsp 
0011dbad: RLP; mov rsi, qword ptr [rip + 0x24b3e0] ; mov rdi, qword ptr [rip + 0x24d081] ; call 0xe1a4c
write: rdi rsi rsp 
0011dc0f: RLP; mov rdi, rbx ; test rdi, rdi ; jne 0x11dbfd
read: rbx rdi rflags 
write: rdi rflags 
0011de57: RLP; mov rdi, qword ptr [rip + 0x24e126] ; lea rax, [rip + 0x14457] ; cmp rdi, rax ; je 0x11de7a
read: rax rdi rflags 
write: rax rdi rflags 
0011de7a: RLP; mov rdi, qword ptr [rip + 0x24e113] ; lea rax, [rip + 0x14574] ; cmp rdi, rax ; je 0x11de9d
read: rax rdi rflags 
write: rax rdi rflags 
0011df4c: RLP; add rsp, 0x80 ; lea rsi, [rip + 0x24e922] ; xor eax, eax ; mov ecx, 0x121 ; mov rdx, qword ptr [rip + 0x24e914] ; mov qword ptr [rip + 0x2505e1], 0 ; mov rdi, rsi ; rep stosq qword ptr [rdi], rax ; cmp dword ptr [rip + 0x2507f0], 0 ; je 0x11df8d
read: eax rax rcx rdi rflags rsi rsp 
write: eax ecx rcx rdi rdx rflags rsi rsp 
0011e15d: RLP; mov rdi, qword ptr [rax + 0xb0] ; call 0x1f46c
write: rdi rsp 
0011e410: RLP; mov rdi, qword ptr [r13 + 0xf78] ; mov qword ptr [r13 + 0xf78], 0 ; call 0x1f46c
write: rdi rsp 
0011e5b4: RLP; mov rdi, qword ptr [rax + 0x50] ; call 0x1f46c
write: rdi rsp 
0011e646: RLP; mov rdi, qword ptr [rbx + 0xb0] ; call 0x1f46c
write: rdi rsp 
0011e656: RLP; mov rdi, qword ptr [rbx + 0xb8] ; call 0x1f46c
write: rdi rsp 
0011e666: RLP; mov rdi, qword ptr [rbx + 0xf0] ; call 0x1f46c
write: rdi rsp 
0011e676: RLP; mov rdi, qword ptr [rbx + 0xd0] ; call 0x1f46c
write: rdi rsp 
0011e686: RLP; mov rdi, qword ptr [rbx + 0xd8] ; call 0x1f46c
write: rdi rsp 
0011e696: RLP; mov rdi, qword ptr [rbx + 0xe0] ; call 0x1f46c
write: rdi rsp 
0011e6a6: RLP; mov rdi, qword ptr [rbx + 0xa0] ; call 0x1f46c
write: rdi rsp 
